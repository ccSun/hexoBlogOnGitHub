{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/about_Wechat.jpg","path":"images/about_Wechat.jpg","modified":1,"renderable":0},{"_id":"source/about/index/about_Wechat.jpg","path":"about/index/about_Wechat.jpg","modified":1,"renderable":0},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"4c31d6fcf6c580ea2e3702b54135363b05c98925","modified":1460455089000},{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1458284217000},{"_id":"themes/maupassant/_config.yml","hash":"4c7c98c7730c22160fc1668d428e1239d5311c77","modified":1458284415000},{"_id":"themes/maupassant/README.md","hash":"def832798496a6ad6a18e0ba2c7149571ded21a0","modified":1458284217000},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1458284217000},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1458284217000},{"_id":"source/_posts/android-activity.md","hash":"795c605e5296b4df579770d319ba5a7c9301a63e","modified":1460447563000},{"_id":"source/_posts/.DS_Store","hash":"e2b16c52ffa7527c3e40a2e60b5a8de0d56bafc8","modified":1460455705000},{"_id":"source/_posts/android-build-process.md","hash":"58d8b9caf2deadb8d8102983c67b7fe5348c1b81","modified":1460456091000},{"_id":"source/_posts/android-ddms-and-monitor.md","hash":"02c5b854686863f9a30477a4cd21451c526b7a8b","modified":1459157388000},{"_id":"source/_posts/android-code-tools.md","hash":"06c4ef073601dc12d813d02be95d12e845b5d8dd","modified":1459215562000},{"_id":"source/_posts/android-displaying-bitmap-efficiently.md","hash":"11230e9ab24c265ece57f27983420cf20de949f7","modified":1460341606000},{"_id":"source/_posts/android-fragment.md","hash":"d37703aec6b8208bc4551e8c4e47d53f3c4e95f5","modified":1459915877000},{"_id":"source/_posts/android-loaders.md","hash":"257357701673c91b5e81981ca8b562be44b72ac3","modified":1458640756000},{"_id":"source/_posts/android-icon-size.md","hash":"67ba2f2269f2d676533a8f3a15a00a7856b13c6a","modified":1460449846000},{"_id":"source/_posts/android-managing-memory.md","hash":"812c022b5154983919813dbe38352add90e958c5","modified":1459425649000},{"_id":"source/_posts/android-overview-screen.md","hash":"a63978e85a191d85a765f418c63edb19792e524d","modified":1459134170000},{"_id":"source/_posts/android-performance-tools.md","hash":"5f18d27a592323a525b8158865501c80e9e6ed12","modified":1459426334000},{"_id":"source/_posts/android-project-managing.md","hash":"2946412b581f245bf954b006e19475a16fffdd8b","modified":1460449839000},{"_id":"source/_posts/android-tasks-and-stack.md","hash":"dfcda2dde6f0346624f79a41a554d2e5fa49441f","modified":1460449881000},{"_id":"source/_posts/android-tools.md","hash":"9fa3639fcc8095861562d16cce5c590e769c17d0","modified":1460085560000},{"_id":"source/_posts/hexo-quick-start.md","hash":"bc5a56d14ee0a7af339d00ff02571d9151b97e17","modified":1459155972000},{"_id":"source/_posts/android-ui-tools.md","hash":"162a3925182c3e921cbc76f3eee226e1c842fb15","modified":1459215579000},{"_id":"source/_posts/spring.md","hash":"c08009ce78eed40d71cb27c331c23a96f9b4c13b","modified":1458018650000},{"_id":"source/_posts/object-c-diary.md","hash":"928ca6e63c0b69e45e6e1c51f0b0195cc878b0dd","modified":1458018650000},{"_id":"source/_posts/xcode-manual.md","hash":"0b1845fb7c7b99034949c68a38ee957a23c0ea51","modified":1458024247000},{"_id":"themes/maupassant/.git/COMMIT_EDITMSG","hash":"429f081c83f59470737c868b2af3db1c40cae718","modified":1458284491000},{"_id":"source/about/index.md","hash":"6b1f538b1400bf9529b0ecfc6f2ffc6bf65a41cd","modified":1458009927000},{"_id":"themes/maupassant/.git/config","hash":"602a05ca8d286d8f1b2ca6e3b780c23f66d5b5cc","modified":1458284217000},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1458284217000},{"_id":"source/images/about_Wechat.jpg","hash":"e6a732d54bbf647037186ef9c159324b740084f8","modified":1458009927000},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1458284192000},{"_id":"themes/maupassant/.git/index","hash":"f67b0af3c445fdd951c48204ae6ce8d4ed215034","modified":1458284491000},{"_id":"themes/maupassant/.git/packed-refs","hash":"e21ef968067dd15211240fb364d75f6933b23e4b","modified":1458284217000},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1458284217000},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1458284217000},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1458284217000},{"_id":"themes/maupassant/languages/en.yml","hash":"e13ab1a2d2f1edbe67b4c035fd4667cb6a31db8e","modified":1458284217000},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"ebacfa5d0c14d603e0d505757adb24c0bbe5dd13","modified":1458284217000},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1458284217000},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1458284217000},{"_id":"themes/maupassant/layout/base.jade","hash":"ce9e1efb5a039d785445d2c89ba33cb0967f21df","modified":1458284217000},{"_id":"themes/maupassant/layout/index.jade","hash":"ac74f4f7cee705693bf5977bbae074373acddb7c","modified":1458284217000},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1458284217000},{"_id":"themes/maupassant/layout/page.jade","hash":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1458284217000},{"_id":"themes/maupassant/layout/post.jade","hash":"9cf29fb0daed95935154ce0fa2b154df5a9b11b1","modified":1458284217000},{"_id":"source/_posts/android-ddms-and-monitor/ddms_connect.png","hash":"aa8b55563d4276297229da922606ca2b40baf5a5","modified":1457401836000},{"_id":"source/_posts/android-ddms-and-monitor/system_info.png","hash":"69a0193352e7796d96cdd858d01eaff56a0061df","modified":1459156445000},{"_id":"source/_posts/android-ddms-and-monitor/view_hierarchy.png","hash":"9487665de95d66a38a79e32f4fa4b3bed6de7831","modified":1457423534000},{"_id":"source/_posts/android-ui-tools/theme_tools.png","hash":"d50340ffe8e2ee1b2bf3a80de6d1a45952fbb3b4","modified":1457332741000},{"_id":"source/about/index/about_Wechat.jpg","hash":"e6a732d54bbf647037186ef9c159324b740084f8","modified":1458009927000},{"_id":"source/_posts/xcode-manual/function-menu.jpg","hash":"34c22c5230d7a71ad542e210661343cdcea072be","modified":1458018650000},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1458284192000},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1458284192000},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1458284192000},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1458284192000},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1458284192000},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1458284192000},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1458284192000},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1458284192000},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"d4403faee729974107a3abc8bbf2de35f88d5c56","modified":1458284491000},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1458284192000},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1458284192000},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"6c7f63ba04a4d28323ba31e79a4927f3d3fcc56e","modified":1458284217000},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"aa020b794e697e8e9612530c97c6295efde469fe","modified":1458284217000},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"00af53f447c04dc8ed7bbee544f05278edda0f60","modified":1458284217000},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1458284217000},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1458284217000},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1458284217000},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"c53ac5e5d44fa99705ae0e212435095e493ea65e","modified":1458284217000},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1458284217000},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"e119c5afa85abc60d139e2da99b0bfcd7a6530f8","modified":1458284217000},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1458284217000},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1458284217000},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1458284217000},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1458284217000},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1458284217000},{"_id":"themes/maupassant/source/css/style.scss","hash":"810e09434428b2159a2898935bddb95d33d57400","modified":1458284217000},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1458284217000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1458284217000},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1458284217000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1458284217000},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1458284217000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1458284217000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1458284217000},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"92be822124e716a947bae3d676867e702933a93c","modified":1458284217000},{"_id":"themes/maupassant/source/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1458284217000},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1458284217000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1458284217000},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1458284217000},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1458284217000},{"_id":"source/_posts/android-activity/activity_lifecycle.png","hash":"ca76d44f5128a045a225f3597fad78a811f0c70d","modified":1458018650000},{"_id":"source/_posts/android-build-process/build_process.png","hash":"cb7db6d636ea86ff4c31325c8ae8174a0766be4f","modified":1459236933000},{"_id":"source/_posts/android-fragment/fragment_lifecycle.png","hash":"f100e3a864b1be55e28bb2ae6f69580c4874dbbc","modified":1458018650000},{"_id":"themes/maupassant/.git/objects/73/e77a1d94eb1251bbe09f0e7e7abb10ebbc5c78","hash":"f041bbe4f304e84b07c123b829d48c42e43ce872","modified":1458284491000},{"_id":"themes/maupassant/.git/objects/7f/c082a433296687c715a365918b73fdd88dd4c8","hash":"66071fb2cd1db54e3a7c05025677d98ae9b66efd","modified":1458284491000},{"_id":"themes/maupassant/.git/objects/db/f1af20b811b8e8bb3a33d5dc5c25d2ac4d2068","hash":"61fcb90e7f13681fb7deb6a676beebce12522ea4","modified":1458284484000},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"1d174dc757ce60b84d83e984dc97807ccc17f314","modified":1458284491000},{"_id":"themes/maupassant/.git/objects/pack/pack-3bfd12a0d9138f78dca392ac4637c3afe9ca582a.idx","hash":"d83d798c21f0f418b6d9c068522e45ed34082efb","modified":1458284217000},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"d4403faee729974107a3abc8bbf2de35f88d5c56","modified":1458284491000},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1458284217000},{"_id":"themes/maupassant/.git/refs/remotes/origin/master","hash":"1d174dc757ce60b84d83e984dc97807ccc17f314","modified":1458284501000},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/master","hash":"920d9a6ac150942e458d016a5a71ac703ddfd1f7","modified":1458284501000},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"67ffbcd406fd259425d1cade2afbd011a7191672","modified":1458284217000},{"_id":"themes/maupassant/.git/objects/pack/pack-3bfd12a0d9138f78dca392ac4637c3afe9ca582a.pack","hash":"d1d9d5984c3c29ff9a59d840c3679fbac48e633d","modified":1458284491000},{"_id":"public/about/index.html","hash":"b78af74f26a2c1a5be4d2d27258884478e297e69","modified":1460456105169},{"_id":"public/2016/03/22/android-loaders/index.html","hash":"c52315b96514f9a7a813c028f06c6bad8045b248","modified":1460456105171},{"_id":"public/2016/03/30/android-performance-tools/index.html","hash":"8b97ae9ef74ac5ca0e9dfc9bed0b84b4eb2f5954","modified":1460456105171},{"_id":"public/2016/01/26/object-c-diary/index.html","hash":"315afc58a508a0023762615ce089f5038cddb500","modified":1460456105172},{"_id":"public/2016/03/15/android-tasks-and-stack/index.html","hash":"2ae79bc508bc1c2f5410dfc41963d8f6965eec1c","modified":1460456105172},{"_id":"public/2016/01/26/xcode-manual/index.html","hash":"c35c61496457fceb77e79be12c3e554a4fe533e5","modified":1460456105172},{"_id":"public/2016/03/24/android-overview-screen/index.html","hash":"479905c35256ae48d983e3e2e5efc155c710e9d9","modified":1460456105172},{"_id":"public/2016/01/02/android-ui-tools/index.html","hash":"b4d759b21b116c4f491f6ab5d3b6c675162296f8","modified":1460456105172},{"_id":"public/2016/01/18/android-ddms-and-monitor/index.html","hash":"6f7924177bcdd64f585bd1f501b4a0957dd98314","modified":1460456105172},{"_id":"public/2015/06/04/android-icon-size/index.html","hash":"153021d40fe09476018115cad3a20ef07b62d885","modified":1460456105172},{"_id":"public/2015/06/03/android-project-managing/index.html","hash":"0d92eee9dc4215f55e886e0adab74c5b7db3c513","modified":1460456105172},{"_id":"public/categories/Android/index.html","hash":"a031a0644fe9450d2757812bfc55f3651f05d812","modified":1460456105172},{"_id":"public/2015/06/01/hexo-quick-start/index.html","hash":"713a1c722ffb1ab894379223e780fd4ae7ac0d37","modified":1460456105172},{"_id":"public/categories/Hexo/index.html","hash":"c35ff269d1f4dd350d6e72232fff73704adfbd85","modified":1460456105172},{"_id":"public/categories/Java/index.html","hash":"033c544da7d8a23db74af28a88a0ce7aae188303","modified":1460456105172},{"_id":"public/categories/iOS/index.html","hash":"d0fa1b31266a541e6622f196653be606de2ccf71","modified":1460456105172},{"_id":"public/archives/index.html","hash":"e2c052541a06502629bb5e5b3cb4bffad1adf60b","modified":1460456105172},{"_id":"public/archives/page/2/index.html","hash":"d32d8aaaaef81c9bc9e32cbbb9e2e68d4d328766","modified":1460456105172},{"_id":"public/categories/Android/page/2/index.html","hash":"e6897c3c6b6ccc061f4839c4818fe5efe989cb21","modified":1460456105172},{"_id":"public/archives/2015/index.html","hash":"cf83142a7e9451ee1207630cc66ac2cf5a16954e","modified":1460456105172},{"_id":"public/archives/2015/06/index.html","hash":"cf83142a7e9451ee1207630cc66ac2cf5a16954e","modified":1460456105172},{"_id":"public/archives/2016/01/index.html","hash":"f37d129c092ce167a77ab10f7d0c90f34c0bdc91","modified":1460456105172},{"_id":"public/archives/2016/index.html","hash":"8b0d3359f21bd9c11a3867d39b5d7caa305f60f1","modified":1460456105172},{"_id":"public/archives/2016/03/index.html","hash":"faa8edd9518716c2a8cda805243dd2e52c3aae63","modified":1460456105173},{"_id":"public/tags/Android/index.html","hash":"28d3ab6d1ddad25b06dad054ab2f2a748530f97c","modified":1460456105173},{"_id":"public/tags/Android/page/2/index.html","hash":"ef74af88c3a2b8b7a4f6533677eb722fa7613b2e","modified":1460456105173},{"_id":"public/tags/Acivity/index.html","hash":"c65504818fcec4cb1ef9f63edd36312108a287d7","modified":1460456105173},{"_id":"public/tags/内存优化/index.html","hash":"834d038b2d5994ec266e4dc6501813ce6d8d3dd4","modified":1460456105173},{"_id":"public/tags/内存溢出/index.html","hash":"a790305e4e9cc83ff2bb0e51b194427bf06dd83e","modified":1460456105173},{"_id":"public/archives/2016/page/2/index.html","hash":"eb06f0a82824484ddcf8eb34240556396c757c50","modified":1460456105173},{"_id":"public/tags/Signing/index.html","hash":"02f8f4ff0cc6b232ba09a01a8c9aa0d3de1a5b1d","modified":1460456105173},{"_id":"public/tags/Gradle/index.html","hash":"2bf2302d7e0a5d561acaa7397efcbb8afe92baa5","modified":1460456105173},{"_id":"public/tags/Optimization/index.html","hash":"4d894a05b6265d28c10379e99c7095865143f8b9","modified":1460456105173},{"_id":"public/tags/DDMS/index.html","hash":"6d66903f49087950a75e12b3c70651ffe2ea8221","modified":1460456105173},{"_id":"public/tags/Monitor/index.html","hash":"c6945347561a125a00d74b6cbd828bc059d94e42","modified":1460456105173},{"_id":"public/tags/Annotations/index.html","hash":"f792fa4c3747603b51970f1f700c48ca07f0643c","modified":1460456105173},{"_id":"public/tags/Lint/index.html","hash":"984b0b789512d397eabae7af177450d4e54a8529","modified":1460456105173},{"_id":"public/tags/AppIndex/index.html","hash":"b7817d3136e68b4b024ea40c31d800df7d041a6b","modified":1460456105173},{"_id":"public/tags/DeepLink/index.html","hash":"08754c2f26d04e8e34c499075c58f9a22362050a","modified":1460456105173},{"_id":"public/tags/Fragment/index.html","hash":"37fc9cb2f6fe702fb51b4370fa7af76190d6097d","modified":1460456105173},{"_id":"public/2016/03/31/android-managing-memory/index.html","hash":"8a91d076ae5f4e5968211f21b6eeedeea4238fc4","modified":1460456105173},{"_id":"public/2016/03/31/android-displaying-bitmap-efficiently/index.html","hash":"0ba8c4f1c10f597fddd764f87df207ec61ac9039","modified":1460456105173},{"_id":"public/2016/03/11/android-fragment/index.html","hash":"4a88aad4be16644eefb6e1d2582e6b5b63642dcc","modified":1460456105173},{"_id":"public/2016/03/11/android-activity/index.html","hash":"5ae97e6779543d5caf1fd5b0e9385d1e3557fcc6","modified":1460456105173},{"_id":"public/2016/01/29/android-tools/index.html","hash":"37ac48c5f4ef56e6795f1bcc3cdfdfddcc56ff78","modified":1460456105173},{"_id":"public/2016/01/27/spring/index.html","hash":"05ee885eac124b99e36cdb72c90543cb537c9c87","modified":1460456105174},{"_id":"public/2016/01/25/android-code-tools/index.html","hash":"843cc487283b10098f4d8ee69fdc2fe06b3f774f","modified":1460456105174},{"_id":"public/2015/06/08/android-build-process/index.html","hash":"5bc4e372301dc6a7e16e9ee890d97cf1dcb2fe41","modified":1460456105174},{"_id":"public/tags/Building/index.html","hash":"426d9f5f78ac81931087af72cc71519c06de408a","modified":1460456105183},{"_id":"public/tags/Tools/index.html","hash":"6040fd1aabc8b88623e75f4d214b1cd370513285","modified":1460456105183},{"_id":"public/tags/Loaders/index.html","hash":"97e610261ce131cd6c2f6effaa14324799a42eac","modified":1460456105183},{"_id":"public/tags/IconSize/index.html","hash":"8fa0b52bea2875227137e877e3df57b56621c1ef","modified":1460456105183},{"_id":"public/tags/Tasks/index.html","hash":"959c2a541f913834493dfca0168c34aae2e66120","modified":1460456105183},{"_id":"public/tags/OverviewScreen/index.html","hash":"430ee3b79dc1f249c624d024369fd28c7059fb98","modified":1460456105183},{"_id":"public/tags/项目目录/index.html","hash":"d47bccea6746fd9d4b2ccbe3367f59c7d0bb60e8","modified":1460456105184},{"_id":"public/tags/Stack/index.html","hash":"4e84ef45db88bb21e05112da00951352ff776834","modified":1460456105184},{"_id":"public/tags/Setting/index.html","hash":"8cbc5f55d93c38fb79efeef7f151a8a526853a40","modified":1460456105184},{"_id":"public/tags/Hexo/index.html","hash":"c35ff269d1f4dd350d6e72232fff73704adfbd85","modified":1460456105184},{"_id":"public/tags/Java/index.html","hash":"033c544da7d8a23db74af28a88a0ce7aae188303","modified":1460456105184},{"_id":"public/tags/Spring/index.html","hash":"eda0e5a1ac1fba140f8754e8386b42688ed40086","modified":1460456105184},{"_id":"public/tags/iOS/index.html","hash":"d0fa1b31266a541e6622f196653be606de2ccf71","modified":1460456105184},{"_id":"public/tags/Object-c/index.html","hash":"209586c911c64d177d2dacf55ca0ff3de041d27a","modified":1460456105184},{"_id":"public/tags/XCode/index.html","hash":"92e27621e2a4ea06966f7a399b18da379f7e7f2b","modified":1460456105184},{"_id":"public/index.html","hash":"73a6cb5e92316d7df94efd5efc05443fd8f47a0a","modified":1460456105184},{"_id":"public/page/2/index.html","hash":"e90c2e23db5181960f44b5ed7b4c3200a29cc482","modified":1460456105184},{"_id":"public/images/about_Wechat.jpg","hash":"e6a732d54bbf647037186ef9c159324b740084f8","modified":1460456105190},{"_id":"public/about/index/about_Wechat.jpg","hash":"e6a732d54bbf647037186ef9c159324b740084f8","modified":1460456105190},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1460456105190},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1460456105190},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1460456105190},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1460456105191},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1460456105191},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1460456105191},{"_id":"public/2016/01/02/android-ui-tools/theme_tools.png","hash":"d50340ffe8e2ee1b2bf3a80de6d1a45952fbb3b4","modified":1460456105191},{"_id":"public/2016/01/26/xcode-manual/function-menu.jpg","hash":"34c22c5230d7a71ad542e210661343cdcea072be","modified":1460456105191},{"_id":"public/2016/01/18/android-ddms-and-monitor/ddms_connect.png","hash":"aa8b55563d4276297229da922606ca2b40baf5a5","modified":1460456105191},{"_id":"public/2016/01/18/android-ddms-and-monitor/system_info.png","hash":"69a0193352e7796d96cdd858d01eaff56a0061df","modified":1460456105191},{"_id":"public/2016/01/18/android-ddms-and-monitor/view_hierarchy.png","hash":"9487665de95d66a38a79e32f4fa4b3bed6de7831","modified":1460456105192},{"_id":"public/2016/03/11/android-activity/activity_lifecycle.png","hash":"ca76d44f5128a045a225f3597fad78a811f0c70d","modified":1460456105256},{"_id":"public/2015/06/08/android-build-process/build_process.png","hash":"cb7db6d636ea86ff4c31325c8ae8174a0766be4f","modified":1460456105260},{"_id":"public/2016/03/11/android-fragment/fragment_lifecycle.png","hash":"f100e3a864b1be55e28bb2ae6f69580c4874dbbc","modified":1460456105261},{"_id":"public/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1460456105265},{"_id":"public/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1460456105265},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1460456105265},{"_id":"public/js/fancybox.js","hash":"92be822124e716a947bae3d676867e702933a93c","modified":1460456105265},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1460456105265},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1460456105265},{"_id":"public/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1460456105265},{"_id":"public/css/style.css","hash":"f2fa9afef0f5a3a51245b5756b4c23059c1eabbb","modified":1460456105265}],"Category":[{"name":"Android","_id":"cimx9usjv0004j9v8kkqn8edl"},{"name":"Hexo","_id":"cimx9usl50015j9v86sw3whdj"},{"name":"Java","_id":"cimx9uslc001dj9v8ijb0pem4"},{"name":"iOS","_id":"cimx9usle001kj9v8drm4zl9i"}],"Data":[],"Page":[{"title":"About","date":"2016-01-22T10:42:40.000Z","_content":"\n![My WechatId is ccSun89.](/images/about_Wechat.jpg)\n\n\n","source":"about/index.md","raw":"title: About\ndate: 2016-01-22 18:42:40\n---\n\n![My WechatId is ccSun89.](/images/about_Wechat.jpg)\n\n\n","updated":"2016-03-15T02:45:27.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cimx9usjo0001j9v8u5dhqz40","content":"<p><img src=\"/images/about_Wechat.jpg\" alt=\"My WechatId is ccSun89.\"></p>\n","excerpt":"","more":"<p><img src=\"/images/about_Wechat.jpg\" alt=\"My WechatId is ccSun89.\"></p>\n"}],"Post":[{"title":"Android-Activity","date":"2016-03-11T06:59:37.000Z","_content":"收录所有与Activity相关的内容。如生命周期，状态保存，内存溢出，启动模式等。\n\n## 一、 Acvitity生命周期\n\n![Acvitity Lifecycle](https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-activity/activity_lifecycle.png?raw=true)\n\n\n### 1. Starting an Activity\n\n1. you might call finish() from within onCreate() to destroy the activity. In this case, the system immediately calls onDestroy() without calling any of the other lifecycle methods.\n2. For example, if your activity has a thread running in the background to download data from the network, it might create that thread in onCreate() and then stop the thread in onDestroy().\n\n### 2. Pause Your Activity\n\nAnother activity is visible on top of this one and that activity is partially transparent or doesn't cover the entire screen.A paused activity is completely alive, but can be killed by the system in extremely low memory situations. the system can drop it from memory either by asking it to finish (calling its finish() method), or simply killing its process.\n\n1. You should usually use the onPause() callback to:\n\t * Stop animations or other ongoing actions that could **consume CPU**.\n\t * **Commit unsaved changes**, but only if users expect such changes to be permanently saved when they leave (such as a draft email).保存永久的数据要放到onDestroy();因为保存draft需要被用户看到，所以放到onPause();\n\t * **Release system resources**, such as broadcast receivers, handles to sensors (like GPS), or any resources that may affect battery life while your activity is paused and the user does not need them.\t \n\n2. **avoid performing CPU-intensive work during onPause()**, such as writing to a database, because **it can slow the visible transition to the next activity** (you should instead **perform heavy-load shutdown operations during onStop()**).\n3. Because this state (Resume & Pause) can transition often, the code in these two methods should be fairly lightweight in order to avoid slow transitions that make the user wait.\n\n### 3. Resume Your Activity\n\n1. you should implement onResume() to initialize components that you release during onPause() and perform any other initializations that must occur each time the activity enters the Resumed state (such as begin animations and initialize components only used while the activity has user focus).\n2. When the activity resumes, you can reacquire the necessary resources and resume actions that were interrupted. \n3. Because this state (Resume & Pause) can transition often, the code in these two methods should be fairly lightweight in order to avoid slow transitions that make the user wait.\n\n### 4. Stop Your Activity\n\nThe activity is completely obscured by another activity (the activity is now in the \"background\"). However, it is no longer visible to the user and it can be killed by the system when memory is needed elsewhere. the system can drop it from memory either by asking it to finish (calling its finish() method), or simply killing its process.\n\n1. Once your activity is stopped, **the system might destroy the instance if it needs to recover system memory**. In extreme cases, the system might **simply kill your app process without calling the activity's final onDestroy()** callback, so it's important you **use onStop() to release resources that might leak memoy..**\n\n2. **Even if the system destroys your activity while it's stopped, it still retains the state of the View objects** (such as text in an EditText) in a Bundle (a blob of key-value pairs) and restores them if the user navigates back to the same instance of the activity\n\n3. when stopped, your activity should release any large objects, such as network or database connections. onStart() & onStop() maintains resources that are needed to ***show the activity*** to the user. For example, you can register a BroadcastReceiver in onStart() to monitor changes that impact your UI, and unregister it in onStop() when the user can no longer see what you are displaying.    \n***release:***\n\t* network\n\t* database\n\t* receiver\n\n4. 内存不足时，会回调onTrimMemory()释放图片、数组、缓存等ui显示资源,根据不同的内存状态做不同的处理。（onLowMemory：被回调时，已经没有后台进程，是在最后一个后台进程被杀时调用，一般情况是low memory killer 杀进程后触发；android 4.0之后onTrimMemory被回调时，还有后台进程，触发更频繁，每次计算进程优先级时，只要满足条件，都会触发）。先调用onStop()时，不用释放ui资源，因为用户有可能返回；\n***release***\n\t* ui显示需要的资源图片、数组、缓存\n\n### 5. Start/Restart Your Activity\n\n1. the user might have been away from your app for a long time before coming back it, the **onStart()** method is a good place to **verify that required system features are enabled.**\n\n### 6. Recreating an Activity\n\n1. When your activity is **destroyed because the user presses Back or the activity finishes itself, the system's concept of that Activity instance is gone forever** because the behavior indicates the activity is no longer needed. However, if the system **destroys the activity due to system constraints (rather than normal app behavior), then although the actual Activity instance is gone, the system remembers that it existed.** 只要是被系统销毁的activity，系统都会保存Activity的状态，这是系统的责任。\n2. Your activity will be **destroyed and recreated each time the user rotates the screen.**\n3. If onSaveInstanceState() is called, **this method will occur before onStop().** There are no guarantees about whether it will occur before or after onPause().\n\n### 7. Destroy an Activity\n1. onPause() -> Process Killed\n2. onPause() -> onStop() -> Process Killed\n3. onPause() -> onStop() -> onDestroy()\n\n## 二、 状态变化\n\n假设在一个EditText中输入文本，\n\n1. 按Home键，再重新返回，文本还在。生命周期onPause()->onStop();\n2. 切换横屏，文本会消失，因为此时Activity会onDestroy()后，重新onCreate()；\n3. Activity在onStop()状态直接被销毁了，在点击返回键返回原Activity的时候，文本还在；\n\n### 1. Save Your Activity State\n\n1. When onSaveInstanceState() will be called:\n\t1. When you press button Home; But when you press Back this func will not be called;\n\t2. When one acivity come in front of the current one, such as someone call in;\n\t3. When you press Power button;\n\t4. WHen you long press Power button to change to another application;\n\t5. WHen you rotate the screen;(onPause -> onSaveInstanceState -> onStop -> onDestroy -> onCreate -> onRestart -> onResume.  如果有onSaveInstanceState才会调用onRestoreInstanceState，所以在onRetsoreState中不用检查Bundle为空的case。)\n\t总结起来就是：当系统有可能在你不知道的情况下销毁Activity的情况下，系统会帮你调用onSaveInstanceState()给你机会保存数据。实际操作的体验是：只有切换横竖屏的时候，文本框的数据会消失，其他情况都不会消失。但是确实都会call onSaveInstanceState()。默认的实现中，系统已经默认提供实现保存ui的状态信息。前提是：The only work required of you is to provide a unique ID (with the android:id attribute) for each widget you want to save its state. If a widget does not have an ID, then the system cannot save its state.\n\n### 2. Restore Your Activity State\n\n\n1. Both the onCreate() and onRestoreInstanceState() callback methods receive the same Bundle that contains the instance state information.\n\n\t* onCreate() method is called whether the system is creating a new instance of your activity or recreating a previous one, **you must check whether the state Bundle is null** before you attempt to read it. So you can restore some state data in onCreate()\n\t* onRestoreInstanceState(), which the system **calls after the onStart() method.** The system **calls onRestoreInstanceState() only if there is a saved state to restore, so you do not need to check whether the Bundle is null**.\n\n2. Always call the superclass implementation of onRestoreInstanceState() so the default implementation can restore the state of the view hierarchy.\n\n\n### 3. Calling sequence\n\n#### a. onStoreInstanceState() & onRestoreInstanceState()\nonStart() -> onRestoreInstanceState()    \nonSaveInstanceState() -> onStop()\n\n\n***There are no guarantees about whether it will occur before or after onPause().***\n\n#### b. Activity A & B\n\n(1) A start B:    \nA onPause() -> B onCreate() -> B onStart() -> B onResume() -> A onStop()    \n(2) B returen to A:    \nB onPause() -> A onRestart() -> A onStart() -> A onResume() -> B onStop() -> B onDestroy()    \n\n\n## 三、 Leaked Activity\n\n1. Call finish() after startActivity() will lead A activity to a leaked activity. // 内存优化 内存溢出\n\n    ```\n\t\tIntent intent = new Intent(A.this, B.class);\n\t\tMainActivity.this.startActivity(intent);\n\t\tMainActivity.this.finish();\n\t```\n2. ***to be continued***\n\n## 四、 Start An Activity\n1. implict intent\n\t\n\t```\n\t\tIntent intent = new Intent(Intent.ACTION_SEND);\n\t\tintent.putExtra(Intent.EXTRA_EMAIL, recipientArray);\n\t\tstartActivity(intent);\n\t```\n2. explict intent\n\n\t```\n\t\tIntent intent = new Intent(this, SignInActivity.class);\n\t\tstartActivity(intent);\n\t```\n3. start activity with a result\n\n\t```\n        private void pickContact() {\n            // Create an intent to \"pick\" a contact, as defined by the content provider URI\n            Intent intent = new Intent(Intent.ACTION_PICK, Contacts.CONTENT_URI);\n            startActivityForResult(intent, PICK_CONTACT_REQUEST);\n        }\n\n        @Override\n        protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n            // If the request went well (OK) and the request was PICK_CONTACT_REQUEST\n            if (resultCode == Activity.RESULT_OK && requestCode == PICK_CONTACT_REQUEST) {\n                // ...\n            }\n        }\n\t```\n\n## 五、 Declaring Activity <intent-filter>\n1. If you intend for your application to be self-contained and not allow other applications to activate its activities, then you don't need any other intent filters. Only one activity should have the \"main\" action and \"launcher\" category.\n2. However, if you want your activity to respond to implicit intents that are delivered from other applications, you must include an <intent-filter> that includes an <action> element and, optionally, a <category> element and/or a <data> element. \n1. The <action> element specifies that this is the \"main\" entry point to the application. \n\t\n\t```\n\t\t<action android:name=\"android.intent.action.MAIN\" />\n\n\t```\n2. The <category> element specifies that this activity should be listed in the system's application launcher (to allow users to launch this activity).\n\n\t```\n\t\t<category android:name=\"android.intent.category.LAUNCHER\" />\n\n\t```\n***In order to receive implicit intents, you must include the CATEGORY_DEFAULT category in the intent filter***. The methods startActivity() and startActivityForResult() treat all intents as if they declared the CATEGORY_DEFAULT category. If you do not declare it in your intent filter, no implicit intents will resolve to your activity.\n\n## 六、 Activity Launch Mode\n\n### 1. Brief Introduction\n \nActivity Stack is a LIFO stack.    \n一个应用程序的优先级是受最高优先级的Activity影响的。Android内存管理使用栈来决定基于Activity的应用程序的优先级,决定某个应用程序是否要终结去释放资源。 \n\n### 2. 启动模式\n参考Android-Tasks-And-Stack。\n\n\n\n","source":"_posts/android-activity.md","raw":"title: Android-Activity\ncategories:\n  - Android\ntags:\n  - Android\n  - Acivity\n  - 内存优化\n  - 内存溢出\ndate: 2016-03-11 14:59:37\n---\n收录所有与Activity相关的内容。如生命周期，状态保存，内存溢出，启动模式等。\n\n## 一、 Acvitity生命周期\n\n![Acvitity Lifecycle](https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-activity/activity_lifecycle.png?raw=true)\n\n\n### 1. Starting an Activity\n\n1. you might call finish() from within onCreate() to destroy the activity. In this case, the system immediately calls onDestroy() without calling any of the other lifecycle methods.\n2. For example, if your activity has a thread running in the background to download data from the network, it might create that thread in onCreate() and then stop the thread in onDestroy().\n\n### 2. Pause Your Activity\n\nAnother activity is visible on top of this one and that activity is partially transparent or doesn't cover the entire screen.A paused activity is completely alive, but can be killed by the system in extremely low memory situations. the system can drop it from memory either by asking it to finish (calling its finish() method), or simply killing its process.\n\n1. You should usually use the onPause() callback to:\n\t * Stop animations or other ongoing actions that could **consume CPU**.\n\t * **Commit unsaved changes**, but only if users expect such changes to be permanently saved when they leave (such as a draft email).保存永久的数据要放到onDestroy();因为保存draft需要被用户看到，所以放到onPause();\n\t * **Release system resources**, such as broadcast receivers, handles to sensors (like GPS), or any resources that may affect battery life while your activity is paused and the user does not need them.\t \n\n2. **avoid performing CPU-intensive work during onPause()**, such as writing to a database, because **it can slow the visible transition to the next activity** (you should instead **perform heavy-load shutdown operations during onStop()**).\n3. Because this state (Resume & Pause) can transition often, the code in these two methods should be fairly lightweight in order to avoid slow transitions that make the user wait.\n\n### 3. Resume Your Activity\n\n1. you should implement onResume() to initialize components that you release during onPause() and perform any other initializations that must occur each time the activity enters the Resumed state (such as begin animations and initialize components only used while the activity has user focus).\n2. When the activity resumes, you can reacquire the necessary resources and resume actions that were interrupted. \n3. Because this state (Resume & Pause) can transition often, the code in these two methods should be fairly lightweight in order to avoid slow transitions that make the user wait.\n\n### 4. Stop Your Activity\n\nThe activity is completely obscured by another activity (the activity is now in the \"background\"). However, it is no longer visible to the user and it can be killed by the system when memory is needed elsewhere. the system can drop it from memory either by asking it to finish (calling its finish() method), or simply killing its process.\n\n1. Once your activity is stopped, **the system might destroy the instance if it needs to recover system memory**. In extreme cases, the system might **simply kill your app process without calling the activity's final onDestroy()** callback, so it's important you **use onStop() to release resources that might leak memoy..**\n\n2. **Even if the system destroys your activity while it's stopped, it still retains the state of the View objects** (such as text in an EditText) in a Bundle (a blob of key-value pairs) and restores them if the user navigates back to the same instance of the activity\n\n3. when stopped, your activity should release any large objects, such as network or database connections. onStart() & onStop() maintains resources that are needed to ***show the activity*** to the user. For example, you can register a BroadcastReceiver in onStart() to monitor changes that impact your UI, and unregister it in onStop() when the user can no longer see what you are displaying.    \n***release:***\n\t* network\n\t* database\n\t* receiver\n\n4. 内存不足时，会回调onTrimMemory()释放图片、数组、缓存等ui显示资源,根据不同的内存状态做不同的处理。（onLowMemory：被回调时，已经没有后台进程，是在最后一个后台进程被杀时调用，一般情况是low memory killer 杀进程后触发；android 4.0之后onTrimMemory被回调时，还有后台进程，触发更频繁，每次计算进程优先级时，只要满足条件，都会触发）。先调用onStop()时，不用释放ui资源，因为用户有可能返回；\n***release***\n\t* ui显示需要的资源图片、数组、缓存\n\n### 5. Start/Restart Your Activity\n\n1. the user might have been away from your app for a long time before coming back it, the **onStart()** method is a good place to **verify that required system features are enabled.**\n\n### 6. Recreating an Activity\n\n1. When your activity is **destroyed because the user presses Back or the activity finishes itself, the system's concept of that Activity instance is gone forever** because the behavior indicates the activity is no longer needed. However, if the system **destroys the activity due to system constraints (rather than normal app behavior), then although the actual Activity instance is gone, the system remembers that it existed.** 只要是被系统销毁的activity，系统都会保存Activity的状态，这是系统的责任。\n2. Your activity will be **destroyed and recreated each time the user rotates the screen.**\n3. If onSaveInstanceState() is called, **this method will occur before onStop().** There are no guarantees about whether it will occur before or after onPause().\n\n### 7. Destroy an Activity\n1. onPause() -> Process Killed\n2. onPause() -> onStop() -> Process Killed\n3. onPause() -> onStop() -> onDestroy()\n\n## 二、 状态变化\n\n假设在一个EditText中输入文本，\n\n1. 按Home键，再重新返回，文本还在。生命周期onPause()->onStop();\n2. 切换横屏，文本会消失，因为此时Activity会onDestroy()后，重新onCreate()；\n3. Activity在onStop()状态直接被销毁了，在点击返回键返回原Activity的时候，文本还在；\n\n### 1. Save Your Activity State\n\n1. When onSaveInstanceState() will be called:\n\t1. When you press button Home; But when you press Back this func will not be called;\n\t2. When one acivity come in front of the current one, such as someone call in;\n\t3. When you press Power button;\n\t4. WHen you long press Power button to change to another application;\n\t5. WHen you rotate the screen;(onPause -> onSaveInstanceState -> onStop -> onDestroy -> onCreate -> onRestart -> onResume.  如果有onSaveInstanceState才会调用onRestoreInstanceState，所以在onRetsoreState中不用检查Bundle为空的case。)\n\t总结起来就是：当系统有可能在你不知道的情况下销毁Activity的情况下，系统会帮你调用onSaveInstanceState()给你机会保存数据。实际操作的体验是：只有切换横竖屏的时候，文本框的数据会消失，其他情况都不会消失。但是确实都会call onSaveInstanceState()。默认的实现中，系统已经默认提供实现保存ui的状态信息。前提是：The only work required of you is to provide a unique ID (with the android:id attribute) for each widget you want to save its state. If a widget does not have an ID, then the system cannot save its state.\n\n### 2. Restore Your Activity State\n\n\n1. Both the onCreate() and onRestoreInstanceState() callback methods receive the same Bundle that contains the instance state information.\n\n\t* onCreate() method is called whether the system is creating a new instance of your activity or recreating a previous one, **you must check whether the state Bundle is null** before you attempt to read it. So you can restore some state data in onCreate()\n\t* onRestoreInstanceState(), which the system **calls after the onStart() method.** The system **calls onRestoreInstanceState() only if there is a saved state to restore, so you do not need to check whether the Bundle is null**.\n\n2. Always call the superclass implementation of onRestoreInstanceState() so the default implementation can restore the state of the view hierarchy.\n\n\n### 3. Calling sequence\n\n#### a. onStoreInstanceState() & onRestoreInstanceState()\nonStart() -> onRestoreInstanceState()    \nonSaveInstanceState() -> onStop()\n\n\n***There are no guarantees about whether it will occur before or after onPause().***\n\n#### b. Activity A & B\n\n(1) A start B:    \nA onPause() -> B onCreate() -> B onStart() -> B onResume() -> A onStop()    \n(2) B returen to A:    \nB onPause() -> A onRestart() -> A onStart() -> A onResume() -> B onStop() -> B onDestroy()    \n\n\n## 三、 Leaked Activity\n\n1. Call finish() after startActivity() will lead A activity to a leaked activity. // 内存优化 内存溢出\n\n    ```\n\t\tIntent intent = new Intent(A.this, B.class);\n\t\tMainActivity.this.startActivity(intent);\n\t\tMainActivity.this.finish();\n\t```\n2. ***to be continued***\n\n## 四、 Start An Activity\n1. implict intent\n\t\n\t```\n\t\tIntent intent = new Intent(Intent.ACTION_SEND);\n\t\tintent.putExtra(Intent.EXTRA_EMAIL, recipientArray);\n\t\tstartActivity(intent);\n\t```\n2. explict intent\n\n\t```\n\t\tIntent intent = new Intent(this, SignInActivity.class);\n\t\tstartActivity(intent);\n\t```\n3. start activity with a result\n\n\t```\n        private void pickContact() {\n            // Create an intent to \"pick\" a contact, as defined by the content provider URI\n            Intent intent = new Intent(Intent.ACTION_PICK, Contacts.CONTENT_URI);\n            startActivityForResult(intent, PICK_CONTACT_REQUEST);\n        }\n\n        @Override\n        protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n            // If the request went well (OK) and the request was PICK_CONTACT_REQUEST\n            if (resultCode == Activity.RESULT_OK && requestCode == PICK_CONTACT_REQUEST) {\n                // ...\n            }\n        }\n\t```\n\n## 五、 Declaring Activity <intent-filter>\n1. If you intend for your application to be self-contained and not allow other applications to activate its activities, then you don't need any other intent filters. Only one activity should have the \"main\" action and \"launcher\" category.\n2. However, if you want your activity to respond to implicit intents that are delivered from other applications, you must include an <intent-filter> that includes an <action> element and, optionally, a <category> element and/or a <data> element. \n1. The <action> element specifies that this is the \"main\" entry point to the application. \n\t\n\t```\n\t\t<action android:name=\"android.intent.action.MAIN\" />\n\n\t```\n2. The <category> element specifies that this activity should be listed in the system's application launcher (to allow users to launch this activity).\n\n\t```\n\t\t<category android:name=\"android.intent.category.LAUNCHER\" />\n\n\t```\n***In order to receive implicit intents, you must include the CATEGORY_DEFAULT category in the intent filter***. The methods startActivity() and startActivityForResult() treat all intents as if they declared the CATEGORY_DEFAULT category. If you do not declare it in your intent filter, no implicit intents will resolve to your activity.\n\n## 六、 Activity Launch Mode\n\n### 1. Brief Introduction\n \nActivity Stack is a LIFO stack.    \n一个应用程序的优先级是受最高优先级的Activity影响的。Android内存管理使用栈来决定基于Activity的应用程序的优先级,决定某个应用程序是否要终结去释放资源。 \n\n### 2. 启动模式\n参考Android-Tasks-And-Stack。\n\n\n\n","slug":"android-activity","published":1,"updated":"2016-04-12T07:52:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimx9usjj0000j9v89v5f18p1","content":"<p>收录所有与Activity相关的内容。如生命周期，状态保存，内存溢出，启动模式等。</p>\n<h2 id=\"一、-Acvitity生命周期\"><a href=\"#一、-Acvitity生命周期\" class=\"headerlink\" title=\"一、 Acvitity生命周期\"></a>一、 Acvitity生命周期</h2><p><img src=\"https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-activity/activity_lifecycle.png?raw=true\" alt=\"Acvitity Lifecycle\"></p>\n<h3 id=\"1-Starting-an-Activity\"><a href=\"#1-Starting-an-Activity\" class=\"headerlink\" title=\"1. Starting an Activity\"></a>1. Starting an Activity</h3><ol>\n<li>you might call finish() from within onCreate() to destroy the activity. In this case, the system immediately calls onDestroy() without calling any of the other lifecycle methods.</li>\n<li>For example, if your activity has a thread running in the background to download data from the network, it might create that thread in onCreate() and then stop the thread in onDestroy().</li>\n</ol>\n<h3 id=\"2-Pause-Your-Activity\"><a href=\"#2-Pause-Your-Activity\" class=\"headerlink\" title=\"2. Pause Your Activity\"></a>2. Pause Your Activity</h3><p>Another activity is visible on top of this one and that activity is partially transparent or doesn’t cover the entire screen.A paused activity is completely alive, but can be killed by the system in extremely low memory situations. the system can drop it from memory either by asking it to finish (calling its finish() method), or simply killing its process.</p>\n<ol>\n<li><p>You should usually use the onPause() callback to:</p>\n<ul>\n<li>Stop animations or other ongoing actions that could <strong>consume CPU</strong>.</li>\n<li><strong>Commit unsaved changes</strong>, but only if users expect such changes to be permanently saved when they leave (such as a draft email).保存永久的数据要放到onDestroy();因为保存draft需要被用户看到，所以放到onPause();</li>\n<li><strong>Release system resources</strong>, such as broadcast receivers, handles to sensors (like GPS), or any resources that may affect battery life while your activity is paused and the user does not need them.     </li>\n</ul>\n</li>\n<li><p><strong>avoid performing CPU-intensive work during onPause()</strong>, such as writing to a database, because <strong>it can slow the visible transition to the next activity</strong> (you should instead <strong>perform heavy-load shutdown operations during onStop()</strong>).</p>\n</li>\n<li>Because this state (Resume &amp; Pause) can transition often, the code in these two methods should be fairly lightweight in order to avoid slow transitions that make the user wait.</li>\n</ol>\n<h3 id=\"3-Resume-Your-Activity\"><a href=\"#3-Resume-Your-Activity\" class=\"headerlink\" title=\"3. Resume Your Activity\"></a>3. Resume Your Activity</h3><ol>\n<li>you should implement onResume() to initialize components that you release during onPause() and perform any other initializations that must occur each time the activity enters the Resumed state (such as begin animations and initialize components only used while the activity has user focus).</li>\n<li>When the activity resumes, you can reacquire the necessary resources and resume actions that were interrupted. </li>\n<li>Because this state (Resume &amp; Pause) can transition often, the code in these two methods should be fairly lightweight in order to avoid slow transitions that make the user wait.</li>\n</ol>\n<h3 id=\"4-Stop-Your-Activity\"><a href=\"#4-Stop-Your-Activity\" class=\"headerlink\" title=\"4. Stop Your Activity\"></a>4. Stop Your Activity</h3><p>The activity is completely obscured by another activity (the activity is now in the “background”). However, it is no longer visible to the user and it can be killed by the system when memory is needed elsewhere. the system can drop it from memory either by asking it to finish (calling its finish() method), or simply killing its process.</p>\n<ol>\n<li><p>Once your activity is stopped, <strong>the system might destroy the instance if it needs to recover system memory</strong>. In extreme cases, the system might <strong>simply kill your app process without calling the activity’s final onDestroy()</strong> callback, so it’s important you <strong>use onStop() to release resources that might leak memoy..</strong></p>\n</li>\n<li><p><strong>Even if the system destroys your activity while it’s stopped, it still retains the state of the View objects</strong> (such as text in an EditText) in a Bundle (a blob of key-value pairs) and restores them if the user navigates back to the same instance of the activity</p>\n</li>\n<li><p>when stopped, your activity should release any large objects, such as network or database connections. onStart() &amp; onStop() maintains resources that are needed to <strong><em>show the activity</em></strong> to the user. For example, you can register a BroadcastReceiver in onStart() to monitor changes that impact your UI, and unregister it in onStop() when the user can no longer see what you are displaying.<br><strong><em>release:</em></strong></p>\n<ul>\n<li>network</li>\n<li>database</li>\n<li>receiver</li>\n</ul>\n</li>\n<li><p>内存不足时，会回调onTrimMemory()释放图片、数组、缓存等ui显示资源,根据不同的内存状态做不同的处理。（onLowMemory：被回调时，已经没有后台进程，是在最后一个后台进程被杀时调用，一般情况是low memory killer 杀进程后触发；android 4.0之后onTrimMemory被回调时，还有后台进程，触发更频繁，每次计算进程优先级时，只要满足条件，都会触发）。先调用onStop()时，不用释放ui资源，因为用户有可能返回；<br><strong><em>release</em></strong></p>\n<ul>\n<li>ui显示需要的资源图片、数组、缓存</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"5-Start-Restart-Your-Activity\"><a href=\"#5-Start-Restart-Your-Activity\" class=\"headerlink\" title=\"5. Start/Restart Your Activity\"></a>5. Start/Restart Your Activity</h3><ol>\n<li>the user might have been away from your app for a long time before coming back it, the <strong>onStart()</strong> method is a good place to <strong>verify that required system features are enabled.</strong></li>\n</ol>\n<h3 id=\"6-Recreating-an-Activity\"><a href=\"#6-Recreating-an-Activity\" class=\"headerlink\" title=\"6. Recreating an Activity\"></a>6. Recreating an Activity</h3><ol>\n<li>When your activity is <strong>destroyed because the user presses Back or the activity finishes itself, the system’s concept of that Activity instance is gone forever</strong> because the behavior indicates the activity is no longer needed. However, if the system <strong>destroys the activity due to system constraints (rather than normal app behavior), then although the actual Activity instance is gone, the system remembers that it existed.</strong> 只要是被系统销毁的activity，系统都会保存Activity的状态，这是系统的责任。</li>\n<li>Your activity will be <strong>destroyed and recreated each time the user rotates the screen.</strong></li>\n<li>If onSaveInstanceState() is called, <strong>this method will occur before onStop().</strong> There are no guarantees about whether it will occur before or after onPause().</li>\n</ol>\n<h3 id=\"7-Destroy-an-Activity\"><a href=\"#7-Destroy-an-Activity\" class=\"headerlink\" title=\"7. Destroy an Activity\"></a>7. Destroy an Activity</h3><ol>\n<li>onPause() -&gt; Process Killed</li>\n<li>onPause() -&gt; onStop() -&gt; Process Killed</li>\n<li>onPause() -&gt; onStop() -&gt; onDestroy()</li>\n</ol>\n<h2 id=\"二、-状态变化\"><a href=\"#二、-状态变化\" class=\"headerlink\" title=\"二、 状态变化\"></a>二、 状态变化</h2><p>假设在一个EditText中输入文本，</p>\n<ol>\n<li>按Home键，再重新返回，文本还在。生命周期onPause()-&gt;onStop();</li>\n<li>切换横屏，文本会消失，因为此时Activity会onDestroy()后，重新onCreate()；</li>\n<li>Activity在onStop()状态直接被销毁了，在点击返回键返回原Activity的时候，文本还在；</li>\n</ol>\n<h3 id=\"1-Save-Your-Activity-State\"><a href=\"#1-Save-Your-Activity-State\" class=\"headerlink\" title=\"1. Save Your Activity State\"></a>1. Save Your Activity State</h3><ol>\n<li>When onSaveInstanceState() will be called:<ol>\n<li>When you press button Home; But when you press Back this func will not be called;</li>\n<li>When one acivity come in front of the current one, such as someone call in;</li>\n<li>When you press Power button;</li>\n<li>WHen you long press Power button to change to another application;</li>\n<li>WHen you rotate the screen;(onPause -&gt; onSaveInstanceState -&gt; onStop -&gt; onDestroy -&gt; onCreate -&gt; onRestart -&gt; onResume.  如果有onSaveInstanceState才会调用onRestoreInstanceState，所以在onRetsoreState中不用检查Bundle为空的case。)<br>总结起来就是：当系统有可能在你不知道的情况下销毁Activity的情况下，系统会帮你调用onSaveInstanceState()给你机会保存数据。实际操作的体验是：只有切换横竖屏的时候，文本框的数据会消失，其他情况都不会消失。但是确实都会call onSaveInstanceState()。默认的实现中，系统已经默认提供实现保存ui的状态信息。前提是：The only work required of you is to provide a unique ID (with the android:id attribute) for each widget you want to save its state. If a widget does not have an ID, then the system cannot save its state.</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"2-Restore-Your-Activity-State\"><a href=\"#2-Restore-Your-Activity-State\" class=\"headerlink\" title=\"2. Restore Your Activity State\"></a>2. Restore Your Activity State</h3><ol>\n<li><p>Both the onCreate() and onRestoreInstanceState() callback methods receive the same Bundle that contains the instance state information.</p>\n<ul>\n<li>onCreate() method is called whether the system is creating a new instance of your activity or recreating a previous one, <strong>you must check whether the state Bundle is null</strong> before you attempt to read it. So you can restore some state data in onCreate()</li>\n<li>onRestoreInstanceState(), which the system <strong>calls after the onStart() method.</strong> The system <strong>calls onRestoreInstanceState() only if there is a saved state to restore, so you do not need to check whether the Bundle is null</strong>.</li>\n</ul>\n</li>\n<li><p>Always call the superclass implementation of onRestoreInstanceState() so the default implementation can restore the state of the view hierarchy.</p>\n</li>\n</ol>\n<h3 id=\"3-Calling-sequence\"><a href=\"#3-Calling-sequence\" class=\"headerlink\" title=\"3. Calling sequence\"></a>3. Calling sequence</h3><h4 id=\"a-onStoreInstanceState-amp-onRestoreInstanceState\"><a href=\"#a-onStoreInstanceState-amp-onRestoreInstanceState\" class=\"headerlink\" title=\"a. onStoreInstanceState() &amp; onRestoreInstanceState()\"></a>a. onStoreInstanceState() &amp; onRestoreInstanceState()</h4><p>onStart() -&gt; onRestoreInstanceState()<br>onSaveInstanceState() -&gt; onStop()</p>\n<p><strong><em>There are no guarantees about whether it will occur before or after onPause().</em></strong></p>\n<h4 id=\"b-Activity-A-amp-B\"><a href=\"#b-Activity-A-amp-B\" class=\"headerlink\" title=\"b. Activity A &amp; B\"></a>b. Activity A &amp; B</h4><p>(1) A start B:<br>A onPause() -&gt; B onCreate() -&gt; B onStart() -&gt; B onResume() -&gt; A onStop()<br>(2) B returen to A:<br>B onPause() -&gt; A onRestart() -&gt; A onStart() -&gt; A onResume() -&gt; B onStop() -&gt; B onDestroy()    </p>\n<h2 id=\"三、-Leaked-Activity\"><a href=\"#三、-Leaked-Activity\" class=\"headerlink\" title=\"三、 Leaked Activity\"></a>三、 Leaked Activity</h2><ol>\n<li><p>Call finish() after startActivity() will lead A activity to a leaked activity. // 内存优化 内存溢出</p>\n <figure class=\"highlight ceylon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(A.<span class=\"keyword\">this</span>, B.<span class=\"keyword\">class</span>);</span><br><span class=\"line\">MainActivity.<span class=\"keyword\">this</span>.startActivity(intent);</span><br><span class=\"line\">MainActivity.<span class=\"keyword\">this</span>.finish();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong><em>to be continued</em></strong></p>\n</li>\n</ol>\n<h2 id=\"四、-Start-An-Activity\"><a href=\"#四、-Start-An-Activity\" class=\"headerlink\" title=\"四、 Start An Activity\"></a>四、 Start An Activity</h2><ol>\n<li><p>implict intent</p>\n <figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Intent</span> <span class=\"keyword\">intent</span> = new <span class=\"keyword\">Intent</span>(<span class=\"keyword\">Intent</span>.ACTION_SEND);</span><br><span class=\"line\"><span class=\"keyword\">intent</span>.putExtra(<span class=\"keyword\">Intent</span>.EXTRA_EMAIL, recipientArray);</span><br><span class=\"line\">startActivity(<span class=\"keyword\">intent</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>explict intent</p>\n <figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Intent</span> <span class=\"keyword\">intent</span> = new <span class=\"keyword\">Intent</span>(this, SignInActivity.<span class=\"keyword\">class</span>);</span><br><span class=\"line\">startActivity(<span class=\"keyword\">intent</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>start activity with a result</p>\n <figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pickContact</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Create an intent to \"pick\" a contact, as defined by the content provider URI</span></span><br><span class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_PICK, Contacts.CONTENT_URI);</span><br><span class=\"line\">    startActivityForResult(intent, PICK_CONTACT_REQUEST);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// If the request went well (OK) and the request was PICK_CONTACT_REQUEST</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (resultCode == Activity.RESULT_OK &amp;&amp; requestCode == PICK_CONTACT_REQUEST) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"五、-Declaring-Activity\"><a href=\"#五、-Declaring-Activity\" class=\"headerlink\" title=\"五、 Declaring Activity \"></a>五、 Declaring Activity <intent-filter></intent-filter></h2><ol>\n<li>If you intend for your application to be self-contained and not allow other applications to activate its activities, then you don’t need any other intent filters. Only one activity should have the “main” action and “launcher” category.</li>\n<li>However, if you want your activity to respond to implicit intents that are delivered from other applications, you must include an <intent-filter> that includes an <action> element and, optionally, a <category> element and/or a <data> element. </data></category></action></intent-filter></li>\n<li><p>The <action> element specifies that this is the “main” entry point to the application. </action></p>\n <figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;action android:<span class=\"built_in\">name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>The <category> element specifies that this activity should be listed in the system’s application launcher (to allow users to launch this activity).</category></p>\n <figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;category android:<span class=\"built_in\">name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong><em>In order to receive implicit intents, you must include the CATEGORY_DEFAULT category in the intent filter</em></strong>. The methods startActivity() and startActivityForResult() treat all intents as if they declared the CATEGORY_DEFAULT category. If you do not declare it in your intent filter, no implicit intents will resolve to your activity.</p>\n<h2 id=\"六、-Activity-Launch-Mode\"><a href=\"#六、-Activity-Launch-Mode\" class=\"headerlink\" title=\"六、 Activity Launch Mode\"></a>六、 Activity Launch Mode</h2><h3 id=\"1-Brief-Introduction\"><a href=\"#1-Brief-Introduction\" class=\"headerlink\" title=\"1. Brief Introduction\"></a>1. Brief Introduction</h3><p>Activity Stack is a LIFO stack.<br>一个应用程序的优先级是受最高优先级的Activity影响的。Android内存管理使用栈来决定基于Activity的应用程序的优先级,决定某个应用程序是否要终结去释放资源。 </p>\n<h3 id=\"2-启动模式\"><a href=\"#2-启动模式\" class=\"headerlink\" title=\"2. 启动模式\"></a>2. 启动模式</h3><p>参考Android-Tasks-And-Stack。</p>\n","excerpt":"","more":"<p>收录所有与Activity相关的内容。如生命周期，状态保存，内存溢出，启动模式等。</p>\n<h2 id=\"一、-Acvitity生命周期\"><a href=\"#一、-Acvitity生命周期\" class=\"headerlink\" title=\"一、 Acvitity生命周期\"></a>一、 Acvitity生命周期</h2><p><img src=\"https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-activity/activity_lifecycle.png?raw=true\" alt=\"Acvitity Lifecycle\"></p>\n<h3 id=\"1-Starting-an-Activity\"><a href=\"#1-Starting-an-Activity\" class=\"headerlink\" title=\"1. Starting an Activity\"></a>1. Starting an Activity</h3><ol>\n<li>you might call finish() from within onCreate() to destroy the activity. In this case, the system immediately calls onDestroy() without calling any of the other lifecycle methods.</li>\n<li>For example, if your activity has a thread running in the background to download data from the network, it might create that thread in onCreate() and then stop the thread in onDestroy().</li>\n</ol>\n<h3 id=\"2-Pause-Your-Activity\"><a href=\"#2-Pause-Your-Activity\" class=\"headerlink\" title=\"2. Pause Your Activity\"></a>2. Pause Your Activity</h3><p>Another activity is visible on top of this one and that activity is partially transparent or doesn’t cover the entire screen.A paused activity is completely alive, but can be killed by the system in extremely low memory situations. the system can drop it from memory either by asking it to finish (calling its finish() method), or simply killing its process.</p>\n<ol>\n<li><p>You should usually use the onPause() callback to:</p>\n<ul>\n<li>Stop animations or other ongoing actions that could <strong>consume CPU</strong>.</li>\n<li><strong>Commit unsaved changes</strong>, but only if users expect such changes to be permanently saved when they leave (such as a draft email).保存永久的数据要放到onDestroy();因为保存draft需要被用户看到，所以放到onPause();</li>\n<li><strong>Release system resources</strong>, such as broadcast receivers, handles to sensors (like GPS), or any resources that may affect battery life while your activity is paused and the user does not need them.     </li>\n</ul>\n</li>\n<li><p><strong>avoid performing CPU-intensive work during onPause()</strong>, such as writing to a database, because <strong>it can slow the visible transition to the next activity</strong> (you should instead <strong>perform heavy-load shutdown operations during onStop()</strong>).</p>\n</li>\n<li>Because this state (Resume &amp; Pause) can transition often, the code in these two methods should be fairly lightweight in order to avoid slow transitions that make the user wait.</li>\n</ol>\n<h3 id=\"3-Resume-Your-Activity\"><a href=\"#3-Resume-Your-Activity\" class=\"headerlink\" title=\"3. Resume Your Activity\"></a>3. Resume Your Activity</h3><ol>\n<li>you should implement onResume() to initialize components that you release during onPause() and perform any other initializations that must occur each time the activity enters the Resumed state (such as begin animations and initialize components only used while the activity has user focus).</li>\n<li>When the activity resumes, you can reacquire the necessary resources and resume actions that were interrupted. </li>\n<li>Because this state (Resume &amp; Pause) can transition often, the code in these two methods should be fairly lightweight in order to avoid slow transitions that make the user wait.</li>\n</ol>\n<h3 id=\"4-Stop-Your-Activity\"><a href=\"#4-Stop-Your-Activity\" class=\"headerlink\" title=\"4. Stop Your Activity\"></a>4. Stop Your Activity</h3><p>The activity is completely obscured by another activity (the activity is now in the “background”). However, it is no longer visible to the user and it can be killed by the system when memory is needed elsewhere. the system can drop it from memory either by asking it to finish (calling its finish() method), or simply killing its process.</p>\n<ol>\n<li><p>Once your activity is stopped, <strong>the system might destroy the instance if it needs to recover system memory</strong>. In extreme cases, the system might <strong>simply kill your app process without calling the activity’s final onDestroy()</strong> callback, so it’s important you <strong>use onStop() to release resources that might leak memoy..</strong></p>\n</li>\n<li><p><strong>Even if the system destroys your activity while it’s stopped, it still retains the state of the View objects</strong> (such as text in an EditText) in a Bundle (a blob of key-value pairs) and restores them if the user navigates back to the same instance of the activity</p>\n</li>\n<li><p>when stopped, your activity should release any large objects, such as network or database connections. onStart() &amp; onStop() maintains resources that are needed to <strong><em>show the activity</em></strong> to the user. For example, you can register a BroadcastReceiver in onStart() to monitor changes that impact your UI, and unregister it in onStop() when the user can no longer see what you are displaying.<br><strong><em>release:</em></strong></p>\n<ul>\n<li>network</li>\n<li>database</li>\n<li>receiver</li>\n</ul>\n</li>\n<li><p>内存不足时，会回调onTrimMemory()释放图片、数组、缓存等ui显示资源,根据不同的内存状态做不同的处理。（onLowMemory：被回调时，已经没有后台进程，是在最后一个后台进程被杀时调用，一般情况是low memory killer 杀进程后触发；android 4.0之后onTrimMemory被回调时，还有后台进程，触发更频繁，每次计算进程优先级时，只要满足条件，都会触发）。先调用onStop()时，不用释放ui资源，因为用户有可能返回；<br><strong><em>release</em></strong></p>\n<ul>\n<li>ui显示需要的资源图片、数组、缓存</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"5-Start-Restart-Your-Activity\"><a href=\"#5-Start-Restart-Your-Activity\" class=\"headerlink\" title=\"5. Start/Restart Your Activity\"></a>5. Start/Restart Your Activity</h3><ol>\n<li>the user might have been away from your app for a long time before coming back it, the <strong>onStart()</strong> method is a good place to <strong>verify that required system features are enabled.</strong></li>\n</ol>\n<h3 id=\"6-Recreating-an-Activity\"><a href=\"#6-Recreating-an-Activity\" class=\"headerlink\" title=\"6. Recreating an Activity\"></a>6. Recreating an Activity</h3><ol>\n<li>When your activity is <strong>destroyed because the user presses Back or the activity finishes itself, the system’s concept of that Activity instance is gone forever</strong> because the behavior indicates the activity is no longer needed. However, if the system <strong>destroys the activity due to system constraints (rather than normal app behavior), then although the actual Activity instance is gone, the system remembers that it existed.</strong> 只要是被系统销毁的activity，系统都会保存Activity的状态，这是系统的责任。</li>\n<li>Your activity will be <strong>destroyed and recreated each time the user rotates the screen.</strong></li>\n<li>If onSaveInstanceState() is called, <strong>this method will occur before onStop().</strong> There are no guarantees about whether it will occur before or after onPause().</li>\n</ol>\n<h3 id=\"7-Destroy-an-Activity\"><a href=\"#7-Destroy-an-Activity\" class=\"headerlink\" title=\"7. Destroy an Activity\"></a>7. Destroy an Activity</h3><ol>\n<li>onPause() -&gt; Process Killed</li>\n<li>onPause() -&gt; onStop() -&gt; Process Killed</li>\n<li>onPause() -&gt; onStop() -&gt; onDestroy()</li>\n</ol>\n<h2 id=\"二、-状态变化\"><a href=\"#二、-状态变化\" class=\"headerlink\" title=\"二、 状态变化\"></a>二、 状态变化</h2><p>假设在一个EditText中输入文本，</p>\n<ol>\n<li>按Home键，再重新返回，文本还在。生命周期onPause()-&gt;onStop();</li>\n<li>切换横屏，文本会消失，因为此时Activity会onDestroy()后，重新onCreate()；</li>\n<li>Activity在onStop()状态直接被销毁了，在点击返回键返回原Activity的时候，文本还在；</li>\n</ol>\n<h3 id=\"1-Save-Your-Activity-State\"><a href=\"#1-Save-Your-Activity-State\" class=\"headerlink\" title=\"1. Save Your Activity State\"></a>1. Save Your Activity State</h3><ol>\n<li>When onSaveInstanceState() will be called:<ol>\n<li>When you press button Home; But when you press Back this func will not be called;</li>\n<li>When one acivity come in front of the current one, such as someone call in;</li>\n<li>When you press Power button;</li>\n<li>WHen you long press Power button to change to another application;</li>\n<li>WHen you rotate the screen;(onPause -&gt; onSaveInstanceState -&gt; onStop -&gt; onDestroy -&gt; onCreate -&gt; onRestart -&gt; onResume.  如果有onSaveInstanceState才会调用onRestoreInstanceState，所以在onRetsoreState中不用检查Bundle为空的case。)<br>总结起来就是：当系统有可能在你不知道的情况下销毁Activity的情况下，系统会帮你调用onSaveInstanceState()给你机会保存数据。实际操作的体验是：只有切换横竖屏的时候，文本框的数据会消失，其他情况都不会消失。但是确实都会call onSaveInstanceState()。默认的实现中，系统已经默认提供实现保存ui的状态信息。前提是：The only work required of you is to provide a unique ID (with the android:id attribute) for each widget you want to save its state. If a widget does not have an ID, then the system cannot save its state.</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"2-Restore-Your-Activity-State\"><a href=\"#2-Restore-Your-Activity-State\" class=\"headerlink\" title=\"2. Restore Your Activity State\"></a>2. Restore Your Activity State</h3><ol>\n<li><p>Both the onCreate() and onRestoreInstanceState() callback methods receive the same Bundle that contains the instance state information.</p>\n<ul>\n<li>onCreate() method is called whether the system is creating a new instance of your activity or recreating a previous one, <strong>you must check whether the state Bundle is null</strong> before you attempt to read it. So you can restore some state data in onCreate()</li>\n<li>onRestoreInstanceState(), which the system <strong>calls after the onStart() method.</strong> The system <strong>calls onRestoreInstanceState() only if there is a saved state to restore, so you do not need to check whether the Bundle is null</strong>.</li>\n</ul>\n</li>\n<li><p>Always call the superclass implementation of onRestoreInstanceState() so the default implementation can restore the state of the view hierarchy.</p>\n</li>\n</ol>\n<h3 id=\"3-Calling-sequence\"><a href=\"#3-Calling-sequence\" class=\"headerlink\" title=\"3. Calling sequence\"></a>3. Calling sequence</h3><h4 id=\"a-onStoreInstanceState-amp-onRestoreInstanceState\"><a href=\"#a-onStoreInstanceState-amp-onRestoreInstanceState\" class=\"headerlink\" title=\"a. onStoreInstanceState() &amp; onRestoreInstanceState()\"></a>a. onStoreInstanceState() &amp; onRestoreInstanceState()</h4><p>onStart() -&gt; onRestoreInstanceState()<br>onSaveInstanceState() -&gt; onStop()</p>\n<p><strong><em>There are no guarantees about whether it will occur before or after onPause().</em></strong></p>\n<h4 id=\"b-Activity-A-amp-B\"><a href=\"#b-Activity-A-amp-B\" class=\"headerlink\" title=\"b. Activity A &amp; B\"></a>b. Activity A &amp; B</h4><p>(1) A start B:<br>A onPause() -&gt; B onCreate() -&gt; B onStart() -&gt; B onResume() -&gt; A onStop()<br>(2) B returen to A:<br>B onPause() -&gt; A onRestart() -&gt; A onStart() -&gt; A onResume() -&gt; B onStop() -&gt; B onDestroy()    </p>\n<h2 id=\"三、-Leaked-Activity\"><a href=\"#三、-Leaked-Activity\" class=\"headerlink\" title=\"三、 Leaked Activity\"></a>三、 Leaked Activity</h2><ol>\n<li><p>Call finish() after startActivity() will lead A activity to a leaked activity. // 内存优化 内存溢出</p>\n <figure class=\"highlight ceylon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(A.<span class=\"keyword\">this</span>, B.<span class=\"keyword\">class</span>);</span><br><span class=\"line\">MainActivity.<span class=\"keyword\">this</span>.startActivity(intent);</span><br><span class=\"line\">MainActivity.<span class=\"keyword\">this</span>.finish();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong><em>to be continued</em></strong></p>\n</li>\n</ol>\n<h2 id=\"四、-Start-An-Activity\"><a href=\"#四、-Start-An-Activity\" class=\"headerlink\" title=\"四、 Start An Activity\"></a>四、 Start An Activity</h2><ol>\n<li><p>implict intent</p>\n <figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Intent</span> <span class=\"keyword\">intent</span> = new <span class=\"keyword\">Intent</span>(<span class=\"keyword\">Intent</span>.ACTION_SEND);</span><br><span class=\"line\"><span class=\"keyword\">intent</span>.putExtra(<span class=\"keyword\">Intent</span>.EXTRA_EMAIL, recipientArray);</span><br><span class=\"line\">startActivity(<span class=\"keyword\">intent</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>explict intent</p>\n <figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Intent</span> <span class=\"keyword\">intent</span> = new <span class=\"keyword\">Intent</span>(this, SignInActivity.<span class=\"keyword\">class</span>);</span><br><span class=\"line\">startActivity(<span class=\"keyword\">intent</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>start activity with a result</p>\n <figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pickContact</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Create an intent to \"pick\" a contact, as defined by the content provider URI</span></span><br><span class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_PICK, Contacts.CONTENT_URI);</span><br><span class=\"line\">    startActivityForResult(intent, PICK_CONTACT_REQUEST);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// If the request went well (OK) and the request was PICK_CONTACT_REQUEST</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (resultCode == Activity.RESULT_OK &amp;&amp; requestCode == PICK_CONTACT_REQUEST) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"五、-Declaring-Activity\"><a href=\"#五、-Declaring-Activity\" class=\"headerlink\" title=\"五、 Declaring Activity \"></a>五、 Declaring Activity <intent-filter></h2><ol>\n<li>If you intend for your application to be self-contained and not allow other applications to activate its activities, then you don’t need any other intent filters. Only one activity should have the “main” action and “launcher” category.</li>\n<li>However, if you want your activity to respond to implicit intents that are delivered from other applications, you must include an <intent-filter> that includes an <action> element and, optionally, a <category> element and/or a <data> element. </li>\n<li><p>The <action> element specifies that this is the “main” entry point to the application. </p>\n <figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;action android:<span class=\"built_in\">name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>The <category> element specifies that this activity should be listed in the system’s application launcher (to allow users to launch this activity).</p>\n <figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;category android:<span class=\"built_in\">name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong><em>In order to receive implicit intents, you must include the CATEGORY_DEFAULT category in the intent filter</em></strong>. The methods startActivity() and startActivityForResult() treat all intents as if they declared the CATEGORY_DEFAULT category. If you do not declare it in your intent filter, no implicit intents will resolve to your activity.</p>\n<h2 id=\"六、-Activity-Launch-Mode\"><a href=\"#六、-Activity-Launch-Mode\" class=\"headerlink\" title=\"六、 Activity Launch Mode\"></a>六、 Activity Launch Mode</h2><h3 id=\"1-Brief-Introduction\"><a href=\"#1-Brief-Introduction\" class=\"headerlink\" title=\"1. Brief Introduction\"></a>1. Brief Introduction</h3><p>Activity Stack is a LIFO stack.<br>一个应用程序的优先级是受最高优先级的Activity影响的。Android内存管理使用栈来决定基于Activity的应用程序的优先级,决定某个应用程序是否要终结去释放资源。 </p>\n<h3 id=\"2-启动模式\"><a href=\"#2-启动模式\" class=\"headerlink\" title=\"2. 启动模式\"></a>2. 启动模式</h3><p>参考Android-Tasks-And-Stack。</p>\n"},{"title":"Android-Building-And-Signing","date":"2015-06-08T07:35:48.000Z","_content":"Android app的编译、签名过程，及Gradle打包脚本的配置。\n\n## 一、 Build Process\n\n![Build Process](https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-build-process/build_process.png?raw=true)\n\n## 二、 Building in Debug Mode\n\nIn debug mode, the build tools automatically sign your application with a debug key and optimize the package with zipalign.The debug keystore is located in $HOME/.android/debug.keystore, and is created if not present.\n\nOn Windows platforms, type this command:\n\n```\ngradlew.bat assembleDebug  // Debug是gradle脚本的buildTypes\n```\n\nOn Mac OS and Linux platforms, type these commands:\n\n```\n$ chmod +x gradlew\n$ ./gradlew assembleDebug\n```\n\n***Output:***\n\n* APK for the app module is located in app/build/outputs/apk/\n* AAR for any lib modules is located in lib/build/outputs/libs/\n\n## 三、 Building in Release Mode\n\nThere are two approaches to building in release mode: build an unsigned package in release mode and then manually sign and align the package, or allow the build script to sign and align the package for you.\n\n### 1. Build unsigned and aligned\n\n```\napply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 19\n    buildToolsVersion \"19.0.0\"\n    // buildToolsVersion should be higher or equal to compileSdkVersion\n\n\t// values in defaultConfig override those in the manifest file\n    defaultConfig {\n        applicationId \"com.example.my.app\" //发布pro和free时用\n        minSdkVersion 8\n        targetSdkVersion 19 \n        versionCode 1\n        versionName \"1.0\"\n    }\n    \n    // 编译时将会同时编译两个apk出来\n    // 将会覆盖defaultConfig里的值\n    // 创建不同的flavor代码，目录结构src/main和src/free,子目录相同\n    productFlavors {\n        pro {\n            applicationId = \"com.example.my.pkg.pro\"\n            versionName \"1.0-pro\"\n\n        }\n        free {\n            applicationId = \"com.example.my.pkg.free\"\n            versionName \"1.0-free\"\n        }\n    }\n\n\t// 执行编译命令的时候gradlew assembleCustom编译custom\n\t// gradlew assemblerelease编译release\n\t// 都将编译出pro和free两个包\n\t// 编译custom的时候，会在包名后再加一个后缀\n    buildTypes {\n        release {\n            minifyEnabled true\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rulse.pro'\n        }\n       \n        // debug，alpha， beta\n        \n        custom {\n            applicationIdSuffix \".custom\"\n        }\n    }\n}\n\ndependencies {\n    compile project(\":lib\")\n    compile 'com.android.support:appcompat-v7:19.0.1'\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n}\n```\n\n1. 为何要用applicationId？ manifest里的packagename是可以唯一标示apk的。packagename也用于很多资源文件的包头，包括R.java。如果同时发布一个pro和一个free版本，代码里引用的又都是com.xxx.R;再发布的时候两个id相同的是不能发布的。所以用packagename来确定包头，用applicationId来区分不同的app（谷歌App Play是用此来标识包的）。对应的debug版本添加applicationIdSuffix \".debug\"。\n\n2. Source directories\nTo build each version of your app, the build system combines source code and resources from:\n\t* src/main/ - the main source directory (the default configuration common to all variants)\n\t* src/<buildType>/ - the source directory\n\t* src/<productFlavor>/ - the source directory\n\t\nThe build type and product flavor source directories are optional.    \nFor projects that do not define any flavors, the build system uses the defaultConfig settings:\n\t* src/main/ (default configuration)\n\t* src/release/ (build type)\n\t* src/debug/ (build type)\n\n3. For projects that define a set of product flavors, the build system merges the build type, product flavor and main source directories. also merges all the manifests into a single manifest. The manifest merge priority from lowest to highest is libraries/dependencies -> main src -> productFlavor -> buildType. Resources with the same name also applies for this priority sequence.\n\n4. manifest合并修改语法：http://developer.android.com/tools/building/manifest-merge.html#markers-selectors\n\n\n### 2. Build signed and aligned\n\n\n```\nandroid {\n    ...\n    defaultConfig { ... }\n    signingConfigs {\n        release {\n            storeFile file(\"myreleasekey.keystore\")\n            storePassword \"password\"\n            keyAlias \"MyReleaseKey\"\n            keyPassword \"password\"\n        }\n    }\n    buildTypes {\n        release {\n            ...\n            signingConfig signingConfigs.release\n        }\n    }\n}\n```\n    \n    \nIncluding the passwords for your release key and keystore inside the build file is not a good security practice. \n    \nTo obtain these passwords from environment variables:\n\n```\n\tstorePassword System.getenv(\"KSTOREPWD\")\n\tkeyPassword System.getenv(\"KEYPWD\")\n```\nTo have the build process prompt you for these passwords if you are invoking the build from the command line:\n\n```\n\tstorePassword System.console().readLine(\"\\nKeystore password: \")\n\tkeyPassword System.console().readLine(\"\\nKey password: \")\n```\n\n***Output***    \nThis creates your Android application .apk file inside the module build/ directory, named <your_module_name>-release.apk. This .apk file has been signed with the private key specified in build.gradle file and aligned with zipalign. It's ready for installation and distribution.\n\n\n## 四、 Signing Considerations\n\n1. ***App upgrade***    \nThe system allows the update if the certificates match. If you sign the new version with a different certificate, you must assign a different package name to the application—in this case, the user installs the new version as a completely new application.\n2. ***App modularity***    \nAndroid ***allows apps signed by the same certificate to run in the same process***, if the applications so requests, so that the system treats them as a single application. In this way you can deploy your app in modules, and users can update each of the modules independently.\n3. ***Code/data***    \nBy signing multiple apps with the same certificate and using signature-based permissions checks, your apps can share code and data in a secure manner.\n\n## 五、 Signing App Manually\n\n1. Generate a private key using keytool\n\n\n\t\t$ keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000\n\t\n2. Sign your app with your private key using jarsigner\n\n\t\t$ jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore my_application.apk alias_name\n\n3. Verify that your APK is signed\n\n\t\t$ jarsigner -verify -verbose -certs my_application.apk\n\t\t\n4. Align the final APK package using zipalign\n\n\t\t$ zipalign -v 4 your_project_name-unaligned.apk your_project_name.apk\n\t\t\nzipalign ensures that all uncompressed data starts with a particular byte alignment relative to the start of the file, which reduces the amount of RAM consumed by an app.对齐资源文件、数据文件，在访问的时候可以节省内存，加快效率。\n\n## 六、 Apps Over 65k Methods\n\n1. build error:\n\t* Earlier versions of the build system report this error as follows\n\t\n\t\t```\n\t\tConversion to Dalvik format failed:\nUnable to execute dex: method ID not in [0, 0xffff]: 65536\n\t\t```\n\t\t\n\t* More recent versions of the Android build system display a different error\n\t\n\t\t```\n\t\ttrouble writing output:\nToo many field references: 131000; max is 65536.\nYou may try using --multi-dex option.\n\t\t```\n一个dalvik里能引用的方法数上限65536个。\n\n\n2. Android application (APK) files contain executable bytecode files in the form of Dalvik Executable (DEX) files；The Dalvik Executable specification ***limits the total number of methods that can be referenced within a single DEX file to 65,536***, including Android framework methods, library methods, and methods in your own code. ***Getting past this limit requires that you configure your app build process to generate more than one DEX file***, known as a multidex configuration. \n\n3. Solution:\nhttp://developer.android.com/tools/building/multidex.html#about","source":"_posts/android-build-process.md","raw":"title: Android-Building-And-Signing\ncategories:\n\t- Android\ntags:\n\t- Building\n\t- Signing\n\t- Gradle\ndate: 2015-06-08 15:35:48\n---\nAndroid app的编译、签名过程，及Gradle打包脚本的配置。\n\n## 一、 Build Process\n\n![Build Process](https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-build-process/build_process.png?raw=true)\n\n## 二、 Building in Debug Mode\n\nIn debug mode, the build tools automatically sign your application with a debug key and optimize the package with zipalign.The debug keystore is located in $HOME/.android/debug.keystore, and is created if not present.\n\nOn Windows platforms, type this command:\n\n```\ngradlew.bat assembleDebug  // Debug是gradle脚本的buildTypes\n```\n\nOn Mac OS and Linux platforms, type these commands:\n\n```\n$ chmod +x gradlew\n$ ./gradlew assembleDebug\n```\n\n***Output:***\n\n* APK for the app module is located in app/build/outputs/apk/\n* AAR for any lib modules is located in lib/build/outputs/libs/\n\n## 三、 Building in Release Mode\n\nThere are two approaches to building in release mode: build an unsigned package in release mode and then manually sign and align the package, or allow the build script to sign and align the package for you.\n\n### 1. Build unsigned and aligned\n\n```\napply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 19\n    buildToolsVersion \"19.0.0\"\n    // buildToolsVersion should be higher or equal to compileSdkVersion\n\n\t// values in defaultConfig override those in the manifest file\n    defaultConfig {\n        applicationId \"com.example.my.app\" //发布pro和free时用\n        minSdkVersion 8\n        targetSdkVersion 19 \n        versionCode 1\n        versionName \"1.0\"\n    }\n    \n    // 编译时将会同时编译两个apk出来\n    // 将会覆盖defaultConfig里的值\n    // 创建不同的flavor代码，目录结构src/main和src/free,子目录相同\n    productFlavors {\n        pro {\n            applicationId = \"com.example.my.pkg.pro\"\n            versionName \"1.0-pro\"\n\n        }\n        free {\n            applicationId = \"com.example.my.pkg.free\"\n            versionName \"1.0-free\"\n        }\n    }\n\n\t// 执行编译命令的时候gradlew assembleCustom编译custom\n\t// gradlew assemblerelease编译release\n\t// 都将编译出pro和free两个包\n\t// 编译custom的时候，会在包名后再加一个后缀\n    buildTypes {\n        release {\n            minifyEnabled true\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rulse.pro'\n        }\n       \n        // debug，alpha， beta\n        \n        custom {\n            applicationIdSuffix \".custom\"\n        }\n    }\n}\n\ndependencies {\n    compile project(\":lib\")\n    compile 'com.android.support:appcompat-v7:19.0.1'\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n}\n```\n\n1. 为何要用applicationId？ manifest里的packagename是可以唯一标示apk的。packagename也用于很多资源文件的包头，包括R.java。如果同时发布一个pro和一个free版本，代码里引用的又都是com.xxx.R;再发布的时候两个id相同的是不能发布的。所以用packagename来确定包头，用applicationId来区分不同的app（谷歌App Play是用此来标识包的）。对应的debug版本添加applicationIdSuffix \".debug\"。\n\n2. Source directories\nTo build each version of your app, the build system combines source code and resources from:\n\t* src/main/ - the main source directory (the default configuration common to all variants)\n\t* src/<buildType>/ - the source directory\n\t* src/<productFlavor>/ - the source directory\n\t\nThe build type and product flavor source directories are optional.    \nFor projects that do not define any flavors, the build system uses the defaultConfig settings:\n\t* src/main/ (default configuration)\n\t* src/release/ (build type)\n\t* src/debug/ (build type)\n\n3. For projects that define a set of product flavors, the build system merges the build type, product flavor and main source directories. also merges all the manifests into a single manifest. The manifest merge priority from lowest to highest is libraries/dependencies -> main src -> productFlavor -> buildType. Resources with the same name also applies for this priority sequence.\n\n4. manifest合并修改语法：http://developer.android.com/tools/building/manifest-merge.html#markers-selectors\n\n\n### 2. Build signed and aligned\n\n\n```\nandroid {\n    ...\n    defaultConfig { ... }\n    signingConfigs {\n        release {\n            storeFile file(\"myreleasekey.keystore\")\n            storePassword \"password\"\n            keyAlias \"MyReleaseKey\"\n            keyPassword \"password\"\n        }\n    }\n    buildTypes {\n        release {\n            ...\n            signingConfig signingConfigs.release\n        }\n    }\n}\n```\n    \n    \nIncluding the passwords for your release key and keystore inside the build file is not a good security practice. \n    \nTo obtain these passwords from environment variables:\n\n```\n\tstorePassword System.getenv(\"KSTOREPWD\")\n\tkeyPassword System.getenv(\"KEYPWD\")\n```\nTo have the build process prompt you for these passwords if you are invoking the build from the command line:\n\n```\n\tstorePassword System.console().readLine(\"\\nKeystore password: \")\n\tkeyPassword System.console().readLine(\"\\nKey password: \")\n```\n\n***Output***    \nThis creates your Android application .apk file inside the module build/ directory, named <your_module_name>-release.apk. This .apk file has been signed with the private key specified in build.gradle file and aligned with zipalign. It's ready for installation and distribution.\n\n\n## 四、 Signing Considerations\n\n1. ***App upgrade***    \nThe system allows the update if the certificates match. If you sign the new version with a different certificate, you must assign a different package name to the application—in this case, the user installs the new version as a completely new application.\n2. ***App modularity***    \nAndroid ***allows apps signed by the same certificate to run in the same process***, if the applications so requests, so that the system treats them as a single application. In this way you can deploy your app in modules, and users can update each of the modules independently.\n3. ***Code/data***    \nBy signing multiple apps with the same certificate and using signature-based permissions checks, your apps can share code and data in a secure manner.\n\n## 五、 Signing App Manually\n\n1. Generate a private key using keytool\n\n\n\t\t$ keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000\n\t\n2. Sign your app with your private key using jarsigner\n\n\t\t$ jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore my_application.apk alias_name\n\n3. Verify that your APK is signed\n\n\t\t$ jarsigner -verify -verbose -certs my_application.apk\n\t\t\n4. Align the final APK package using zipalign\n\n\t\t$ zipalign -v 4 your_project_name-unaligned.apk your_project_name.apk\n\t\t\nzipalign ensures that all uncompressed data starts with a particular byte alignment relative to the start of the file, which reduces the amount of RAM consumed by an app.对齐资源文件、数据文件，在访问的时候可以节省内存，加快效率。\n\n## 六、 Apps Over 65k Methods\n\n1. build error:\n\t* Earlier versions of the build system report this error as follows\n\t\n\t\t```\n\t\tConversion to Dalvik format failed:\nUnable to execute dex: method ID not in [0, 0xffff]: 65536\n\t\t```\n\t\t\n\t* More recent versions of the Android build system display a different error\n\t\n\t\t```\n\t\ttrouble writing output:\nToo many field references: 131000; max is 65536.\nYou may try using --multi-dex option.\n\t\t```\n一个dalvik里能引用的方法数上限65536个。\n\n\n2. Android application (APK) files contain executable bytecode files in the form of Dalvik Executable (DEX) files；The Dalvik Executable specification ***limits the total number of methods that can be referenced within a single DEX file to 65,536***, including Android framework methods, library methods, and methods in your own code. ***Getting past this limit requires that you configure your app build process to generate more than one DEX file***, known as a multidex configuration. \n\n3. Solution:\nhttp://developer.android.com/tools/building/multidex.html#about","slug":"android-build-process","published":1,"updated":"2016-04-12T10:14:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimx9usjq0002j9v8clu0ubug","content":"<p>Android app的编译、签名过程，及Gradle打包脚本的配置。</p>\n<h2 id=\"一、-Build-Process\"><a href=\"#一、-Build-Process\" class=\"headerlink\" title=\"一、 Build Process\"></a>一、 Build Process</h2><p><img src=\"https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-build-process/build_process.png?raw=true\" alt=\"Build Process\"></p>\n<h2 id=\"二、-Building-in-Debug-Mode\"><a href=\"#二、-Building-in-Debug-Mode\" class=\"headerlink\" title=\"二、 Building in Debug Mode\"></a>二、 Building in Debug Mode</h2><p>In debug mode, the build tools automatically sign your application with a debug key and optimize the package with zipalign.The debug keystore is located in $HOME/.android/debug.keystore, and is created if not present.</p>\n<p>On Windows platforms, type this command:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradlew<span class=\"selector-class\">.bat</span> assembleDebug  <span class=\"comment\">// Debug是gradle脚本的buildTypes</span></span><br></pre></td></tr></table></figure>\n<p>On Mac OS and Linux platforms, type these commands:</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>chmod +x gradlew</span><br><span class=\"line\"><span class=\"variable\">$ </span>./gradlew assembleDebug</span><br></pre></td></tr></table></figure>\n<p><strong><em>Output:</em></strong></p>\n<ul>\n<li>APK for the app module is located in app/build/outputs/apk/</li>\n<li>AAR for any lib modules is located in lib/build/outputs/libs/</li>\n</ul>\n<h2 id=\"三、-Building-in-Release-Mode\"><a href=\"#三、-Building-in-Release-Mode\" class=\"headerlink\" title=\"三、 Building in Release Mode\"></a>三、 Building in Release Mode</h2><p>There are two approaches to building in release mode: build an unsigned package in release mode and then manually sign and align the package, or allow the build script to sign and align the package for you.</p>\n<h3 id=\"1-Build-unsigned-and-aligned\"><a href=\"#1-Build-unsigned-and-aligned\" class=\"headerlink\" title=\"1. Build unsigned and aligned\"></a>1. Build unsigned and aligned</h3><figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attribute\">plugin</span>: <span class=\"string\">'com.android.application'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"decorator\">android</span> &#123;</span><br><span class=\"line\">    compileSdkVersion <span class=\"number\">19</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"19.0.0\"</span></span><br><span class=\"line\">    <span class=\"comment\">// buildToolsVersion should be higher or equal to compileSdkVersion</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// values in defaultConfig override those in the manifest file</span></span><br><span class=\"line\">    <span class=\"decorator\">defaultConfig</span> &#123;</span><br><span class=\"line\">        applicationId <span class=\"string\">\"com.example.my.app\"</span> <span class=\"comment\">//发布pro和free时用</span></span><br><span class=\"line\">        minSdkVersion <span class=\"number\">8</span></span><br><span class=\"line\">        targetSdkVersion <span class=\"number\">19</span> </span><br><span class=\"line\">        versionCode <span class=\"number\">1</span></span><br><span class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 编译时将会同时编译两个apk出来</span></span><br><span class=\"line\">    <span class=\"comment\">// 将会覆盖defaultConfig里的值</span></span><br><span class=\"line\">    <span class=\"comment\">// 创建不同的flavor代码，目录结构src/main和src/free,子目录相同</span></span><br><span class=\"line\">    <span class=\"decorator\">productFlavors</span> &#123;</span><br><span class=\"line\">        <span class=\"decorator\">pro</span> &#123;</span><br><span class=\"line\">            applicationId = <span class=\"string\">\"com.example.my.pkg.pro\"</span></span><br><span class=\"line\">            versionName <span class=\"string\">\"1.0-pro\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"decorator\">free</span> &#123;</span><br><span class=\"line\">            applicationId = <span class=\"string\">\"com.example.my.pkg.free\"</span></span><br><span class=\"line\">            versionName <span class=\"string\">\"1.0-free\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 执行编译命令的时候gradlew assembleCustom编译custom</span></span><br><span class=\"line\">\t<span class=\"comment\">// gradlew assemblerelease编译release</span></span><br><span class=\"line\">\t<span class=\"comment\">// 都将编译出pro和free两个包</span></span><br><span class=\"line\">\t<span class=\"comment\">// 编译custom的时候，会在包名后再加一个后缀</span></span><br><span class=\"line\">    <span class=\"decorator\">buildTypes</span> &#123;</span><br><span class=\"line\">        <span class=\"decorator\">release</span> &#123;</span><br><span class=\"line\">            minifyEnabled <span class=\"literal\">true</span></span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>), <span class=\"string\">'proguard-rulse.pro'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"comment\">// debug，alpha， beta</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"decorator\">custom</span> &#123;</span><br><span class=\"line\">            applicationIdSuffix <span class=\"string\">\".custom\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"decorator\">dependencies</span> &#123;</span><br><span class=\"line\">    compile project(<span class=\"string\">\":lib\"</span>)</span><br><span class=\"line\">    compile <span class=\"string\">'com.android.support:appcompat-v7:19.0.1'</span></span><br><span class=\"line\">    compile fileTree(<span class=\"attribute\">dir</span>: <span class=\"string\">'libs'</span>, <span class=\"attribute\">include</span>: [<span class=\"string\">'*.jar'</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>为何要用applicationId？ manifest里的packagename是可以唯一标示apk的。packagename也用于很多资源文件的包头，包括R.java。如果同时发布一个pro和一个free版本，代码里引用的又都是com.xxx.R;再发布的时候两个id相同的是不能发布的。所以用packagename来确定包头，用applicationId来区分不同的app（谷歌App Play是用此来标识包的）。对应的debug版本添加applicationIdSuffix “.debug”。</p>\n</li>\n<li><p>Source directories<br>To build each version of your app, the build system combines source code and resources from:</p>\n<ul>\n<li>src/main/ - the main source directory (the default configuration common to all variants)</li>\n<li>src/<buildtype>/ - the source directory</buildtype></li>\n<li>src/<productflavor>/ - the source directory</productflavor></li>\n</ul>\n</li>\n</ol>\n<p>The build type and product flavor source directories are optional.<br>For projects that do not define any flavors, the build system uses the defaultConfig settings:</p>\n<pre><code>* src/main/ (default configuration)\n* src/release/ (build type)\n* src/debug/ (build type)\n</code></pre><ol>\n<li><p>For projects that define a set of product flavors, the build system merges the build type, product flavor and main source directories. also merges all the manifests into a single manifest. The manifest merge priority from lowest to highest is libraries/dependencies -&gt; main src -&gt; productFlavor -&gt; buildType. Resources with the same name also applies for this priority sequence.</p>\n</li>\n<li><p>manifest合并修改语法：<a href=\"http://developer.android.com/tools/building/manifest-merge.html#markers-selectors\" target=\"_blank\" rel=\"external\">http://developer.android.com/tools/building/manifest-merge.html#markers-selectors</a></p>\n</li>\n</ol>\n<h3 id=\"2-Build-signed-and-aligned\"><a href=\"#2-Build-signed-and-aligned\" class=\"headerlink\" title=\"2. Build signed and aligned\"></a>2. Build signed and aligned</h3><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">android </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"class\">defaultConfig </span>&#123; ... &#125;</span><br><span class=\"line\">    <span class=\"class\">signingConfigs </span>&#123;</span><br><span class=\"line\">        <span class=\"class\">release </span>&#123;</span><br><span class=\"line\">            storeFile file(<span class=\"string\">\"myreleasekey.keystore\"</span>)</span><br><span class=\"line\">            storePassword <span class=\"string\">\"password\"</span></span><br><span class=\"line\">            keyAlias <span class=\"string\">\"MyReleaseKey\"</span></span><br><span class=\"line\">            keyPassword <span class=\"string\">\"password\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\">buildTypes </span>&#123;</span><br><span class=\"line\">        <span class=\"class\">release </span>&#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            signingConfig signingConfigs.release</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Including the passwords for your release key and keystore inside the build file is not a good security practice. </p>\n<p>To obtain these passwords from environment variables:</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">storePassword <span class=\"keyword\">System</span>.getenv(<span class=\"string\">\"KSTOREPWD\"</span>)</span><br><span class=\"line\">keyPassword <span class=\"keyword\">System</span>.getenv(<span class=\"string\">\"KEYPWD\"</span>)</span><br></pre></td></tr></table></figure>\n<p>To have the build process prompt you for these passwords if you are invoking the build from the command line:</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">storePassword System.<span class=\"built_in\">console</span>().readLine(<span class=\"string\">\"\\nKeystore password: \"</span>)</span><br><span class=\"line\">keyPassword System.<span class=\"built_in\">console</span>().readLine(<span class=\"string\">\"\\nKey password: \"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong><em>Output</em></strong><br>This creates your Android application .apk file inside the module build/ directory, named <your_module_name>-release.apk. This .apk file has been signed with the private key specified in build.gradle file and aligned with zipalign. It’s ready for installation and distribution.</your_module_name></p>\n<h2 id=\"四、-Signing-Considerations\"><a href=\"#四、-Signing-Considerations\" class=\"headerlink\" title=\"四、 Signing Considerations\"></a>四、 Signing Considerations</h2><ol>\n<li><strong><em>App upgrade</em></strong><br>The system allows the update if the certificates match. If you sign the new version with a different certificate, you must assign a different package name to the application—in this case, the user installs the new version as a completely new application.</li>\n<li><strong><em>App modularity</em></strong><br>Android <strong><em>allows apps signed by the same certificate to run in the same process</em></strong>, if the applications so requests, so that the system treats them as a single application. In this way you can deploy your app in modules, and users can update each of the modules independently.</li>\n<li><strong><em>Code/data</em></strong><br>By signing multiple apps with the same certificate and using signature-based permissions checks, your apps can share code and data in a secure manner.</li>\n</ol>\n<h2 id=\"五、-Signing-App-Manually\"><a href=\"#五、-Signing-App-Manually\" class=\"headerlink\" title=\"五、 Signing App Manually\"></a>五、 Signing App Manually</h2><ol>\n<li>Generate a private key using keytool</li>\n</ol>\n<pre><code>$ keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000\n</code></pre><ol>\n<li><p>Sign your app with your private key using jarsigner</p>\n<pre><code>$ jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore my_application.apk alias_name\n</code></pre></li>\n<li><p>Verify that your APK is signed</p>\n<pre><code>$ jarsigner -verify -verbose -certs my_application.apk\n</code></pre></li>\n<li><p>Align the final APK package using zipalign</p>\n<pre><code>$ zipalign -v 4 your_project_name-unaligned.apk your_project_name.apk\n</code></pre></li>\n</ol>\n<p>zipalign ensures that all uncompressed data starts with a particular byte alignment relative to the start of the file, which reduces the amount of RAM consumed by an app.对齐资源文件、数据文件，在访问的时候可以节省内存，加快效率。</p>\n<h2 id=\"六、-Apps-Over-65k-Methods\"><a href=\"#六、-Apps-Over-65k-Methods\" class=\"headerlink\" title=\"六、 Apps Over 65k Methods\"></a>六、 Apps Over 65k Methods</h2><ol>\n<li><p>build error:</p>\n<ul>\n<li><p>Earlier versions of the build system report this error as follows</p>\n  <figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tConversion <span class=\"keyword\">to</span> Dalvik format failed:</span><br><span class=\"line\">Unable <span class=\"keyword\">to</span> execute dex: <span class=\"function\"><span class=\"keyword\">method</span> <span class=\"title\">ID</span> <span class=\"title\">not</span> <span class=\"title\">in</span> [0, 0<span class=\"title\">xffff</span>]:</span> <span class=\"number\">65536</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<pre><code>* More recent versions of the Android build system display a different error\n\n    <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\ttrouble writing outpu<span class=\"variable\">t:</span></span><br><span class=\"line\">Too many field reference<span class=\"variable\">s:</span> <span class=\"number\">131000</span>; <span class=\"built_in\">max</span> <span class=\"keyword\">is</span> <span class=\"number\">65536</span>.</span><br><span class=\"line\">You may <span class=\"keyword\">try</span> using --multi-dex option.</span><br></pre></td></tr></table></figure>\n</code></pre><p>一个dalvik里能引用的方法数上限65536个。</p>\n<ol>\n<li><p>Android application (APK) files contain executable bytecode files in the form of Dalvik Executable (DEX) files；The Dalvik Executable specification <strong><em>limits the total number of methods that can be referenced within a single DEX file to 65,536</em></strong>, including Android framework methods, library methods, and methods in your own code. <strong><em>Getting past this limit requires that you configure your app build process to generate more than one DEX file</em></strong>, known as a multidex configuration. </p>\n</li>\n<li><p>Solution:<br><a href=\"http://developer.android.com/tools/building/multidex.html#about\" target=\"_blank\" rel=\"external\">http://developer.android.com/tools/building/multidex.html#about</a></p>\n</li>\n</ol>\n","excerpt":"","more":"<p>Android app的编译、签名过程，及Gradle打包脚本的配置。</p>\n<h2 id=\"一、-Build-Process\"><a href=\"#一、-Build-Process\" class=\"headerlink\" title=\"一、 Build Process\"></a>一、 Build Process</h2><p><img src=\"https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-build-process/build_process.png?raw=true\" alt=\"Build Process\"></p>\n<h2 id=\"二、-Building-in-Debug-Mode\"><a href=\"#二、-Building-in-Debug-Mode\" class=\"headerlink\" title=\"二、 Building in Debug Mode\"></a>二、 Building in Debug Mode</h2><p>In debug mode, the build tools automatically sign your application with a debug key and optimize the package with zipalign.The debug keystore is located in $HOME/.android/debug.keystore, and is created if not present.</p>\n<p>On Windows platforms, type this command:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradlew<span class=\"selector-class\">.bat</span> assembleDebug  <span class=\"comment\">// Debug是gradle脚本的buildTypes</span></span><br></pre></td></tr></table></figure>\n<p>On Mac OS and Linux platforms, type these commands:</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>chmod +x gradlew</span><br><span class=\"line\"><span class=\"variable\">$ </span>./gradlew assembleDebug</span><br></pre></td></tr></table></figure>\n<p><strong><em>Output:</em></strong></p>\n<ul>\n<li>APK for the app module is located in app/build/outputs/apk/</li>\n<li>AAR for any lib modules is located in lib/build/outputs/libs/</li>\n</ul>\n<h2 id=\"三、-Building-in-Release-Mode\"><a href=\"#三、-Building-in-Release-Mode\" class=\"headerlink\" title=\"三、 Building in Release Mode\"></a>三、 Building in Release Mode</h2><p>There are two approaches to building in release mode: build an unsigned package in release mode and then manually sign and align the package, or allow the build script to sign and align the package for you.</p>\n<h3 id=\"1-Build-unsigned-and-aligned\"><a href=\"#1-Build-unsigned-and-aligned\" class=\"headerlink\" title=\"1. Build unsigned and aligned\"></a>1. Build unsigned and aligned</h3><figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attribute\">plugin</span>: <span class=\"string\">'com.android.application'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"decorator\">android</span> &#123;</span><br><span class=\"line\">    compileSdkVersion <span class=\"number\">19</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"19.0.0\"</span></span><br><span class=\"line\">    <span class=\"comment\">// buildToolsVersion should be higher or equal to compileSdkVersion</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// values in defaultConfig override those in the manifest file</span></span><br><span class=\"line\">    <span class=\"decorator\">defaultConfig</span> &#123;</span><br><span class=\"line\">        applicationId <span class=\"string\">\"com.example.my.app\"</span> <span class=\"comment\">//发布pro和free时用</span></span><br><span class=\"line\">        minSdkVersion <span class=\"number\">8</span></span><br><span class=\"line\">        targetSdkVersion <span class=\"number\">19</span> </span><br><span class=\"line\">        versionCode <span class=\"number\">1</span></span><br><span class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 编译时将会同时编译两个apk出来</span></span><br><span class=\"line\">    <span class=\"comment\">// 将会覆盖defaultConfig里的值</span></span><br><span class=\"line\">    <span class=\"comment\">// 创建不同的flavor代码，目录结构src/main和src/free,子目录相同</span></span><br><span class=\"line\">    <span class=\"decorator\">productFlavors</span> &#123;</span><br><span class=\"line\">        <span class=\"decorator\">pro</span> &#123;</span><br><span class=\"line\">            applicationId = <span class=\"string\">\"com.example.my.pkg.pro\"</span></span><br><span class=\"line\">            versionName <span class=\"string\">\"1.0-pro\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"decorator\">free</span> &#123;</span><br><span class=\"line\">            applicationId = <span class=\"string\">\"com.example.my.pkg.free\"</span></span><br><span class=\"line\">            versionName <span class=\"string\">\"1.0-free\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 执行编译命令的时候gradlew assembleCustom编译custom</span></span><br><span class=\"line\">\t<span class=\"comment\">// gradlew assemblerelease编译release</span></span><br><span class=\"line\">\t<span class=\"comment\">// 都将编译出pro和free两个包</span></span><br><span class=\"line\">\t<span class=\"comment\">// 编译custom的时候，会在包名后再加一个后缀</span></span><br><span class=\"line\">    <span class=\"decorator\">buildTypes</span> &#123;</span><br><span class=\"line\">        <span class=\"decorator\">release</span> &#123;</span><br><span class=\"line\">            minifyEnabled <span class=\"literal\">true</span></span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>), <span class=\"string\">'proguard-rulse.pro'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"comment\">// debug，alpha， beta</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"decorator\">custom</span> &#123;</span><br><span class=\"line\">            applicationIdSuffix <span class=\"string\">\".custom\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"decorator\">dependencies</span> &#123;</span><br><span class=\"line\">    compile project(<span class=\"string\">\":lib\"</span>)</span><br><span class=\"line\">    compile <span class=\"string\">'com.android.support:appcompat-v7:19.0.1'</span></span><br><span class=\"line\">    compile fileTree(<span class=\"attribute\">dir</span>: <span class=\"string\">'libs'</span>, <span class=\"attribute\">include</span>: [<span class=\"string\">'*.jar'</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>为何要用applicationId？ manifest里的packagename是可以唯一标示apk的。packagename也用于很多资源文件的包头，包括R.java。如果同时发布一个pro和一个free版本，代码里引用的又都是com.xxx.R;再发布的时候两个id相同的是不能发布的。所以用packagename来确定包头，用applicationId来区分不同的app（谷歌App Play是用此来标识包的）。对应的debug版本添加applicationIdSuffix “.debug”。</p>\n</li>\n<li><p>Source directories<br>To build each version of your app, the build system combines source code and resources from:</p>\n<ul>\n<li>src/main/ - the main source directory (the default configuration common to all variants)</li>\n<li>src/<buildType>/ - the source directory</li>\n<li>src/<productFlavor>/ - the source directory</li>\n</ul>\n</li>\n</ol>\n<p>The build type and product flavor source directories are optional.<br>For projects that do not define any flavors, the build system uses the defaultConfig settings:</p>\n<pre><code>* src/main/ (default configuration)\n* src/release/ (build type)\n* src/debug/ (build type)\n</code></pre><ol>\n<li><p>For projects that define a set of product flavors, the build system merges the build type, product flavor and main source directories. also merges all the manifests into a single manifest. The manifest merge priority from lowest to highest is libraries/dependencies -&gt; main src -&gt; productFlavor -&gt; buildType. Resources with the same name also applies for this priority sequence.</p>\n</li>\n<li><p>manifest合并修改语法：<a href=\"http://developer.android.com/tools/building/manifest-merge.html#markers-selectors\">http://developer.android.com/tools/building/manifest-merge.html#markers-selectors</a></p>\n</li>\n</ol>\n<h3 id=\"2-Build-signed-and-aligned\"><a href=\"#2-Build-signed-and-aligned\" class=\"headerlink\" title=\"2. Build signed and aligned\"></a>2. Build signed and aligned</h3><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">android </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"class\">defaultConfig </span>&#123; ... &#125;</span><br><span class=\"line\">    <span class=\"class\">signingConfigs </span>&#123;</span><br><span class=\"line\">        <span class=\"class\">release </span>&#123;</span><br><span class=\"line\">            storeFile file(<span class=\"string\">\"myreleasekey.keystore\"</span>)</span><br><span class=\"line\">            storePassword <span class=\"string\">\"password\"</span></span><br><span class=\"line\">            keyAlias <span class=\"string\">\"MyReleaseKey\"</span></span><br><span class=\"line\">            keyPassword <span class=\"string\">\"password\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\">buildTypes </span>&#123;</span><br><span class=\"line\">        <span class=\"class\">release </span>&#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            signingConfig signingConfigs.release</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Including the passwords for your release key and keystore inside the build file is not a good security practice. </p>\n<p>To obtain these passwords from environment variables:</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">storePassword <span class=\"keyword\">System</span>.getenv(<span class=\"string\">\"KSTOREPWD\"</span>)</span><br><span class=\"line\">keyPassword <span class=\"keyword\">System</span>.getenv(<span class=\"string\">\"KEYPWD\"</span>)</span><br></pre></td></tr></table></figure>\n<p>To have the build process prompt you for these passwords if you are invoking the build from the command line:</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">storePassword System.<span class=\"built_in\">console</span>().readLine(<span class=\"string\">\"\\nKeystore password: \"</span>)</span><br><span class=\"line\">keyPassword System.<span class=\"built_in\">console</span>().readLine(<span class=\"string\">\"\\nKey password: \"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong><em>Output</em></strong><br>This creates your Android application .apk file inside the module build/ directory, named <your_module_name>-release.apk. This .apk file has been signed with the private key specified in build.gradle file and aligned with zipalign. It’s ready for installation and distribution.</p>\n<h2 id=\"四、-Signing-Considerations\"><a href=\"#四、-Signing-Considerations\" class=\"headerlink\" title=\"四、 Signing Considerations\"></a>四、 Signing Considerations</h2><ol>\n<li><strong><em>App upgrade</em></strong><br>The system allows the update if the certificates match. If you sign the new version with a different certificate, you must assign a different package name to the application—in this case, the user installs the new version as a completely new application.</li>\n<li><strong><em>App modularity</em></strong><br>Android <strong><em>allows apps signed by the same certificate to run in the same process</em></strong>, if the applications so requests, so that the system treats them as a single application. In this way you can deploy your app in modules, and users can update each of the modules independently.</li>\n<li><strong><em>Code/data</em></strong><br>By signing multiple apps with the same certificate and using signature-based permissions checks, your apps can share code and data in a secure manner.</li>\n</ol>\n<h2 id=\"五、-Signing-App-Manually\"><a href=\"#五、-Signing-App-Manually\" class=\"headerlink\" title=\"五、 Signing App Manually\"></a>五、 Signing App Manually</h2><ol>\n<li>Generate a private key using keytool</li>\n</ol>\n<pre><code>$ keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000\n</code></pre><ol>\n<li><p>Sign your app with your private key using jarsigner</p>\n<pre><code>$ jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore my_application.apk alias_name\n</code></pre></li>\n<li><p>Verify that your APK is signed</p>\n<pre><code>$ jarsigner -verify -verbose -certs my_application.apk\n</code></pre></li>\n<li><p>Align the final APK package using zipalign</p>\n<pre><code>$ zipalign -v 4 your_project_name-unaligned.apk your_project_name.apk\n</code></pre></li>\n</ol>\n<p>zipalign ensures that all uncompressed data starts with a particular byte alignment relative to the start of the file, which reduces the amount of RAM consumed by an app.对齐资源文件、数据文件，在访问的时候可以节省内存，加快效率。</p>\n<h2 id=\"六、-Apps-Over-65k-Methods\"><a href=\"#六、-Apps-Over-65k-Methods\" class=\"headerlink\" title=\"六、 Apps Over 65k Methods\"></a>六、 Apps Over 65k Methods</h2><ol>\n<li><p>build error:</p>\n<ul>\n<li><p>Earlier versions of the build system report this error as follows</p>\n  <figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tConversion <span class=\"keyword\">to</span> Dalvik format failed:</span><br><span class=\"line\">Unable <span class=\"keyword\">to</span> execute dex: <span class=\"function\"><span class=\"keyword\">method</span> <span class=\"title\">ID</span> <span class=\"title\">not</span> <span class=\"title\">in</span> [0, 0<span class=\"title\">xffff</span>]:</span> <span class=\"number\">65536</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<pre><code>* More recent versions of the Android build system display a different error\n\n    <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\ttrouble writing outpu<span class=\"variable\">t:</span></span><br><span class=\"line\">Too many field reference<span class=\"variable\">s:</span> <span class=\"number\">131000</span>; <span class=\"built_in\">max</span> <span class=\"keyword\">is</span> <span class=\"number\">65536</span>.</span><br><span class=\"line\">You may <span class=\"keyword\">try</span> using --multi-dex option.</span><br></pre></td></tr></table></figure>\n</code></pre><p>一个dalvik里能引用的方法数上限65536个。</p>\n<ol>\n<li><p>Android application (APK) files contain executable bytecode files in the form of Dalvik Executable (DEX) files；The Dalvik Executable specification <strong><em>limits the total number of methods that can be referenced within a single DEX file to 65,536</em></strong>, including Android framework methods, library methods, and methods in your own code. <strong><em>Getting past this limit requires that you configure your app build process to generate more than one DEX file</em></strong>, known as a multidex configuration. </p>\n</li>\n<li><p>Solution:<br><a href=\"http://developer.android.com/tools/building/multidex.html#about\">http://developer.android.com/tools/building/multidex.html#about</a></p>\n</li>\n</ol>\n"},{"title":"Android-DDMS-And-AndroidMonitor","date":"2016-01-18T08:33:10.000Z","_content":"DDMS的介绍及各个tool的使用。\n\n## 一、 DDMS\nDalvik Debug Monitor Server (DDMS)。\n\n* every application runs in its own process,\n* every process runs in its own virtual machine (VM).\n* every VM exposes a unique port that a debugger can attach to.\n\n\nDDMS assigns a debugging port to each VM on the device. 8600 for the first VM, the next on 8601.    \nThe DDMS \"base port\" (8700, by default). The base port is a port forwarder, which can accept VM traffic from any debugging port and forward it to the debugger on port 8700. \n\n\n1. You don't always have to restart your app to debug it. To debug an app that you're already running:    \n![](https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-ddms-and-monitor/ddms_connect.png?raw=true)\n2. 分析页面的布局结构，树状结构看到布局及item id。Dump view hierarchy from ui automator.    \n![](https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-ddms-and-monitor/view_hierarchy.png?raw=true)\n\n### 1. Viewing heap usage for a process\n### 2. Tracking memory allocation of objects\n### 3. Working with an emulator or device's file system\n### 4. Examining thread information\n### 5. Starting method profiling\n### 6. Using the Network Traffic tool\n### 7. Emulating phone operations and location\n1. Changing network state, speed, and latency\n2. Spoofing calls or SMS text messages\n3. Setting the location of the phone\n\n## 二、 AndroidMonitor\n 1. Switching between Devices and Apps \n 2. Taking a Screen Capture of the Device \n 3. Recording a Video from the Screen \n 4. Examining System Information     \n ![](https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-ddms-and-monitor/system_info.png?raw=true)\n    * Activity Manager State - dumpsys activity\n    * Package Information - dumpsys package\n    * Memory Usage - dumpsys meminfo\n    * Memory Use Over Time - dumpsys procstats\n    * Graphics State - dumpsys gfxinfo\n    \n### 1. Logcat\n### 2. Memory Monitor\n* Show a graph of available and allocated memory over time.\n* Show garbage collection (GC) events over time.\n* Initiate garbage collection events.\n* Quickly test whether app slowness might be related to excessive garbage collection events.\n* Quickly test whether app crashes may be related to running out of memory.   \n\nDump memory 后参数说明：    \ndeveloper.android.com/tools/help/am-memory.html#tracking\n\n### 3. CPU Monitor\n### 4. GPU Monitor\n### 5. Network Monitor","source":"_posts/android-ddms-and-monitor.md","raw":"title: Android-DDMS-And-AndroidMonitor\ncategories:\n  - Android\ntags:\n  - Android\n  - Optimization\n  - DDMS\n  - Monitor\ndate: 2016-01-18 16:33:10\n---\nDDMS的介绍及各个tool的使用。\n\n## 一、 DDMS\nDalvik Debug Monitor Server (DDMS)。\n\n* every application runs in its own process,\n* every process runs in its own virtual machine (VM).\n* every VM exposes a unique port that a debugger can attach to.\n\n\nDDMS assigns a debugging port to each VM on the device. 8600 for the first VM, the next on 8601.    \nThe DDMS \"base port\" (8700, by default). The base port is a port forwarder, which can accept VM traffic from any debugging port and forward it to the debugger on port 8700. \n\n\n1. You don't always have to restart your app to debug it. To debug an app that you're already running:    \n![](https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-ddms-and-monitor/ddms_connect.png?raw=true)\n2. 分析页面的布局结构，树状结构看到布局及item id。Dump view hierarchy from ui automator.    \n![](https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-ddms-and-monitor/view_hierarchy.png?raw=true)\n\n### 1. Viewing heap usage for a process\n### 2. Tracking memory allocation of objects\n### 3. Working with an emulator or device's file system\n### 4. Examining thread information\n### 5. Starting method profiling\n### 6. Using the Network Traffic tool\n### 7. Emulating phone operations and location\n1. Changing network state, speed, and latency\n2. Spoofing calls or SMS text messages\n3. Setting the location of the phone\n\n## 二、 AndroidMonitor\n 1. Switching between Devices and Apps \n 2. Taking a Screen Capture of the Device \n 3. Recording a Video from the Screen \n 4. Examining System Information     \n ![](https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-ddms-and-monitor/system_info.png?raw=true)\n    * Activity Manager State - dumpsys activity\n    * Package Information - dumpsys package\n    * Memory Usage - dumpsys meminfo\n    * Memory Use Over Time - dumpsys procstats\n    * Graphics State - dumpsys gfxinfo\n    \n### 1. Logcat\n### 2. Memory Monitor\n* Show a graph of available and allocated memory over time.\n* Show garbage collection (GC) events over time.\n* Initiate garbage collection events.\n* Quickly test whether app slowness might be related to excessive garbage collection events.\n* Quickly test whether app crashes may be related to running out of memory.   \n\nDump memory 后参数说明：    \ndeveloper.android.com/tools/help/am-memory.html#tracking\n\n### 3. CPU Monitor\n### 4. GPU Monitor\n### 5. Network Monitor","slug":"android-ddms-and-monitor","published":1,"updated":"2016-03-28T09:29:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimx9usjw0005j9v8ohs57k7b","content":"<p>DDMS的介绍及各个tool的使用。</p>\n<h2 id=\"一、-DDMS\"><a href=\"#一、-DDMS\" class=\"headerlink\" title=\"一、 DDMS\"></a>一、 DDMS</h2><p>Dalvik Debug Monitor Server (DDMS)。</p>\n<ul>\n<li>every application runs in its own process,</li>\n<li>every process runs in its own virtual machine (VM).</li>\n<li>every VM exposes a unique port that a debugger can attach to.</li>\n</ul>\n<p>DDMS assigns a debugging port to each VM on the device. 8600 for the first VM, the next on 8601.<br>The DDMS “base port” (8700, by default). The base port is a port forwarder, which can accept VM traffic from any debugging port and forward it to the debugger on port 8700. </p>\n<ol>\n<li>You don’t always have to restart your app to debug it. To debug an app that you’re already running:<br><img src=\"https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-ddms-and-monitor/ddms_connect.png?raw=true\" alt=\"\"></li>\n<li>分析页面的布局结构，树状结构看到布局及item id。Dump view hierarchy from ui automator.<br><img src=\"https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-ddms-and-monitor/view_hierarchy.png?raw=true\" alt=\"\"></li>\n</ol>\n<h3 id=\"1-Viewing-heap-usage-for-a-process\"><a href=\"#1-Viewing-heap-usage-for-a-process\" class=\"headerlink\" title=\"1. Viewing heap usage for a process\"></a>1. Viewing heap usage for a process</h3><h3 id=\"2-Tracking-memory-allocation-of-objects\"><a href=\"#2-Tracking-memory-allocation-of-objects\" class=\"headerlink\" title=\"2. Tracking memory allocation of objects\"></a>2. Tracking memory allocation of objects</h3><h3 id=\"3-Working-with-an-emulator-or-device’s-file-system\"><a href=\"#3-Working-with-an-emulator-or-device’s-file-system\" class=\"headerlink\" title=\"3. Working with an emulator or device’s file system\"></a>3. Working with an emulator or device’s file system</h3><h3 id=\"4-Examining-thread-information\"><a href=\"#4-Examining-thread-information\" class=\"headerlink\" title=\"4. Examining thread information\"></a>4. Examining thread information</h3><h3 id=\"5-Starting-method-profiling\"><a href=\"#5-Starting-method-profiling\" class=\"headerlink\" title=\"5. Starting method profiling\"></a>5. Starting method profiling</h3><h3 id=\"6-Using-the-Network-Traffic-tool\"><a href=\"#6-Using-the-Network-Traffic-tool\" class=\"headerlink\" title=\"6. Using the Network Traffic tool\"></a>6. Using the Network Traffic tool</h3><h3 id=\"7-Emulating-phone-operations-and-location\"><a href=\"#7-Emulating-phone-operations-and-location\" class=\"headerlink\" title=\"7. Emulating phone operations and location\"></a>7. Emulating phone operations and location</h3><ol>\n<li>Changing network state, speed, and latency</li>\n<li>Spoofing calls or SMS text messages</li>\n<li>Setting the location of the phone</li>\n</ol>\n<h2 id=\"二、-AndroidMonitor\"><a href=\"#二、-AndroidMonitor\" class=\"headerlink\" title=\"二、 AndroidMonitor\"></a>二、 AndroidMonitor</h2><ol>\n<li>Switching between Devices and Apps </li>\n<li>Taking a Screen Capture of the Device </li>\n<li>Recording a Video from the Screen </li>\n<li>Examining System Information<br><img src=\"https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-ddms-and-monitor/system_info.png?raw=true\" alt=\"\"><ul>\n<li>Activity Manager State - dumpsys activity</li>\n<li>Package Information - dumpsys package</li>\n<li>Memory Usage - dumpsys meminfo</li>\n<li>Memory Use Over Time - dumpsys procstats</li>\n<li>Graphics State - dumpsys gfxinfo</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"1-Logcat\"><a href=\"#1-Logcat\" class=\"headerlink\" title=\"1. Logcat\"></a>1. Logcat</h3><h3 id=\"2-Memory-Monitor\"><a href=\"#2-Memory-Monitor\" class=\"headerlink\" title=\"2. Memory Monitor\"></a>2. Memory Monitor</h3><ul>\n<li>Show a graph of available and allocated memory over time.</li>\n<li>Show garbage collection (GC) events over time.</li>\n<li>Initiate garbage collection events.</li>\n<li>Quickly test whether app slowness might be related to excessive garbage collection events.</li>\n<li>Quickly test whether app crashes may be related to running out of memory.   </li>\n</ul>\n<p>Dump memory 后参数说明：<br>developer.android.com/tools/help/am-memory.html#tracking</p>\n<h3 id=\"3-CPU-Monitor\"><a href=\"#3-CPU-Monitor\" class=\"headerlink\" title=\"3. CPU Monitor\"></a>3. CPU Monitor</h3><h3 id=\"4-GPU-Monitor\"><a href=\"#4-GPU-Monitor\" class=\"headerlink\" title=\"4. GPU Monitor\"></a>4. GPU Monitor</h3><h3 id=\"5-Network-Monitor\"><a href=\"#5-Network-Monitor\" class=\"headerlink\" title=\"5. Network Monitor\"></a>5. Network Monitor</h3>","excerpt":"","more":"<p>DDMS的介绍及各个tool的使用。</p>\n<h2 id=\"一、-DDMS\"><a href=\"#一、-DDMS\" class=\"headerlink\" title=\"一、 DDMS\"></a>一、 DDMS</h2><p>Dalvik Debug Monitor Server (DDMS)。</p>\n<ul>\n<li>every application runs in its own process,</li>\n<li>every process runs in its own virtual machine (VM).</li>\n<li>every VM exposes a unique port that a debugger can attach to.</li>\n</ul>\n<p>DDMS assigns a debugging port to each VM on the device. 8600 for the first VM, the next on 8601.<br>The DDMS “base port” (8700, by default). The base port is a port forwarder, which can accept VM traffic from any debugging port and forward it to the debugger on port 8700. </p>\n<ol>\n<li>You don’t always have to restart your app to debug it. To debug an app that you’re already running:<br><img src=\"https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-ddms-and-monitor/ddms_connect.png?raw=true\" alt=\"\"></li>\n<li>分析页面的布局结构，树状结构看到布局及item id。Dump view hierarchy from ui automator.<br><img src=\"https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-ddms-and-monitor/view_hierarchy.png?raw=true\" alt=\"\"></li>\n</ol>\n<h3 id=\"1-Viewing-heap-usage-for-a-process\"><a href=\"#1-Viewing-heap-usage-for-a-process\" class=\"headerlink\" title=\"1. Viewing heap usage for a process\"></a>1. Viewing heap usage for a process</h3><h3 id=\"2-Tracking-memory-allocation-of-objects\"><a href=\"#2-Tracking-memory-allocation-of-objects\" class=\"headerlink\" title=\"2. Tracking memory allocation of objects\"></a>2. Tracking memory allocation of objects</h3><h3 id=\"3-Working-with-an-emulator-or-device’s-file-system\"><a href=\"#3-Working-with-an-emulator-or-device’s-file-system\" class=\"headerlink\" title=\"3. Working with an emulator or device’s file system\"></a>3. Working with an emulator or device’s file system</h3><h3 id=\"4-Examining-thread-information\"><a href=\"#4-Examining-thread-information\" class=\"headerlink\" title=\"4. Examining thread information\"></a>4. Examining thread information</h3><h3 id=\"5-Starting-method-profiling\"><a href=\"#5-Starting-method-profiling\" class=\"headerlink\" title=\"5. Starting method profiling\"></a>5. Starting method profiling</h3><h3 id=\"6-Using-the-Network-Traffic-tool\"><a href=\"#6-Using-the-Network-Traffic-tool\" class=\"headerlink\" title=\"6. Using the Network Traffic tool\"></a>6. Using the Network Traffic tool</h3><h3 id=\"7-Emulating-phone-operations-and-location\"><a href=\"#7-Emulating-phone-operations-and-location\" class=\"headerlink\" title=\"7. Emulating phone operations and location\"></a>7. Emulating phone operations and location</h3><ol>\n<li>Changing network state, speed, and latency</li>\n<li>Spoofing calls or SMS text messages</li>\n<li>Setting the location of the phone</li>\n</ol>\n<h2 id=\"二、-AndroidMonitor\"><a href=\"#二、-AndroidMonitor\" class=\"headerlink\" title=\"二、 AndroidMonitor\"></a>二、 AndroidMonitor</h2><ol>\n<li>Switching between Devices and Apps </li>\n<li>Taking a Screen Capture of the Device </li>\n<li>Recording a Video from the Screen </li>\n<li>Examining System Information<br><img src=\"https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-ddms-and-monitor/system_info.png?raw=true\" alt=\"\"><ul>\n<li>Activity Manager State - dumpsys activity</li>\n<li>Package Information - dumpsys package</li>\n<li>Memory Usage - dumpsys meminfo</li>\n<li>Memory Use Over Time - dumpsys procstats</li>\n<li>Graphics State - dumpsys gfxinfo</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"1-Logcat\"><a href=\"#1-Logcat\" class=\"headerlink\" title=\"1. Logcat\"></a>1. Logcat</h3><h3 id=\"2-Memory-Monitor\"><a href=\"#2-Memory-Monitor\" class=\"headerlink\" title=\"2. Memory Monitor\"></a>2. Memory Monitor</h3><ul>\n<li>Show a graph of available and allocated memory over time.</li>\n<li>Show garbage collection (GC) events over time.</li>\n<li>Initiate garbage collection events.</li>\n<li>Quickly test whether app slowness might be related to excessive garbage collection events.</li>\n<li>Quickly test whether app crashes may be related to running out of memory.   </li>\n</ul>\n<p>Dump memory 后参数说明：<br>developer.android.com/tools/help/am-memory.html#tracking</p>\n<h3 id=\"3-CPU-Monitor\"><a href=\"#3-CPU-Monitor\" class=\"headerlink\" title=\"3. CPU Monitor\"></a>3. CPU Monitor</h3><h3 id=\"4-GPU-Monitor\"><a href=\"#4-GPU-Monitor\" class=\"headerlink\" title=\"4. GPU Monitor\"></a>4. GPU Monitor</h3><h3 id=\"5-Network-Monitor\"><a href=\"#5-Network-Monitor\" class=\"headerlink\" title=\"5. Network Monitor\"></a>5. Network Monitor</h3>"},{"title":"Android-Code-Tools","date":"2016-01-25T09:20:08.000Z","_content":"Lint检查潜在错误、优化；Annotations优化参数定义，增加可读性；DeepLink实现Android和H5页面跳转；App Index可以网页搜索app内部的功能。Android和iOS都可添加deep link以及app index：https://developers.google.com/app-indexing/introduction。\n\n## 一、 Lint\nThe Lint tool is a static code analysis tool that checks your Android project source files for potential bugs and optimization improvements.\n\n启动： Analyze -> Inspect codes.    \n配置： File -> Settings -> Project Settings\n\n***检查的内容：***\n\n1. XML resource files contain unused namespaces\n2. 使用的deprecated elements or API\n\n## 二、 Annotations\n\nLint不能检查到的的正确性，比如xml中使用string的地方，引入了一个color。因为都是int型。\nAdd dependency import android.support.annotation.   \nAnnotations allow you to provide hints to code inspections tools like lint, to help detect these, more subtle code problems. Annotations可以帮助Lint检查更多错误。\n\n### 1. Adding Resource Annotations\n1. ***@StringRes***    \nReferences a R.string resource.\n2. ***@DrawableRes***    \nReferences a Drawable resource.\n3. ***@ColorRes***    \nReferences a Color resource.\n4. ***@InterpolatorRes***    \nReferences a Interpolator resource.\n5. ***@AnyRes***    \nReferences any type of R. resource.\n\n```\nimport android.support.annotation.StringRes;\n...\n    public abstract void setTitle(@StringRes int resId);\n    ...\n```\n\n### 2. Adding Nullness Annotations\n\nAdd ***@Nullable*** and ***@NonNull*** annotations to check the nullness of a given variable, parameter, or return value.\n\n\n```\nimport android.support.annotation.NonNull;\n...\n\n    /** Add support for inflating the <fragment> tag. */\n    @NonNull\n    @Override\n    public View onCreateView(String name, @NonNull Context context,\n      @NonNull AttributeSet attrs) {\n      ...\n      }\n...\n```\n\n### 3. Adding Thread Annotations\n\n1. ***@UiThread***\n2. ***@MainThread***\n3. ***@WorkerThread***\n4. ***@BinderThread***\n\n### 4. Adding Value Constraint Annotations\n\n1. ***@IntRange***\n2. ***@FloatRange***\n3. ***@Size***    \nchecks the size of a collection or array, as well as the length of a string\n\n```\npublic void setAlpha(@IntRange(from=0,to=255) int alpha) { … }\n...\nint[] location = new int[3];\nbutton.getLocationOnScreen(@Size(min=1) location);\n// @Size(2) annotation to validate that an array contains exactly two values\n\n```\n\n### 4. Adding Permission Annotations\n\n1. ***@RequiresPermission***\n\n\t```\n\t@RequiresPermission(Manifest.permission.SET_WALLPAPER)\n\tpublic abstract void setWallpaper(Bitmap bitmap) throws IOException;\n\t```\n2. ***allOf***\n\n\t```\n\t@RequiresPermission(allOf = {\n    \tManifest.permission.READ_EXTERNAL_STORAGE,\n\t    Manifest.permission.WRITE_EXTERNAL_STORAGE})\n\tpublic static final void copyFile(String dest, String source) {\n    \t...\n\t}\n\t```\n### 5. Adding CheckResults Annotations\n确保返回值被使用。但是语法没搞明白。\n\n### 6. Adding CallSuper Annotations\n```\n@CallSuper\nprotected void onCreate(Bundle savedInstanceState) {\n}\n```\n\n### 7. Creating Enumerated Annotations\n我后来能用到这个语法吗。。呵呵呵呵\n\n## 三、 DeepLink\n\n### 1. Adding an Intent Filter for Deep Linking and Google Search\n更多信息参考https://developers.google.com/app-indexing/introduction。内容包括给Anroid和iOS添加深层连接和App Indexing。\nAndroidManifest.xml中activity，generate Deep Link。实际上是添加intent-filter.\n\n\t```\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <!-- ATTENTION: This data URL was auto-generated. We recommend that you use the HTTP scheme.\n          TODO: Change the host or pathPrefix as necessary. -->\n        <data\n            android:host=\"penging.com\"\n            android:pathPrefix=\"/activityguide\"\n            android:scheme=\"http\" />\n    </intent-filter>\n\t```\n\t\n***BROWSABLE***    \n若要能够从 Web 浏览器执行该 Intent，则必须将其设为 BROWSABLE。如果未设置，点击浏览器中的链接将无法解析到您的应用（在这种情况下，只有当前的移动 Web 浏览器能响应该 URL）。    \n***DEFAULT***    \n类别声明了您的应用可以对隐式 Intent 做出响应。    \n***data标签***    \ndata标签必须有scheme属性；\nandroid:path 属性或者其变体（pathPattern 或 pathPrefix）来区分对于不同的 URI 路径。\n\n### 2. Testing a Deep Link\n\n1. After opening a project, select Run > Edit Configurations.\n2. In the Run/Debug Configurations dialog, beneath Android Application, select the module you want to test.\n3. Select the General tab.\n4. In the Launch field, select Deep Link. \n\n## 四、 App Indexing\n### 1. Add\n右击Activity可添加。\n参考网址如文章开头简介。\n### 2. Test\nViewing App Indexing API Messages in the logcat Monitor.","source":"_posts/android-code-tools.md","raw":"title: Android-Code-Tools\ncategories:\n  - Android\ntags:\n  - Android\n  - Lint\n  - Annotations\n  - DeepLink\n  - AppIndex\n  - Optimization\n  - Tools\ndate: 2016-01-25 17:20:08\n---\nLint检查潜在错误、优化；Annotations优化参数定义，增加可读性；DeepLink实现Android和H5页面跳转；App Index可以网页搜索app内部的功能。Android和iOS都可添加deep link以及app index：https://developers.google.com/app-indexing/introduction。\n\n## 一、 Lint\nThe Lint tool is a static code analysis tool that checks your Android project source files for potential bugs and optimization improvements.\n\n启动： Analyze -> Inspect codes.    \n配置： File -> Settings -> Project Settings\n\n***检查的内容：***\n\n1. XML resource files contain unused namespaces\n2. 使用的deprecated elements or API\n\n## 二、 Annotations\n\nLint不能检查到的的正确性，比如xml中使用string的地方，引入了一个color。因为都是int型。\nAdd dependency import android.support.annotation.   \nAnnotations allow you to provide hints to code inspections tools like lint, to help detect these, more subtle code problems. Annotations可以帮助Lint检查更多错误。\n\n### 1. Adding Resource Annotations\n1. ***@StringRes***    \nReferences a R.string resource.\n2. ***@DrawableRes***    \nReferences a Drawable resource.\n3. ***@ColorRes***    \nReferences a Color resource.\n4. ***@InterpolatorRes***    \nReferences a Interpolator resource.\n5. ***@AnyRes***    \nReferences any type of R. resource.\n\n```\nimport android.support.annotation.StringRes;\n...\n    public abstract void setTitle(@StringRes int resId);\n    ...\n```\n\n### 2. Adding Nullness Annotations\n\nAdd ***@Nullable*** and ***@NonNull*** annotations to check the nullness of a given variable, parameter, or return value.\n\n\n```\nimport android.support.annotation.NonNull;\n...\n\n    /** Add support for inflating the <fragment> tag. */\n    @NonNull\n    @Override\n    public View onCreateView(String name, @NonNull Context context,\n      @NonNull AttributeSet attrs) {\n      ...\n      }\n...\n```\n\n### 3. Adding Thread Annotations\n\n1. ***@UiThread***\n2. ***@MainThread***\n3. ***@WorkerThread***\n4. ***@BinderThread***\n\n### 4. Adding Value Constraint Annotations\n\n1. ***@IntRange***\n2. ***@FloatRange***\n3. ***@Size***    \nchecks the size of a collection or array, as well as the length of a string\n\n```\npublic void setAlpha(@IntRange(from=0,to=255) int alpha) { … }\n...\nint[] location = new int[3];\nbutton.getLocationOnScreen(@Size(min=1) location);\n// @Size(2) annotation to validate that an array contains exactly two values\n\n```\n\n### 4. Adding Permission Annotations\n\n1. ***@RequiresPermission***\n\n\t```\n\t@RequiresPermission(Manifest.permission.SET_WALLPAPER)\n\tpublic abstract void setWallpaper(Bitmap bitmap) throws IOException;\n\t```\n2. ***allOf***\n\n\t```\n\t@RequiresPermission(allOf = {\n    \tManifest.permission.READ_EXTERNAL_STORAGE,\n\t    Manifest.permission.WRITE_EXTERNAL_STORAGE})\n\tpublic static final void copyFile(String dest, String source) {\n    \t...\n\t}\n\t```\n### 5. Adding CheckResults Annotations\n确保返回值被使用。但是语法没搞明白。\n\n### 6. Adding CallSuper Annotations\n```\n@CallSuper\nprotected void onCreate(Bundle savedInstanceState) {\n}\n```\n\n### 7. Creating Enumerated Annotations\n我后来能用到这个语法吗。。呵呵呵呵\n\n## 三、 DeepLink\n\n### 1. Adding an Intent Filter for Deep Linking and Google Search\n更多信息参考https://developers.google.com/app-indexing/introduction。内容包括给Anroid和iOS添加深层连接和App Indexing。\nAndroidManifest.xml中activity，generate Deep Link。实际上是添加intent-filter.\n\n\t```\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <!-- ATTENTION: This data URL was auto-generated. We recommend that you use the HTTP scheme.\n          TODO: Change the host or pathPrefix as necessary. -->\n        <data\n            android:host=\"penging.com\"\n            android:pathPrefix=\"/activityguide\"\n            android:scheme=\"http\" />\n    </intent-filter>\n\t```\n\t\n***BROWSABLE***    \n若要能够从 Web 浏览器执行该 Intent，则必须将其设为 BROWSABLE。如果未设置，点击浏览器中的链接将无法解析到您的应用（在这种情况下，只有当前的移动 Web 浏览器能响应该 URL）。    \n***DEFAULT***    \n类别声明了您的应用可以对隐式 Intent 做出响应。    \n***data标签***    \ndata标签必须有scheme属性；\nandroid:path 属性或者其变体（pathPattern 或 pathPrefix）来区分对于不同的 URI 路径。\n\n### 2. Testing a Deep Link\n\n1. After opening a project, select Run > Edit Configurations.\n2. In the Run/Debug Configurations dialog, beneath Android Application, select the module you want to test.\n3. Select the General tab.\n4. In the Launch field, select Deep Link. \n\n## 四、 App Indexing\n### 1. Add\n右击Activity可添加。\n参考网址如文章开头简介。\n### 2. Test\nViewing App Indexing API Messages in the logcat Monitor.","slug":"android-code-tools","published":1,"updated":"2016-03-29T01:39:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimx9usjy0006j9v8vsu0snw9","content":"<p>Lint检查潜在错误、优化；Annotations优化参数定义，增加可读性；DeepLink实现Android和H5页面跳转；App Index可以网页搜索app内部的功能。Android和iOS都可添加deep link以及app index：<a href=\"https://developers.google.com/app-indexing/introduction。\" target=\"_blank\" rel=\"external\">https://developers.google.com/app-indexing/introduction。</a></p>\n<h2 id=\"一、-Lint\"><a href=\"#一、-Lint\" class=\"headerlink\" title=\"一、 Lint\"></a>一、 Lint</h2><p>The Lint tool is a static code analysis tool that checks your Android project source files for potential bugs and optimization improvements.</p>\n<p>启动： Analyze -&gt; Inspect codes.<br>配置： File -&gt; Settings -&gt; Project Settings</p>\n<p><strong><em>检查的内容：</em></strong></p>\n<ol>\n<li>XML resource files contain unused namespaces</li>\n<li>使用的deprecated elements or API</li>\n</ol>\n<h2 id=\"二、-Annotations\"><a href=\"#二、-Annotations\" class=\"headerlink\" title=\"二、 Annotations\"></a>二、 Annotations</h2><p>Lint不能检查到的的正确性，比如xml中使用string的地方，引入了一个color。因为都是int型。<br>Add dependency import android.support.annotation.<br>Annotations allow you to provide hints to code inspections tools like lint, to help detect these, more subtle code problems. Annotations可以帮助Lint检查更多错误。</p>\n<h3 id=\"1-Adding-Resource-Annotations\"><a href=\"#1-Adding-Resource-Annotations\" class=\"headerlink\" title=\"1. Adding Resource Annotations\"></a>1. Adding Resource Annotations</h3><ol>\n<li><strong><em>@StringRes</em></strong><br>References a R.string resource.</li>\n<li><strong><em>@DrawableRes</em></strong><br>References a Drawable resource.</li>\n<li><strong><em>@ColorRes</em></strong><br>References a Color resource.</li>\n<li><strong><em>@InterpolatorRes</em></strong><br>References a Interpolator resource.</li>\n<li><strong><em>@AnyRes</em></strong><br>References any type of R. resource.</li>\n</ol>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.StringRes;</span><br><span class=\"line\">...</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setTitle</span><span class=\"params\">(@StringRes <span class=\"keyword\">int</span> resId)</span></span>;</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Adding-Nullness-Annotations\"><a href=\"#2-Adding-Nullness-Annotations\" class=\"headerlink\" title=\"2. Adding Nullness Annotations\"></a>2. Adding Nullness Annotations</h3><p>Add <strong><em>@Nullable</em></strong> and <strong><em>@NonNull</em></strong> annotations to check the nullness of a given variable, parameter, or return value.</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.NonNull;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Add support for inflating the &lt;fragment&gt; tag. */</span></span><br><span class=\"line\">    <span class=\"keyword\">@NonNull</span></span><br><span class=\"line\">    <span class=\"keyword\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> View onCreateView(String name, <span class=\"keyword\">@NonNull</span> Context context,</span><br><span class=\"line\">      <span class=\"keyword\">@NonNull</span> AttributeSet attrs) &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Adding-Thread-Annotations\"><a href=\"#3-Adding-Thread-Annotations\" class=\"headerlink\" title=\"3. Adding Thread Annotations\"></a>3. Adding Thread Annotations</h3><ol>\n<li><strong><em>@UiThread</em></strong></li>\n<li><strong><em>@MainThread</em></strong></li>\n<li><strong><em>@WorkerThread</em></strong></li>\n<li><strong><em>@BinderThread</em></strong></li>\n</ol>\n<h3 id=\"4-Adding-Value-Constraint-Annotations\"><a href=\"#4-Adding-Value-Constraint-Annotations\" class=\"headerlink\" title=\"4. Adding Value Constraint Annotations\"></a>4. Adding Value Constraint Annotations</h3><ol>\n<li><strong><em>@IntRange</em></strong></li>\n<li><strong><em>@FloatRange</em></strong></li>\n<li><strong><em>@Size</em></strong><br>checks the size of a collection or array, as well as the length of a string</li>\n</ol>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void setAlpha(@IntRange(from=0,to=255)<span class=\"built_in\"> int </span>alpha) &#123; … &#125;</span><br><span class=\"line\"><span class=\"keyword\">.</span>..</span><br><span class=\"line\">int[] location =<span class=\"built_in\"> new </span>int[3];</span><br><span class=\"line\">button.getLocationOnScreen(@Size(min=1) location);</span><br><span class=\"line\">// @Size(2) annotation to validate that an<span class=\"built_in\"> array </span>contains exactly two values</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-Adding-Permission-Annotations\"><a href=\"#4-Adding-Permission-Annotations\" class=\"headerlink\" title=\"4. Adding Permission Annotations\"></a>4. Adding Permission Annotations</h3><ol>\n<li><p><strong><em>@RequiresPermission</em></strong></p>\n <figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequiresPermission</span>(Manifest.permission.SET_WALLPAPER)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setWallpaper</span><span class=\"params\">(Bitmap bitmap)</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong><em>allOf</em></strong></p>\n <figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequiresPermission</span>(allOf = &#123;</span><br><span class=\"line\">   \tManifest.permission.READ_EXTERNAL_STORAGE,</span><br><span class=\"line\">    Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">copyFile</span><span class=\"params\">(String dest, String source)</span> </span>&#123;</span><br><span class=\"line\">   \t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"5-Adding-CheckResults-Annotations\"><a href=\"#5-Adding-CheckResults-Annotations\" class=\"headerlink\" title=\"5. Adding CheckResults Annotations\"></a>5. Adding CheckResults Annotations</h3><p>确保返回值被使用。但是语法没搞明白。</p>\n<h3 id=\"6-Adding-CallSuper-Annotations\"><a href=\"#6-Adding-CallSuper-Annotations\" class=\"headerlink\" title=\"6. Adding CallSuper Annotations\"></a>6. Adding CallSuper Annotations</h3><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@CallSuper</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-Creating-Enumerated-Annotations\"><a href=\"#7-Creating-Enumerated-Annotations\" class=\"headerlink\" title=\"7. Creating Enumerated Annotations\"></a>7. Creating Enumerated Annotations</h3><p>我后来能用到这个语法吗。。呵呵呵呵</p>\n<h2 id=\"三、-DeepLink\"><a href=\"#三、-DeepLink\" class=\"headerlink\" title=\"三、 DeepLink\"></a>三、 DeepLink</h2><h3 id=\"1-Adding-an-Intent-Filter-for-Deep-Linking-and-Google-Search\"><a href=\"#1-Adding-an-Intent-Filter-for-Deep-Linking-and-Google-Search\" class=\"headerlink\" title=\"1. Adding an Intent Filter for Deep Linking and Google Search\"></a>1. Adding an Intent Filter for Deep Linking and Google Search</h3><p>更多信息参考<a href=\"https://developers.google.com/app-indexing/introduction。内容包括给Anroid和iOS添加深层连接和App\" target=\"_blank\" rel=\"external\">https://developers.google.com/app-indexing/introduction。内容包括给Anroid和iOS添加深层连接和App</a> Indexing。<br>AndroidManifest.xml中activity，generate Deep Link。实际上是添加intent-filter.</p>\n<pre><code><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.VIEW\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.BROWSABLE\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ATTENTION: This data URL was auto-generated. We recommend that you use the HTTP scheme.</span><br><span class=\"line\">      <span class=\"doctag\">TODO:</span> Change the host or pathPrefix as necessary. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">data</span></span><br><span class=\"line\">        <span class=\"attr\">android:host</span>=<span class=\"string\">\"penging.com\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:pathPrefix</span>=<span class=\"string\">\"/activityguide\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:scheme</span>=<span class=\"string\">\"http\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><p><strong><em>BROWSABLE</em></strong><br>若要能够从 Web 浏览器执行该 Intent，则必须将其设为 BROWSABLE。如果未设置，点击浏览器中的链接将无法解析到您的应用（在这种情况下，只有当前的移动 Web 浏览器能响应该 URL）。<br><strong><em>DEFAULT</em></strong><br>类别声明了您的应用可以对隐式 Intent 做出响应。<br><strong><em>data标签</em></strong><br>data标签必须有scheme属性；<br>android:path 属性或者其变体（pathPattern 或 pathPrefix）来区分对于不同的 URI 路径。</p>\n<h3 id=\"2-Testing-a-Deep-Link\"><a href=\"#2-Testing-a-Deep-Link\" class=\"headerlink\" title=\"2. Testing a Deep Link\"></a>2. Testing a Deep Link</h3><ol>\n<li>After opening a project, select Run &gt; Edit Configurations.</li>\n<li>In the Run/Debug Configurations dialog, beneath Android Application, select the module you want to test.</li>\n<li>Select the General tab.</li>\n<li>In the Launch field, select Deep Link. </li>\n</ol>\n<h2 id=\"四、-App-Indexing\"><a href=\"#四、-App-Indexing\" class=\"headerlink\" title=\"四、 App Indexing\"></a>四、 App Indexing</h2><h3 id=\"1-Add\"><a href=\"#1-Add\" class=\"headerlink\" title=\"1. Add\"></a>1. Add</h3><p>右击Activity可添加。<br>参考网址如文章开头简介。</p>\n<h3 id=\"2-Test\"><a href=\"#2-Test\" class=\"headerlink\" title=\"2. Test\"></a>2. Test</h3><p>Viewing App Indexing API Messages in the logcat Monitor.</p>\n","excerpt":"","more":"<p>Lint检查潜在错误、优化；Annotations优化参数定义，增加可读性；DeepLink实现Android和H5页面跳转；App Index可以网页搜索app内部的功能。Android和iOS都可添加deep link以及app index：<a href=\"https://developers.google.com/app-indexing/introduction。\">https://developers.google.com/app-indexing/introduction。</a></p>\n<h2 id=\"一、-Lint\"><a href=\"#一、-Lint\" class=\"headerlink\" title=\"一、 Lint\"></a>一、 Lint</h2><p>The Lint tool is a static code analysis tool that checks your Android project source files for potential bugs and optimization improvements.</p>\n<p>启动： Analyze -&gt; Inspect codes.<br>配置： File -&gt; Settings -&gt; Project Settings</p>\n<p><strong><em>检查的内容：</em></strong></p>\n<ol>\n<li>XML resource files contain unused namespaces</li>\n<li>使用的deprecated elements or API</li>\n</ol>\n<h2 id=\"二、-Annotations\"><a href=\"#二、-Annotations\" class=\"headerlink\" title=\"二、 Annotations\"></a>二、 Annotations</h2><p>Lint不能检查到的的正确性，比如xml中使用string的地方，引入了一个color。因为都是int型。<br>Add dependency import android.support.annotation.<br>Annotations allow you to provide hints to code inspections tools like lint, to help detect these, more subtle code problems. Annotations可以帮助Lint检查更多错误。</p>\n<h3 id=\"1-Adding-Resource-Annotations\"><a href=\"#1-Adding-Resource-Annotations\" class=\"headerlink\" title=\"1. Adding Resource Annotations\"></a>1. Adding Resource Annotations</h3><ol>\n<li><strong><em>@StringRes</em></strong><br>References a R.string resource.</li>\n<li><strong><em>@DrawableRes</em></strong><br>References a Drawable resource.</li>\n<li><strong><em>@ColorRes</em></strong><br>References a Color resource.</li>\n<li><strong><em>@InterpolatorRes</em></strong><br>References a Interpolator resource.</li>\n<li><strong><em>@AnyRes</em></strong><br>References any type of R. resource.</li>\n</ol>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.StringRes;</span><br><span class=\"line\">...</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setTitle</span><span class=\"params\">(@StringRes <span class=\"keyword\">int</span> resId)</span></span>;</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Adding-Nullness-Annotations\"><a href=\"#2-Adding-Nullness-Annotations\" class=\"headerlink\" title=\"2. Adding Nullness Annotations\"></a>2. Adding Nullness Annotations</h3><p>Add <strong><em>@Nullable</em></strong> and <strong><em>@NonNull</em></strong> annotations to check the nullness of a given variable, parameter, or return value.</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.NonNull;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Add support for inflating the &lt;fragment&gt; tag. */</span></span><br><span class=\"line\">    <span class=\"keyword\">@NonNull</span></span><br><span class=\"line\">    <span class=\"keyword\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> View onCreateView(String name, <span class=\"keyword\">@NonNull</span> Context context,</span><br><span class=\"line\">      <span class=\"keyword\">@NonNull</span> AttributeSet attrs) &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Adding-Thread-Annotations\"><a href=\"#3-Adding-Thread-Annotations\" class=\"headerlink\" title=\"3. Adding Thread Annotations\"></a>3. Adding Thread Annotations</h3><ol>\n<li><strong><em>@UiThread</em></strong></li>\n<li><strong><em>@MainThread</em></strong></li>\n<li><strong><em>@WorkerThread</em></strong></li>\n<li><strong><em>@BinderThread</em></strong></li>\n</ol>\n<h3 id=\"4-Adding-Value-Constraint-Annotations\"><a href=\"#4-Adding-Value-Constraint-Annotations\" class=\"headerlink\" title=\"4. Adding Value Constraint Annotations\"></a>4. Adding Value Constraint Annotations</h3><ol>\n<li><strong><em>@IntRange</em></strong></li>\n<li><strong><em>@FloatRange</em></strong></li>\n<li><strong><em>@Size</em></strong><br>checks the size of a collection or array, as well as the length of a string</li>\n</ol>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void setAlpha(@IntRange(from=0,to=255)<span class=\"built_in\"> int </span>alpha) &#123; … &#125;</span><br><span class=\"line\"><span class=\"keyword\">.</span>..</span><br><span class=\"line\">int[] location =<span class=\"built_in\"> new </span>int[3];</span><br><span class=\"line\">button.getLocationOnScreen(@Size(min=1) location);</span><br><span class=\"line\">// @Size(2) annotation to validate that an<span class=\"built_in\"> array </span>contains exactly two values</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-Adding-Permission-Annotations\"><a href=\"#4-Adding-Permission-Annotations\" class=\"headerlink\" title=\"4. Adding Permission Annotations\"></a>4. Adding Permission Annotations</h3><ol>\n<li><p><strong><em>@RequiresPermission</em></strong></p>\n <figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequiresPermission</span>(Manifest.permission.SET_WALLPAPER)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setWallpaper</span><span class=\"params\">(Bitmap bitmap)</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong><em>allOf</em></strong></p>\n <figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequiresPermission</span>(allOf = &#123;</span><br><span class=\"line\">   \tManifest.permission.READ_EXTERNAL_STORAGE,</span><br><span class=\"line\">    Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">copyFile</span><span class=\"params\">(String dest, String source)</span> </span>&#123;</span><br><span class=\"line\">   \t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"5-Adding-CheckResults-Annotations\"><a href=\"#5-Adding-CheckResults-Annotations\" class=\"headerlink\" title=\"5. Adding CheckResults Annotations\"></a>5. Adding CheckResults Annotations</h3><p>确保返回值被使用。但是语法没搞明白。</p>\n<h3 id=\"6-Adding-CallSuper-Annotations\"><a href=\"#6-Adding-CallSuper-Annotations\" class=\"headerlink\" title=\"6. Adding CallSuper Annotations\"></a>6. Adding CallSuper Annotations</h3><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@CallSuper</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-Creating-Enumerated-Annotations\"><a href=\"#7-Creating-Enumerated-Annotations\" class=\"headerlink\" title=\"7. Creating Enumerated Annotations\"></a>7. Creating Enumerated Annotations</h3><p>我后来能用到这个语法吗。。呵呵呵呵</p>\n<h2 id=\"三、-DeepLink\"><a href=\"#三、-DeepLink\" class=\"headerlink\" title=\"三、 DeepLink\"></a>三、 DeepLink</h2><h3 id=\"1-Adding-an-Intent-Filter-for-Deep-Linking-and-Google-Search\"><a href=\"#1-Adding-an-Intent-Filter-for-Deep-Linking-and-Google-Search\" class=\"headerlink\" title=\"1. Adding an Intent Filter for Deep Linking and Google Search\"></a>1. Adding an Intent Filter for Deep Linking and Google Search</h3><p>更多信息参考<a href=\"https://developers.google.com/app-indexing/introduction。内容包括给Anroid和iOS添加深层连接和App\">https://developers.google.com/app-indexing/introduction。内容包括给Anroid和iOS添加深层连接和App</a> Indexing。<br>AndroidManifest.xml中activity，generate Deep Link。实际上是添加intent-filter.</p>\n<pre><code><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.VIEW\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.BROWSABLE\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ATTENTION: This data URL was auto-generated. We recommend that you use the HTTP scheme.</span><br><span class=\"line\">      <span class=\"doctag\">TODO:</span> Change the host or pathPrefix as necessary. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">data</span></span><br><span class=\"line\">        <span class=\"attr\">android:host</span>=<span class=\"string\">\"penging.com\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:pathPrefix</span>=<span class=\"string\">\"/activityguide\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:scheme</span>=<span class=\"string\">\"http\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><p><strong><em>BROWSABLE</em></strong><br>若要能够从 Web 浏览器执行该 Intent，则必须将其设为 BROWSABLE。如果未设置，点击浏览器中的链接将无法解析到您的应用（在这种情况下，只有当前的移动 Web 浏览器能响应该 URL）。<br><strong><em>DEFAULT</em></strong><br>类别声明了您的应用可以对隐式 Intent 做出响应。<br><strong><em>data标签</em></strong><br>data标签必须有scheme属性；<br>android:path 属性或者其变体（pathPattern 或 pathPrefix）来区分对于不同的 URI 路径。</p>\n<h3 id=\"2-Testing-a-Deep-Link\"><a href=\"#2-Testing-a-Deep-Link\" class=\"headerlink\" title=\"2. Testing a Deep Link\"></a>2. Testing a Deep Link</h3><ol>\n<li>After opening a project, select Run &gt; Edit Configurations.</li>\n<li>In the Run/Debug Configurations dialog, beneath Android Application, select the module you want to test.</li>\n<li>Select the General tab.</li>\n<li>In the Launch field, select Deep Link. </li>\n</ol>\n<h2 id=\"四、-App-Indexing\"><a href=\"#四、-App-Indexing\" class=\"headerlink\" title=\"四、 App Indexing\"></a>四、 App Indexing</h2><h3 id=\"1-Add\"><a href=\"#1-Add\" class=\"headerlink\" title=\"1. Add\"></a>1. Add</h3><p>右击Activity可添加。<br>参考网址如文章开头简介。</p>\n<h3 id=\"2-Test\"><a href=\"#2-Test\" class=\"headerlink\" title=\"2. Test\"></a>2. Test</h3><p>Viewing App Indexing API Messages in the logcat Monitor.</p>\n"},{"title":"Android-Displaying-Bitmap-Efficiently","date":"2016-03-31T10:31:43.000Z","_content":"在手机上的内存有限，而图片资源占用空间极大 。比如Galaxy Nexus的camera占用2592x1936 pixels。如果使用ARGB_888，将占用19MB空间（2592x1936x4bytes）。尤其在listview，gridview中。还没看完～～\n\n## 一、 Loading Large Bitmaps Efficiently\n\n在内存加载分辨率合适的图片，而不是清晰度最高的图片。\n\n### 1. 尺寸压缩\n\n```\npublic static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight){\n\t\n\tfinal int halfHeight = options.outHeight / 2;\n\tfinal int halfWidth = options.outWidth / 2;\n\t\n\tint inSampleSize = 1;\n\t\n\t\t\n\twhile( (halfHeight/inSampleSize) > reqHeight  \n\t\t&& (halfWidth/inSampleSize) > reqWidth ){\n\t\t\n\t\t\tinSampleSize *= 2;\n\t}\n\n\treturn inSampleSize;\n\n}\n\n//public static Bitmap decodeSampleBitmapFrom**** 可有多个实现\n// 其实这个方法最好不要在ui主线程执行\npublic static Bitmap decodeSampleBitmapFromResource(Resources res, int resId, int reqWidth, int reqHeight){\n\n\tfinal BitmapFactory.Options options = new BitmapFactory.Options();\n\t\n\toptions.inJustDecodeBounds = true;\n\tBitmapFactory.decodeResource(res, resId, options);\n\t\n\toptions.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);\n\t\n\toptions.inJustDecodeBounds = false;\n\t\n\treturn BitmapFactory.decodeResource(res, resId, options);\n\n}\n\n\n\nimgView.setImageBitmap(decodeSampleBitmapFromResource(getResources(), R.id.myimage, 100,100));\n\n```\n\n\n## 二、 Processing Bitmaps Off the UI Thread\n\n```\n// 把decode放到AsyncTask里执行\n    class BitmapWorkerTask extends AsyncTask<Integer, Void, Bitmap> {\n\n\n        private final WeakReference<ImageView> weakReference;\n\n        public BitmapWorkerTask(ImageView imgView) {\n            weakReference = new WeakReference<ImageView>(imgView);\n        }\n\n        @Override\n        protected Bitmap doInBackground(Integer... params) {\n            return decodeSampleBitmapFromResource(getResources(), params[0], 100, 100);\n        }\n\n        @Override\n        protected void onPostExecute(Bitmap bitmap){\n            if(null != weakReference && null != bitmap){\n\n\n                final ImageView imageView = weakReference.get();\n                if(null != imageView){\n                    imageView.setImageBitmap(bitmap);\n                }\n            }\n        }\n    }\n\n// 注意 如果是刷新，那么AsyncTask会启动多次，注意处理不要重复启动的问题\n\n\n```\nGoogle案例：\n[Handling Concurrency](http://developer.android.com/training/displaying-bitmaps/process-bitmap.html#concurrency)    \n深入探索：\n[Multithreading for Performance](http://android-developers.blogspot.com/2010/07/multithreading-for-performance.html)\n\n\n## 三、 Caching Bitmaps\n\n用内存和硬盘缓存来完成listview等滑动造成的view加载问题。\n\n### 1. Use a Memory Cache\n\n以前是是用软引用和弱引用实现内存缓存，但是Android 2.3之后GC会更主动的去回收软引用和弱引用。3.0之后，bitmap存到本地内存中，使用不当会导致内存溢出。On a normal/hdpi device this is a minimum of around 4MB (32/8). A full screen GridView filled with images on a device with 800x480 resolution would use around 1.5MB (800*480*4 bytes), so this would cache a minimum of around 2.5 pages of images in memory.\n\n现在是使用强引用***LinkedHashMap***实现的LruCache来实现。\n\n```\nprivate LruCache<String, Bitmap> mMemoryCache;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    ...\n    // Get max available VM memory, exceeding this amount will throw an\n    // OutOfMemory exception. Stored in kilobytes as LruCache takes an\n    // int in its constructor.\n    final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);\n\n    // Use 1/8th of the available memory for this memory cache.\n    final int cacheSize = maxMemory / 8;\n\n    mMemoryCache = new LruCache<String, Bitmap>(cacheSize) {\n        @Override\n        protected int sizeOf(String key, Bitmap bitmap) {\n            // The cache size will be measured in kilobytes rather than\n            // number of items.\n            return bitmap.getByteCount() / 1024;\n        }\n    };\n    ...\n}\n\npublic void addBitmapToMemoryCache(String key, Bitmap bitmap) {\n    if (getBitmapFromMemCache(key) == null) {\n        mMemoryCache.put(key, bitmap);\n    }\n}\n\npublic Bitmap getBitmapFromMemCache(String key) {\n    return mMemoryCache.get(key);\n}\n\n```\n\n### 2. Use a Disk Cache\n\n\nFetching images from disk is slower than loading from memory and ***should be done in a background thread***, as disk read times can be unpredictable.\n\n***Note:*** A ContentProvider might be a more appropriate place to store cached images if they are accessed more frequently, for example in an image gallery application.\n\n\n//[代码参考](http://developer.android.com/training/displaying-bitmaps/cache-bitmap.html#disk-cache)\n\n\n### 3. 横竖屏切换\n\nfragment里setRetainInstance(true)保持fragment不被销毁。复用更有效率。\n\n```\nprivate LruCache<String, Bitmap> mMemoryCache;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    ...\n    RetainFragment retainFragment =\n            RetainFragment.findOrCreateRetainFragment(getFragmentManager());\n    mMemoryCache = retainFragment.mRetainedCache;\n    if (mMemoryCache == null) {\n        mMemoryCache = new LruCache<String, Bitmap>(cacheSize) {\n            ... // Initialize cache here as usual\n        }\n        retainFragment.mRetainedCache = mMemoryCache;\n    }\n    ...\n}\n\nclass RetainFragment extends Fragment {\n    private static final String TAG = \"RetainFragment\";\n    public LruCache<String, Bitmap> mRetainedCache;\n\n    public RetainFragment() {}\n\n    public static RetainFragment findOrCreateRetainFragment(FragmentManager fm) {\n        RetainFragment fragment = (RetainFragment) fm.findFragmentByTag(TAG);\n        if (fragment == null) {\n            fragment = new RetainFragment();\n            fm.beginTransaction().add(fragment, TAG).commit();\n        }\n        return fragment;\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setRetainInstance(true);\n    }\n}\n```\n\n## 四、 Managing Bitmap Memory\n\n\n\n\n## 五、 Displaying Bitmaps in Your UI","source":"_posts/android-displaying-bitmap-efficiently.md","raw":"title: Android-Displaying-Bitmap-Efficiently\ncategories:\n\t- Android\ntags:\n\t- Android\n\t- Optimization\ndate: 2016-03-31 18:31:43\n---\n在手机上的内存有限，而图片资源占用空间极大 。比如Galaxy Nexus的camera占用2592x1936 pixels。如果使用ARGB_888，将占用19MB空间（2592x1936x4bytes）。尤其在listview，gridview中。还没看完～～\n\n## 一、 Loading Large Bitmaps Efficiently\n\n在内存加载分辨率合适的图片，而不是清晰度最高的图片。\n\n### 1. 尺寸压缩\n\n```\npublic static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight){\n\t\n\tfinal int halfHeight = options.outHeight / 2;\n\tfinal int halfWidth = options.outWidth / 2;\n\t\n\tint inSampleSize = 1;\n\t\n\t\t\n\twhile( (halfHeight/inSampleSize) > reqHeight  \n\t\t&& (halfWidth/inSampleSize) > reqWidth ){\n\t\t\n\t\t\tinSampleSize *= 2;\n\t}\n\n\treturn inSampleSize;\n\n}\n\n//public static Bitmap decodeSampleBitmapFrom**** 可有多个实现\n// 其实这个方法最好不要在ui主线程执行\npublic static Bitmap decodeSampleBitmapFromResource(Resources res, int resId, int reqWidth, int reqHeight){\n\n\tfinal BitmapFactory.Options options = new BitmapFactory.Options();\n\t\n\toptions.inJustDecodeBounds = true;\n\tBitmapFactory.decodeResource(res, resId, options);\n\t\n\toptions.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);\n\t\n\toptions.inJustDecodeBounds = false;\n\t\n\treturn BitmapFactory.decodeResource(res, resId, options);\n\n}\n\n\n\nimgView.setImageBitmap(decodeSampleBitmapFromResource(getResources(), R.id.myimage, 100,100));\n\n```\n\n\n## 二、 Processing Bitmaps Off the UI Thread\n\n```\n// 把decode放到AsyncTask里执行\n    class BitmapWorkerTask extends AsyncTask<Integer, Void, Bitmap> {\n\n\n        private final WeakReference<ImageView> weakReference;\n\n        public BitmapWorkerTask(ImageView imgView) {\n            weakReference = new WeakReference<ImageView>(imgView);\n        }\n\n        @Override\n        protected Bitmap doInBackground(Integer... params) {\n            return decodeSampleBitmapFromResource(getResources(), params[0], 100, 100);\n        }\n\n        @Override\n        protected void onPostExecute(Bitmap bitmap){\n            if(null != weakReference && null != bitmap){\n\n\n                final ImageView imageView = weakReference.get();\n                if(null != imageView){\n                    imageView.setImageBitmap(bitmap);\n                }\n            }\n        }\n    }\n\n// 注意 如果是刷新，那么AsyncTask会启动多次，注意处理不要重复启动的问题\n\n\n```\nGoogle案例：\n[Handling Concurrency](http://developer.android.com/training/displaying-bitmaps/process-bitmap.html#concurrency)    \n深入探索：\n[Multithreading for Performance](http://android-developers.blogspot.com/2010/07/multithreading-for-performance.html)\n\n\n## 三、 Caching Bitmaps\n\n用内存和硬盘缓存来完成listview等滑动造成的view加载问题。\n\n### 1. Use a Memory Cache\n\n以前是是用软引用和弱引用实现内存缓存，但是Android 2.3之后GC会更主动的去回收软引用和弱引用。3.0之后，bitmap存到本地内存中，使用不当会导致内存溢出。On a normal/hdpi device this is a minimum of around 4MB (32/8). A full screen GridView filled with images on a device with 800x480 resolution would use around 1.5MB (800*480*4 bytes), so this would cache a minimum of around 2.5 pages of images in memory.\n\n现在是使用强引用***LinkedHashMap***实现的LruCache来实现。\n\n```\nprivate LruCache<String, Bitmap> mMemoryCache;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    ...\n    // Get max available VM memory, exceeding this amount will throw an\n    // OutOfMemory exception. Stored in kilobytes as LruCache takes an\n    // int in its constructor.\n    final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);\n\n    // Use 1/8th of the available memory for this memory cache.\n    final int cacheSize = maxMemory / 8;\n\n    mMemoryCache = new LruCache<String, Bitmap>(cacheSize) {\n        @Override\n        protected int sizeOf(String key, Bitmap bitmap) {\n            // The cache size will be measured in kilobytes rather than\n            // number of items.\n            return bitmap.getByteCount() / 1024;\n        }\n    };\n    ...\n}\n\npublic void addBitmapToMemoryCache(String key, Bitmap bitmap) {\n    if (getBitmapFromMemCache(key) == null) {\n        mMemoryCache.put(key, bitmap);\n    }\n}\n\npublic Bitmap getBitmapFromMemCache(String key) {\n    return mMemoryCache.get(key);\n}\n\n```\n\n### 2. Use a Disk Cache\n\n\nFetching images from disk is slower than loading from memory and ***should be done in a background thread***, as disk read times can be unpredictable.\n\n***Note:*** A ContentProvider might be a more appropriate place to store cached images if they are accessed more frequently, for example in an image gallery application.\n\n\n//[代码参考](http://developer.android.com/training/displaying-bitmaps/cache-bitmap.html#disk-cache)\n\n\n### 3. 横竖屏切换\n\nfragment里setRetainInstance(true)保持fragment不被销毁。复用更有效率。\n\n```\nprivate LruCache<String, Bitmap> mMemoryCache;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    ...\n    RetainFragment retainFragment =\n            RetainFragment.findOrCreateRetainFragment(getFragmentManager());\n    mMemoryCache = retainFragment.mRetainedCache;\n    if (mMemoryCache == null) {\n        mMemoryCache = new LruCache<String, Bitmap>(cacheSize) {\n            ... // Initialize cache here as usual\n        }\n        retainFragment.mRetainedCache = mMemoryCache;\n    }\n    ...\n}\n\nclass RetainFragment extends Fragment {\n    private static final String TAG = \"RetainFragment\";\n    public LruCache<String, Bitmap> mRetainedCache;\n\n    public RetainFragment() {}\n\n    public static RetainFragment findOrCreateRetainFragment(FragmentManager fm) {\n        RetainFragment fragment = (RetainFragment) fm.findFragmentByTag(TAG);\n        if (fragment == null) {\n            fragment = new RetainFragment();\n            fm.beginTransaction().add(fragment, TAG).commit();\n        }\n        return fragment;\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setRetainInstance(true);\n    }\n}\n```\n\n## 四、 Managing Bitmap Memory\n\n\n\n\n## 五、 Displaying Bitmaps in Your UI","slug":"android-displaying-bitmap-efficiently","published":1,"updated":"2016-04-11T02:26:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimx9usk10008j9v80odi6wj6","content":"<p>在手机上的内存有限，而图片资源占用空间极大 。比如Galaxy Nexus的camera占用2592x1936 pixels。如果使用ARGB_888，将占用19MB空间（2592x1936x4bytes）。尤其在listview，gridview中。还没看完～～</p>\n<h2 id=\"一、-Loading-Large-Bitmaps-Efficiently\"><a href=\"#一、-Loading-Large-Bitmaps-Efficiently\" class=\"headerlink\" title=\"一、 Loading Large Bitmaps Efficiently\"></a>一、 Loading Large Bitmaps Efficiently</h2><p>在内存加载分辨率合适的图片，而不是清晰度最高的图片。</p>\n<h3 id=\"1-尺寸压缩\"><a href=\"#1-尺寸压缩\" class=\"headerlink\" title=\"1. 尺寸压缩\"></a>1. 尺寸压缩</h3><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">calculateInSampleSize</span><span class=\"params\">(BitmapFactory.Options options, <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight)</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> halfHeight = options.outHeight / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> halfWidth = options.outWidth / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> inSampleSize = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>( (halfHeight/inSampleSize) &gt; reqHeight  </span><br><span class=\"line\">\t\t&amp;&amp; (halfWidth/inSampleSize) &gt; reqWidth )&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\tinSampleSize *= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> inSampleSize;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//public static Bitmap decodeSampleBitmapFrom**** 可有多个实现</span></span><br><span class=\"line\"><span class=\"comment\">// 其实这个方法最好不要在ui主线程执行</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\">Bitmap <span class=\"title\">decodeSampleBitmapFromResource</span><span class=\"params\">(Resources res, <span class=\"keyword\">int</span> resId, <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">final</span> BitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\toptions.inJustDecodeBounds = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\tBitmapFactory.decodeResource(res, resId, options);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\toptions.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\toptions.inJustDecodeBounds = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">return</span> BitmapFactory.<span class=\"title\">decodeResource</span><span class=\"params\">(res, resId, options)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">imgView.setImageBitmap(decodeSampleBitmapFromResource(getResources(), R.id.myimage, <span class=\"number\">100</span>,<span class=\"number\">100</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、-Processing-Bitmaps-Off-the-UI-Thread\"><a href=\"#二、-Processing-Bitmaps-Off-the-UI-Thread\" class=\"headerlink\" title=\"二、 Processing Bitmaps Off the UI Thread\"></a>二、 Processing Bitmaps Off the UI Thread</h2><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 把decode放到AsyncTask里执行</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapWorkerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask&lt;Integer</span>, <span class=\"title\">Void</span>, <span class=\"title\">Bitmap&gt;</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">WeakReference</span>&lt;<span class=\"type\">ImageView</span>&gt; weakReference;</span><br><span class=\"line\"></span><br><span class=\"line\">        public <span class=\"type\">BitmapWorkerTask</span>(<span class=\"type\">ImageView</span> imgView) &#123;</span><br><span class=\"line\">            weakReference = <span class=\"keyword\">new</span> <span class=\"type\">WeakReference</span>&lt;<span class=\"type\">ImageView</span>&gt;(imgView);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"type\">Bitmap</span> doInBackground(<span class=\"type\">Integer</span>... params) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> decodeSampleBitmapFromResource(getResources(), params[<span class=\"number\">0</span>], <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> void onPostExecute(<span class=\"type\">Bitmap</span> bitmap)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"literal\">null</span> != weakReference &amp;&amp; <span class=\"literal\">null</span> != bitmap)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">ImageView</span> imageView = weakReference.get();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"literal\">null</span> != imageView)&#123;</span><br><span class=\"line\">                    imageView.setImageBitmap(bitmap);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意 如果是刷新，那么AsyncTask会启动多次，注意处理不要重复启动的问题</span></span><br></pre></td></tr></table></figure>\n<p>Google案例：<br><a href=\"http://developer.android.com/training/displaying-bitmaps/process-bitmap.html#concurrency\" target=\"_blank\" rel=\"external\">Handling Concurrency</a><br>深入探索：<br><a href=\"http://android-developers.blogspot.com/2010/07/multithreading-for-performance.html\" target=\"_blank\" rel=\"external\">Multithreading for Performance</a></p>\n<h2 id=\"三、-Caching-Bitmaps\"><a href=\"#三、-Caching-Bitmaps\" class=\"headerlink\" title=\"三、 Caching Bitmaps\"></a>三、 Caching Bitmaps</h2><p>用内存和硬盘缓存来完成listview等滑动造成的view加载问题。</p>\n<h3 id=\"1-Use-a-Memory-Cache\"><a href=\"#1-Use-a-Memory-Cache\" class=\"headerlink\" title=\"1. Use a Memory Cache\"></a>1. Use a Memory Cache</h3><p>以前是是用软引用和弱引用实现内存缓存，但是Android 2.3之后GC会更主动的去回收软引用和弱引用。3.0之后，bitmap存到本地内存中，使用不当会导致内存溢出。On a normal/hdpi device this is a minimum of around 4MB (32/8). A full screen GridView filled with images on a device with 800x480 resolution would use around 1.5MB (800<em>480</em>4 bytes), so this would cache a minimum of around 2.5 pages of images in memory.</p>\n<p>现在是使用强引用<strong><em>LinkedHashMap</em></strong>实现的LruCache来实现。</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> LruCache&lt;<span class=\"keyword\">String</span>, Bitmap&gt; mMemoryCache;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// Get max available VM memory, exceeding this amount will throw an</span></span><br><span class=\"line\">    <span class=\"comment\">// OutOfMemory exception. Stored in kilobytes as LruCache takes an</span></span><br><span class=\"line\">    <span class=\"comment\">// int in its constructor.</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> maxMemory = (<span class=\"built_in\">int</span>) (Runtime.getRuntime().maxMemory() / <span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Use 1/8th of the available memory for this memory cache.</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> cacheSize = maxMemory / <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    mMemoryCache = <span class=\"keyword\">new</span> LruCache&lt;<span class=\"keyword\">String</span>, Bitmap&gt;(cacheSize) &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"built_in\">int</span> sizeOf(<span class=\"keyword\">String</span> <span class=\"built_in\">key</span>, Bitmap bitmap) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// The cache size will be measured in kilobytes rather than</span></span><br><span class=\"line\">            <span class=\"comment\">// number of items.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> bitmap.getByteCount() / <span class=\"number\">1024</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> addBitmapToMemoryCache(<span class=\"keyword\">String</span> <span class=\"built_in\">key</span>, Bitmap bitmap) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getBitmapFromMemCache(<span class=\"built_in\">key</span>) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        mMemoryCache.put(<span class=\"built_in\">key</span>, bitmap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> Bitmap getBitmapFromMemCache(<span class=\"keyword\">String</span> <span class=\"built_in\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mMemoryCache.<span class=\"built_in\">get</span>(<span class=\"built_in\">key</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Use-a-Disk-Cache\"><a href=\"#2-Use-a-Disk-Cache\" class=\"headerlink\" title=\"2. Use a Disk Cache\"></a>2. Use a Disk Cache</h3><p>Fetching images from disk is slower than loading from memory and <strong><em>should be done in a background thread</em></strong>, as disk read times can be unpredictable.</p>\n<p><strong><em>Note:</em></strong> A ContentProvider might be a more appropriate place to store cached images if they are accessed more frequently, for example in an image gallery application.</p>\n<p>//<a href=\"http://developer.android.com/training/displaying-bitmaps/cache-bitmap.html#disk-cache\" target=\"_blank\" rel=\"external\">代码参考</a></p>\n<h3 id=\"3-横竖屏切换\"><a href=\"#3-横竖屏切换\" class=\"headerlink\" title=\"3. 横竖屏切换\"></a>3. 横竖屏切换</h3><p>fragment里setRetainInstance(true)保持fragment不被销毁。复用更有效率。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> LruCache&lt;String, Bitmap&gt; mMemoryCache;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    RetainFragment retainFragment =</span><br><span class=\"line\">            RetainFragment.findOrCreateRetainFragment(getFragmentManager());</span><br><span class=\"line\">    mMemoryCache = retainFragment.mRetainedCache;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mMemoryCache == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        mMemoryCache = <span class=\"keyword\">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</span><br><span class=\"line\">            ... <span class=\"comment\">// Initialize cache here as usual</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        retainFragment.mRetainedCache = mMemoryCache;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RetainFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"RetainFragment\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> LruCache&lt;String, Bitmap&gt; mRetainedCache;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RetainFragment</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RetainFragment <span class=\"title\">findOrCreateRetainFragment</span><span class=\"params\">(FragmentManager fm)</span> </span>&#123;</span><br><span class=\"line\">        RetainFragment fragment = (RetainFragment) fm.findFragmentByTag(TAG);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fragment == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            fragment = <span class=\"keyword\">new</span> RetainFragment();</span><br><span class=\"line\">            fm.beginTransaction().add(fragment, TAG).commit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fragment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setRetainInstance(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、-Managing-Bitmap-Memory\"><a href=\"#四、-Managing-Bitmap-Memory\" class=\"headerlink\" title=\"四、 Managing Bitmap Memory\"></a>四、 Managing Bitmap Memory</h2><h2 id=\"五、-Displaying-Bitmaps-in-Your-UI\"><a href=\"#五、-Displaying-Bitmaps-in-Your-UI\" class=\"headerlink\" title=\"五、 Displaying Bitmaps in Your UI\"></a>五、 Displaying Bitmaps in Your UI</h2>","excerpt":"","more":"<p>在手机上的内存有限，而图片资源占用空间极大 。比如Galaxy Nexus的camera占用2592x1936 pixels。如果使用ARGB_888，将占用19MB空间（2592x1936x4bytes）。尤其在listview，gridview中。还没看完～～</p>\n<h2 id=\"一、-Loading-Large-Bitmaps-Efficiently\"><a href=\"#一、-Loading-Large-Bitmaps-Efficiently\" class=\"headerlink\" title=\"一、 Loading Large Bitmaps Efficiently\"></a>一、 Loading Large Bitmaps Efficiently</h2><p>在内存加载分辨率合适的图片，而不是清晰度最高的图片。</p>\n<h3 id=\"1-尺寸压缩\"><a href=\"#1-尺寸压缩\" class=\"headerlink\" title=\"1. 尺寸压缩\"></a>1. 尺寸压缩</h3><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">calculateInSampleSize</span><span class=\"params\">(BitmapFactory.Options options, <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight)</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> halfHeight = options.outHeight / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> halfWidth = options.outWidth / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> inSampleSize = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>( (halfHeight/inSampleSize) &gt; reqHeight  </span><br><span class=\"line\">\t\t&amp;&amp; (halfWidth/inSampleSize) &gt; reqWidth )&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\tinSampleSize *= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> inSampleSize;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//public static Bitmap decodeSampleBitmapFrom**** 可有多个实现</span></span><br><span class=\"line\"><span class=\"comment\">// 其实这个方法最好不要在ui主线程执行</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\">Bitmap <span class=\"title\">decodeSampleBitmapFromResource</span><span class=\"params\">(Resources res, <span class=\"keyword\">int</span> resId, <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">final</span> BitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\toptions.inJustDecodeBounds = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\tBitmapFactory.decodeResource(res, resId, options);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\toptions.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\toptions.inJustDecodeBounds = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">return</span> BitmapFactory.<span class=\"title\">decodeResource</span><span class=\"params\">(res, resId, options)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">imgView.setImageBitmap(decodeSampleBitmapFromResource(getResources(), R.id.myimage, <span class=\"number\">100</span>,<span class=\"number\">100</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、-Processing-Bitmaps-Off-the-UI-Thread\"><a href=\"#二、-Processing-Bitmaps-Off-the-UI-Thread\" class=\"headerlink\" title=\"二、 Processing Bitmaps Off the UI Thread\"></a>二、 Processing Bitmaps Off the UI Thread</h2><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 把decode放到AsyncTask里执行</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapWorkerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask&lt;Integer</span>, <span class=\"title\">Void</span>, <span class=\"title\">Bitmap&gt;</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">WeakReference</span>&lt;<span class=\"type\">ImageView</span>&gt; weakReference;</span><br><span class=\"line\"></span><br><span class=\"line\">        public <span class=\"type\">BitmapWorkerTask</span>(<span class=\"type\">ImageView</span> imgView) &#123;</span><br><span class=\"line\">            weakReference = <span class=\"keyword\">new</span> <span class=\"type\">WeakReference</span>&lt;<span class=\"type\">ImageView</span>&gt;(imgView);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"type\">Bitmap</span> doInBackground(<span class=\"type\">Integer</span>... params) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> decodeSampleBitmapFromResource(getResources(), params[<span class=\"number\">0</span>], <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> void onPostExecute(<span class=\"type\">Bitmap</span> bitmap)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"literal\">null</span> != weakReference &amp;&amp; <span class=\"literal\">null</span> != bitmap)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">ImageView</span> imageView = weakReference.get();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"literal\">null</span> != imageView)&#123;</span><br><span class=\"line\">                    imageView.setImageBitmap(bitmap);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意 如果是刷新，那么AsyncTask会启动多次，注意处理不要重复启动的问题</span></span><br></pre></td></tr></table></figure>\n<p>Google案例：<br><a href=\"http://developer.android.com/training/displaying-bitmaps/process-bitmap.html#concurrency\">Handling Concurrency</a><br>深入探索：<br><a href=\"http://android-developers.blogspot.com/2010/07/multithreading-for-performance.html\">Multithreading for Performance</a></p>\n<h2 id=\"三、-Caching-Bitmaps\"><a href=\"#三、-Caching-Bitmaps\" class=\"headerlink\" title=\"三、 Caching Bitmaps\"></a>三、 Caching Bitmaps</h2><p>用内存和硬盘缓存来完成listview等滑动造成的view加载问题。</p>\n<h3 id=\"1-Use-a-Memory-Cache\"><a href=\"#1-Use-a-Memory-Cache\" class=\"headerlink\" title=\"1. Use a Memory Cache\"></a>1. Use a Memory Cache</h3><p>以前是是用软引用和弱引用实现内存缓存，但是Android 2.3之后GC会更主动的去回收软引用和弱引用。3.0之后，bitmap存到本地内存中，使用不当会导致内存溢出。On a normal/hdpi device this is a minimum of around 4MB (32/8). A full screen GridView filled with images on a device with 800x480 resolution would use around 1.5MB (800<em>480</em>4 bytes), so this would cache a minimum of around 2.5 pages of images in memory.</p>\n<p>现在是使用强引用<strong><em>LinkedHashMap</em></strong>实现的LruCache来实现。</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> LruCache&lt;<span class=\"keyword\">String</span>, Bitmap&gt; mMemoryCache;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// Get max available VM memory, exceeding this amount will throw an</span></span><br><span class=\"line\">    <span class=\"comment\">// OutOfMemory exception. Stored in kilobytes as LruCache takes an</span></span><br><span class=\"line\">    <span class=\"comment\">// int in its constructor.</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> maxMemory = (<span class=\"built_in\">int</span>) (Runtime.getRuntime().maxMemory() / <span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Use 1/8th of the available memory for this memory cache.</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> cacheSize = maxMemory / <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    mMemoryCache = <span class=\"keyword\">new</span> LruCache&lt;<span class=\"keyword\">String</span>, Bitmap&gt;(cacheSize) &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"built_in\">int</span> sizeOf(<span class=\"keyword\">String</span> <span class=\"built_in\">key</span>, Bitmap bitmap) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// The cache size will be measured in kilobytes rather than</span></span><br><span class=\"line\">            <span class=\"comment\">// number of items.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> bitmap.getByteCount() / <span class=\"number\">1024</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> addBitmapToMemoryCache(<span class=\"keyword\">String</span> <span class=\"built_in\">key</span>, Bitmap bitmap) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getBitmapFromMemCache(<span class=\"built_in\">key</span>) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        mMemoryCache.put(<span class=\"built_in\">key</span>, bitmap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> Bitmap getBitmapFromMemCache(<span class=\"keyword\">String</span> <span class=\"built_in\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mMemoryCache.<span class=\"built_in\">get</span>(<span class=\"built_in\">key</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Use-a-Disk-Cache\"><a href=\"#2-Use-a-Disk-Cache\" class=\"headerlink\" title=\"2. Use a Disk Cache\"></a>2. Use a Disk Cache</h3><p>Fetching images from disk is slower than loading from memory and <strong><em>should be done in a background thread</em></strong>, as disk read times can be unpredictable.</p>\n<p><strong><em>Note:</em></strong> A ContentProvider might be a more appropriate place to store cached images if they are accessed more frequently, for example in an image gallery application.</p>\n<p>//<a href=\"http://developer.android.com/training/displaying-bitmaps/cache-bitmap.html#disk-cache\">代码参考</a></p>\n<h3 id=\"3-横竖屏切换\"><a href=\"#3-横竖屏切换\" class=\"headerlink\" title=\"3. 横竖屏切换\"></a>3. 横竖屏切换</h3><p>fragment里setRetainInstance(true)保持fragment不被销毁。复用更有效率。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> LruCache&lt;String, Bitmap&gt; mMemoryCache;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    RetainFragment retainFragment =</span><br><span class=\"line\">            RetainFragment.findOrCreateRetainFragment(getFragmentManager());</span><br><span class=\"line\">    mMemoryCache = retainFragment.mRetainedCache;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mMemoryCache == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        mMemoryCache = <span class=\"keyword\">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</span><br><span class=\"line\">            ... <span class=\"comment\">// Initialize cache here as usual</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        retainFragment.mRetainedCache = mMemoryCache;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RetainFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"RetainFragment\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> LruCache&lt;String, Bitmap&gt; mRetainedCache;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RetainFragment</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RetainFragment <span class=\"title\">findOrCreateRetainFragment</span><span class=\"params\">(FragmentManager fm)</span> </span>&#123;</span><br><span class=\"line\">        RetainFragment fragment = (RetainFragment) fm.findFragmentByTag(TAG);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fragment == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            fragment = <span class=\"keyword\">new</span> RetainFragment();</span><br><span class=\"line\">            fm.beginTransaction().add(fragment, TAG).commit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fragment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setRetainInstance(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、-Managing-Bitmap-Memory\"><a href=\"#四、-Managing-Bitmap-Memory\" class=\"headerlink\" title=\"四、 Managing Bitmap Memory\"></a>四、 Managing Bitmap Memory</h2><h2 id=\"五、-Displaying-Bitmaps-in-Your-UI\"><a href=\"#五、-Displaying-Bitmaps-in-Your-UI\" class=\"headerlink\" title=\"五、 Displaying Bitmaps in Your UI\"></a>五、 Displaying Bitmaps in Your UI</h2>"},{"title":"Android-Fragment","date":"2016-03-11T09:08:09.000Z","_content":"收录于Fragment相关的内容，如生命周期，如何添加到activity，fragment通讯等。\n## 一、 Fragmentst Lifecycle\n\n1. A fragment must always be embedded in an activity and the fragment's lifecycle is directly affected by the host activity's lifecycle. For example, when the activity is paused, so are all fragments in it, and when the activity is destroyed, so are all fragments. \n2. You can also ***add it to a back stack***. The back stack allows the user to reverse a fragment transaction (navigate backwards), by pressing the Back button.\n3. ***onCreate()*** : initialize essential components of the fragment that you want to retain when the fragment is paused or stopped, then resumed.除了view之外的做出实话\n4. ***onCreateView()*** : return a View from this method that is the root of your fragment's layout.\n5. You can ***save the state during the fragment's onSaveInstanceState()*** callback and ***restore it during either onCreate(), onCreateView(), or onActivityCreated()***.\n6. 只有Activity resume之后，才能操作fragment，否则fragment生命周期跟随anctivity不能操作，如在onPause，onStop等。\n7. setretaininstance(true)，横竖屏切换的时候fragment不会被销毁，数据都会被保存下来。这样其中的imgView、editText等内存状态都还在内存。\n\n![Fragmentst Lifecycle](https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-fragment/fragment_lifecycle.png?raw=true)   \n\n## 二、 subclasses:\n* DialogFragment\n* ListFragment\n* PreferenceFragment\n\n\n## 三、Adding a fragment to an activity\n\n### 1. Declare the fragment inside the activity's layout file.\n\nWhen you add a fragment to an activity layout by defining the fragment in the layout XML file, you cannot remove the fragment at runtime. \n\n```\n\t\t<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    \tandroid:orientation=\"horizontal\"\n    \tandroid:layout_width=\"match_parent\"\n    \tandroid:layout_height=\"match_parent\">\n    \t<fragment android:name=\"com.example.news.ArticleReaderFragment\"\n            android:id=\"@+id/viewer\"\n            android:layout_weight=\"2\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"match_parent\" />\n\t\t</LinearLayout>\n```\n\t\t\nEach fragment requires a unique identifier that the system can use to restore the fragment if the activity is restarted (and which you can use to capture the fragment to perform transactions, such as remove it). There are ***three ways to provide an ID for a fragment***:\n\n   * Supply the android:id attribute with a unique ID.\n   * Supply the android:tag attribute with a unique string.\n   * If you provide neither of the previous two, the system uses the ID of the container view.\n   \n\n\n### 2. programmatically add the fragment to an existing ViewGroup.\n```\n    \tFragmentManager fragmentManager = getFragmentManager();\n    \tFragmentTransaction fragmentTransaction = \t\tfragmentManager.beginTransaction();\n    \tExampleFragment fragment = new ExampleFragment();\n    \tfragmentTransaction.add(R.id.fragment_container, fragment);\n    \tfragmentTransaction.commit();\n```\n### 3、Adding a fragment without a UI\n\n1. you can also use a fragment to ***provide a background behavior for the activity without presenting additional UI***.\n2. To add a fragment without a UI, add the fragment from the activity using ***add(Fragment, String) (supplying a unique string \"tag\" for the fragment, rather than a view ID)***. This adds the fragment, but, because it's not associated with a view in the activity layout, ***it does not receive a call to onCreateView(). So you don't need to implement that method***.\n3. If you want to get the fragment from the activity later, you need to use ***findFragmentByTag()***.\n\n## 四、 Performing Fragment Transactions\n\n1.  using methods such as add(), remove(), and replace(). Then, to apply the transaction to the activity, ***you must call commit()***.\n2.  you might want to call ***addToBackStack()***, in order to add the transaction to a back stack of fragment transactions. ***This back stack is managed by the activity and allows the user to return to the previous fragment state, by pressing the Back button***. \n\n    ```\n\t\t// Replace whatever is in the fragment_container view with this fragment,\n\t\t// and add the transaction to the back stack\n\t\ttransaction.replace(R.id.fragment_container, newFragment);\n\t\ttransaction.addToBackStack(null);\n    ```\n3. If you ***add multiple changes to the transaction*** (such as another add() or remove()) and call addToBackStack(), ***then all changes applied before you call commit() are added to the back stack as a single transaction and the Back button will reverse them all together***.\n4. If you ***do not call addToBackStack() when you perform a transaction that removes a fragment, then that fragment is destroyed*** when the transaction is committed and the user cannot navigate back to it.\n5. For each fragment transaction, ***you can apply a transition animation, by calling setTransition() before you commit***.\n***Caution:*** You can commit a transaction ***using commit() only prior to the activity saving its state*** (when the user leaves the activity). If you attempt to commit after that point, an exception will be thrown. This is because the state after the commit can be lost if the activity needs to be restored. ***For situations in which its okay that you lose the commit, use commitAllowingStateLoss()***.\n\n## 五、 Communicating with Other Fragments\n\n1.  the fragment can access the Activity instance with ***getActivity()***；\n2.  your activity can call methods in the fragment by acquiring a reference to the Fragment from FragmentManager, using ***findFragmentById() or findFragmentByTag()***.    \n**All Fragment-to-Fragment communication is done through the associated Activity. Two Fragments should never communicate directly.**\n2. define an interface in the Fragment class and implement it within the Activity. The Fragment captures the interface implementation during its onAttach() lifecycle method. Then the fragment can deliver messages to the activity by calling the onArticleSelected() method\n\n```\n\tpublic class HeadlinesFragment extends ListFragment {\n    \tOnHeadlineSelectedListener mCallback;\n\n    \t// Container Activity must implement this interface\n    \tpublic interface OnHeadlineSelectedListener {\n        \tpublic void onArticleSelected(int position);\n    \t}\n\n    \t@Override\n    \tpublic void onAttach(Activity activity) {\n        \tsuper.onAttach(activity);\n        \n        \t// This makes sure that the container activity has implemented\n        \t// the callback interface. If not, it throws an exception\n        \ttry {\n            \tmCallback = (OnHeadlineSelectedListener) activity;\n        \t} catch (ClassCastException e) {\n            \tthrow new ClassCastException(activity.toString()\n                    + \" must implement OnHeadlineSelectedListener\");\n        \t}\n    \t}\n    \n    \t...\n\t}\n```\n```\n\tpublic static class MainActivity extends Activity\n        implements HeadlinesFragment.OnHeadlineSelectedListener{\n    \t...\n    \n    \tpublic void onArticleSelected(int position) {\n        \t// The user selected the headline of an article from the HeadlinesFragment\n        \t// Do something here to display that article\n    \t}\n\t}\n```\n\n### 六、Adding items to the App Bar( and Options Menu)\n\nStill not used.\n","source":"_posts/android-fragment.md","raw":"title: Android-Fragment\ncategories:\n  - Android\ntags:\n  - Android\n  - Fragment\ndate: 2016-03-11 17:08:09\n---\n收录于Fragment相关的内容，如生命周期，如何添加到activity，fragment通讯等。\n## 一、 Fragmentst Lifecycle\n\n1. A fragment must always be embedded in an activity and the fragment's lifecycle is directly affected by the host activity's lifecycle. For example, when the activity is paused, so are all fragments in it, and when the activity is destroyed, so are all fragments. \n2. You can also ***add it to a back stack***. The back stack allows the user to reverse a fragment transaction (navigate backwards), by pressing the Back button.\n3. ***onCreate()*** : initialize essential components of the fragment that you want to retain when the fragment is paused or stopped, then resumed.除了view之外的做出实话\n4. ***onCreateView()*** : return a View from this method that is the root of your fragment's layout.\n5. You can ***save the state during the fragment's onSaveInstanceState()*** callback and ***restore it during either onCreate(), onCreateView(), or onActivityCreated()***.\n6. 只有Activity resume之后，才能操作fragment，否则fragment生命周期跟随anctivity不能操作，如在onPause，onStop等。\n7. setretaininstance(true)，横竖屏切换的时候fragment不会被销毁，数据都会被保存下来。这样其中的imgView、editText等内存状态都还在内存。\n\n![Fragmentst Lifecycle](https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-fragment/fragment_lifecycle.png?raw=true)   \n\n## 二、 subclasses:\n* DialogFragment\n* ListFragment\n* PreferenceFragment\n\n\n## 三、Adding a fragment to an activity\n\n### 1. Declare the fragment inside the activity's layout file.\n\nWhen you add a fragment to an activity layout by defining the fragment in the layout XML file, you cannot remove the fragment at runtime. \n\n```\n\t\t<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    \tandroid:orientation=\"horizontal\"\n    \tandroid:layout_width=\"match_parent\"\n    \tandroid:layout_height=\"match_parent\">\n    \t<fragment android:name=\"com.example.news.ArticleReaderFragment\"\n            android:id=\"@+id/viewer\"\n            android:layout_weight=\"2\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"match_parent\" />\n\t\t</LinearLayout>\n```\n\t\t\nEach fragment requires a unique identifier that the system can use to restore the fragment if the activity is restarted (and which you can use to capture the fragment to perform transactions, such as remove it). There are ***three ways to provide an ID for a fragment***:\n\n   * Supply the android:id attribute with a unique ID.\n   * Supply the android:tag attribute with a unique string.\n   * If you provide neither of the previous two, the system uses the ID of the container view.\n   \n\n\n### 2. programmatically add the fragment to an existing ViewGroup.\n```\n    \tFragmentManager fragmentManager = getFragmentManager();\n    \tFragmentTransaction fragmentTransaction = \t\tfragmentManager.beginTransaction();\n    \tExampleFragment fragment = new ExampleFragment();\n    \tfragmentTransaction.add(R.id.fragment_container, fragment);\n    \tfragmentTransaction.commit();\n```\n### 3、Adding a fragment without a UI\n\n1. you can also use a fragment to ***provide a background behavior for the activity without presenting additional UI***.\n2. To add a fragment without a UI, add the fragment from the activity using ***add(Fragment, String) (supplying a unique string \"tag\" for the fragment, rather than a view ID)***. This adds the fragment, but, because it's not associated with a view in the activity layout, ***it does not receive a call to onCreateView(). So you don't need to implement that method***.\n3. If you want to get the fragment from the activity later, you need to use ***findFragmentByTag()***.\n\n## 四、 Performing Fragment Transactions\n\n1.  using methods such as add(), remove(), and replace(). Then, to apply the transaction to the activity, ***you must call commit()***.\n2.  you might want to call ***addToBackStack()***, in order to add the transaction to a back stack of fragment transactions. ***This back stack is managed by the activity and allows the user to return to the previous fragment state, by pressing the Back button***. \n\n    ```\n\t\t// Replace whatever is in the fragment_container view with this fragment,\n\t\t// and add the transaction to the back stack\n\t\ttransaction.replace(R.id.fragment_container, newFragment);\n\t\ttransaction.addToBackStack(null);\n    ```\n3. If you ***add multiple changes to the transaction*** (such as another add() or remove()) and call addToBackStack(), ***then all changes applied before you call commit() are added to the back stack as a single transaction and the Back button will reverse them all together***.\n4. If you ***do not call addToBackStack() when you perform a transaction that removes a fragment, then that fragment is destroyed*** when the transaction is committed and the user cannot navigate back to it.\n5. For each fragment transaction, ***you can apply a transition animation, by calling setTransition() before you commit***.\n***Caution:*** You can commit a transaction ***using commit() only prior to the activity saving its state*** (when the user leaves the activity). If you attempt to commit after that point, an exception will be thrown. This is because the state after the commit can be lost if the activity needs to be restored. ***For situations in which its okay that you lose the commit, use commitAllowingStateLoss()***.\n\n## 五、 Communicating with Other Fragments\n\n1.  the fragment can access the Activity instance with ***getActivity()***；\n2.  your activity can call methods in the fragment by acquiring a reference to the Fragment from FragmentManager, using ***findFragmentById() or findFragmentByTag()***.    \n**All Fragment-to-Fragment communication is done through the associated Activity. Two Fragments should never communicate directly.**\n2. define an interface in the Fragment class and implement it within the Activity. The Fragment captures the interface implementation during its onAttach() lifecycle method. Then the fragment can deliver messages to the activity by calling the onArticleSelected() method\n\n```\n\tpublic class HeadlinesFragment extends ListFragment {\n    \tOnHeadlineSelectedListener mCallback;\n\n    \t// Container Activity must implement this interface\n    \tpublic interface OnHeadlineSelectedListener {\n        \tpublic void onArticleSelected(int position);\n    \t}\n\n    \t@Override\n    \tpublic void onAttach(Activity activity) {\n        \tsuper.onAttach(activity);\n        \n        \t// This makes sure that the container activity has implemented\n        \t// the callback interface. If not, it throws an exception\n        \ttry {\n            \tmCallback = (OnHeadlineSelectedListener) activity;\n        \t} catch (ClassCastException e) {\n            \tthrow new ClassCastException(activity.toString()\n                    + \" must implement OnHeadlineSelectedListener\");\n        \t}\n    \t}\n    \n    \t...\n\t}\n```\n```\n\tpublic static class MainActivity extends Activity\n        implements HeadlinesFragment.OnHeadlineSelectedListener{\n    \t...\n    \n    \tpublic void onArticleSelected(int position) {\n        \t// The user selected the headline of an article from the HeadlinesFragment\n        \t// Do something here to display that article\n    \t}\n\t}\n```\n\n### 六、Adding items to the App Bar( and Options Menu)\n\nStill not used.\n","slug":"android-fragment","published":1,"updated":"2016-04-06T04:11:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimx9usk3000aj9v8jnqu6842","content":"<p>收录于Fragment相关的内容，如生命周期，如何添加到activity，fragment通讯等。</p>\n<h2 id=\"一、-Fragmentst-Lifecycle\"><a href=\"#一、-Fragmentst-Lifecycle\" class=\"headerlink\" title=\"一、 Fragmentst Lifecycle\"></a>一、 Fragmentst Lifecycle</h2><ol>\n<li>A fragment must always be embedded in an activity and the fragment’s lifecycle is directly affected by the host activity’s lifecycle. For example, when the activity is paused, so are all fragments in it, and when the activity is destroyed, so are all fragments. </li>\n<li>You can also <strong><em>add it to a back stack</em></strong>. The back stack allows the user to reverse a fragment transaction (navigate backwards), by pressing the Back button.</li>\n<li><strong><em>onCreate()</em></strong> : initialize essential components of the fragment that you want to retain when the fragment is paused or stopped, then resumed.除了view之外的做出实话</li>\n<li><strong><em>onCreateView()</em></strong> : return a View from this method that is the root of your fragment’s layout.</li>\n<li>You can <strong><em>save the state during the fragment’s onSaveInstanceState()</em></strong> callback and <strong><em>restore it during either onCreate(), onCreateView(), or onActivityCreated()</em></strong>.</li>\n<li>只有Activity resume之后，才能操作fragment，否则fragment生命周期跟随anctivity不能操作，如在onPause，onStop等。</li>\n<li>setretaininstance(true)，横竖屏切换的时候fragment不会被销毁，数据都会被保存下来。这样其中的imgView、editText等内存状态都还在内存。</li>\n</ol>\n<p><img src=\"https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-fragment/fragment_lifecycle.png?raw=true\" alt=\"Fragmentst Lifecycle\">   </p>\n<h2 id=\"二、-subclasses\"><a href=\"#二、-subclasses\" class=\"headerlink\" title=\"二、 subclasses:\"></a>二、 subclasses:</h2><ul>\n<li>DialogFragment</li>\n<li>ListFragment</li>\n<li>PreferenceFragment</li>\n</ul>\n<h2 id=\"三、Adding-a-fragment-to-an-activity\"><a href=\"#三、Adding-a-fragment-to-an-activity\" class=\"headerlink\" title=\"三、Adding a fragment to an activity\"></a>三、Adding a fragment to an activity</h2><h3 id=\"1-Declare-the-fragment-inside-the-activity’s-layout-file\"><a href=\"#1-Declare-the-fragment-inside-the-activity’s-layout-file\" class=\"headerlink\" title=\"1. Declare the fragment inside the activity’s layout file.\"></a>1. Declare the fragment inside the activity’s layout file.</h3><p>When you add a fragment to an activity layout by defining the fragment in the layout XML file, you cannot remove the fragment at runtime. </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">  \t<span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span></span><br><span class=\"line\">  \t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">  \t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">fragment</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.news.ArticleReaderFragment\"</span></span><br><span class=\"line\">          <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/viewer\"</span></span><br><span class=\"line\">          <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"2\"</span></span><br><span class=\"line\">          <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span><br><span class=\"line\">          <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Each fragment requires a unique identifier that the system can use to restore the fragment if the activity is restarted (and which you can use to capture the fragment to perform transactions, such as remove it). There are <strong><em>three ways to provide an ID for a fragment</em></strong>:</p>\n<ul>\n<li>Supply the android:id attribute with a unique ID.</li>\n<li>Supply the android:tag attribute with a unique string.</li>\n<li>If you provide neither of the previous two, the system uses the ID of the container view.</li>\n</ul>\n<h3 id=\"2-programmatically-add-the-fragment-to-an-existing-ViewGroup\"><a href=\"#2-programmatically-add-the-fragment-to-an-existing-ViewGroup\" class=\"headerlink\" title=\"2. programmatically add the fragment to an existing ViewGroup.\"></a>2. programmatically add the fragment to an existing ViewGroup.</h3><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FragmentManager <span class=\"keyword\">fragment</span>Manager = getFragmentManager();</span><br><span class=\"line\">FragmentTransaction <span class=\"keyword\">fragment</span>Transaction = \t\t<span class=\"keyword\">fragment</span>Manager.beginTransaction();</span><br><span class=\"line\">ExampleFragment <span class=\"keyword\">fragment</span> = new ExampleFragment();</span><br><span class=\"line\"><span class=\"keyword\">fragment</span>Transaction.add(R.id.fragment_container, <span class=\"keyword\">fragment</span>);</span><br><span class=\"line\"><span class=\"keyword\">fragment</span>Transaction.commit();</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、Adding-a-fragment-without-a-UI\"><a href=\"#3、Adding-a-fragment-without-a-UI\" class=\"headerlink\" title=\"3、Adding a fragment without a UI\"></a>3、Adding a fragment without a UI</h3><ol>\n<li>you can also use a fragment to <strong><em>provide a background behavior for the activity without presenting additional UI</em></strong>.</li>\n<li>To add a fragment without a UI, add the fragment from the activity using <strong><em>add(Fragment, String) (supplying a unique string “tag” for the fragment, rather than a view ID)</em></strong>. This adds the fragment, but, because it’s not associated with a view in the activity layout, <strong><em>it does not receive a call to onCreateView(). So you don’t need to implement that method</em></strong>.</li>\n<li>If you want to get the fragment from the activity later, you need to use <strong><em>findFragmentByTag()</em></strong>.</li>\n</ol>\n<h2 id=\"四、-Performing-Fragment-Transactions\"><a href=\"#四、-Performing-Fragment-Transactions\" class=\"headerlink\" title=\"四、 Performing Fragment Transactions\"></a>四、 Performing Fragment Transactions</h2><ol>\n<li>using methods such as add(), remove(), and replace(). Then, to apply the transaction to the activity, <strong><em>you must call commit()</em></strong>.</li>\n<li><p>you might want to call <strong><em>addToBackStack()</em></strong>, in order to add the transaction to a back stack of fragment transactions. <strong><em>This back stack is managed by the activity and allows the user to return to the previous fragment state, by pressing the Back button</em></strong>. </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// <span class=\"keyword\">Replace</span> whatever <span class=\"keyword\">is</span> <span class=\"keyword\">in</span> the fragment_container <span class=\"keyword\">view</span> <span class=\"keyword\">with</span> this fragment,</span><br><span class=\"line\">// <span class=\"keyword\">and</span> <span class=\"keyword\">add</span> the <span class=\"keyword\">transaction</span> <span class=\"keyword\">to</span> the back stack</span><br><span class=\"line\"><span class=\"keyword\">transaction</span>.<span class=\"keyword\">replace</span>(R.<span class=\"keyword\">id</span>.fragment_container, newFragment);</span><br><span class=\"line\">transaction.addToBackStack(null);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>If you <strong><em>add multiple changes to the transaction</em></strong> (such as another add() or remove()) and call addToBackStack(), <strong><em>then all changes applied before you call commit() are added to the back stack as a single transaction and the Back button will reverse them all together</em></strong>.</p>\n</li>\n<li>If you <strong><em>do not call addToBackStack() when you perform a transaction that removes a fragment, then that fragment is destroyed</em></strong> when the transaction is committed and the user cannot navigate back to it.</li>\n<li>For each fragment transaction, <strong><em>you can apply a transition animation, by calling setTransition() before you commit</em></strong>.<br><strong><em>Caution:</em></strong> You can commit a transaction <strong><em>using commit() only prior to the activity saving its state</em></strong> (when the user leaves the activity). If you attempt to commit after that point, an exception will be thrown. This is because the state after the commit can be lost if the activity needs to be restored. <strong><em>For situations in which its okay that you lose the commit, use commitAllowingStateLoss()</em></strong>.</li>\n</ol>\n<h2 id=\"五、-Communicating-with-Other-Fragments\"><a href=\"#五、-Communicating-with-Other-Fragments\" class=\"headerlink\" title=\"五、 Communicating with Other Fragments\"></a>五、 Communicating with Other Fragments</h2><ol>\n<li>the fragment can access the Activity instance with <strong><em>getActivity()</em></strong>；</li>\n<li>your activity can call methods in the fragment by acquiring a reference to the Fragment from FragmentManager, using <strong><em>findFragmentById() or findFragmentByTag()</em></strong>.<br><strong>All Fragment-to-Fragment communication is done through the associated Activity. Two Fragments should never communicate directly.</strong></li>\n<li>define an interface in the Fragment class and implement it within the Activity. The Fragment captures the interface implementation during its onAttach() lifecycle method. Then the fragment can deliver messages to the activity by calling the onArticleSelected() method</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeadlinesFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">ListFragment</span> </span>&#123;</span><br><span class=\"line\">   \tOnHeadlineSelectedListener mCallback;</span><br><span class=\"line\"></span><br><span class=\"line\">   \t<span class=\"comment\">// Container Activity must implement this interface</span></span><br><span class=\"line\">   \t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnHeadlineSelectedListener</span> </span>&#123;</span><br><span class=\"line\">       \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onArticleSelected</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span></span>;</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAttach</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">       \t<span class=\"keyword\">super</span>.onAttach(activity);</span><br><span class=\"line\">       </span><br><span class=\"line\">       \t<span class=\"comment\">// This makes sure that the container activity has implemented</span></span><br><span class=\"line\">       \t<span class=\"comment\">// the callback interface. If not, it throws an exception</span></span><br><span class=\"line\">       \t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           \tmCallback = (OnHeadlineSelectedListener) activity;</span><br><span class=\"line\">       \t&#125; <span class=\"keyword\">catch</span> (ClassCastException e) &#123;</span><br><span class=\"line\">           \t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ClassCastException(activity.toString()</span><br><span class=\"line\">                   + <span class=\"string\">\" must implement OnHeadlineSelectedListener\"</span>);</span><br><span class=\"line\">       \t&#125;</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   \t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span></span></span><br><span class=\"line\">       implements <span class=\"type\">HeadlinesFragment</span>.<span class=\"type\">OnHeadlineSelectedListener</span>&#123;</span><br><span class=\"line\">   \t...</span><br><span class=\"line\">   </span><br><span class=\"line\">   \tpublic void onArticleSelected(int position) &#123;</span><br><span class=\"line\">       \t<span class=\"comment\">// The user selected the headline of an article from the HeadlinesFragment</span></span><br><span class=\"line\">       \t<span class=\"comment\">// Do something here to display that article</span></span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"六、Adding-items-to-the-App-Bar-and-Options-Menu\"><a href=\"#六、Adding-items-to-the-App-Bar-and-Options-Menu\" class=\"headerlink\" title=\"六、Adding items to the App Bar( and Options Menu)\"></a>六、Adding items to the App Bar( and Options Menu)</h3><p>Still not used.</p>\n","excerpt":"","more":"<p>收录于Fragment相关的内容，如生命周期，如何添加到activity，fragment通讯等。</p>\n<h2 id=\"一、-Fragmentst-Lifecycle\"><a href=\"#一、-Fragmentst-Lifecycle\" class=\"headerlink\" title=\"一、 Fragmentst Lifecycle\"></a>一、 Fragmentst Lifecycle</h2><ol>\n<li>A fragment must always be embedded in an activity and the fragment’s lifecycle is directly affected by the host activity’s lifecycle. For example, when the activity is paused, so are all fragments in it, and when the activity is destroyed, so are all fragments. </li>\n<li>You can also <strong><em>add it to a back stack</em></strong>. The back stack allows the user to reverse a fragment transaction (navigate backwards), by pressing the Back button.</li>\n<li><strong><em>onCreate()</em></strong> : initialize essential components of the fragment that you want to retain when the fragment is paused or stopped, then resumed.除了view之外的做出实话</li>\n<li><strong><em>onCreateView()</em></strong> : return a View from this method that is the root of your fragment’s layout.</li>\n<li>You can <strong><em>save the state during the fragment’s onSaveInstanceState()</em></strong> callback and <strong><em>restore it during either onCreate(), onCreateView(), or onActivityCreated()</em></strong>.</li>\n<li>只有Activity resume之后，才能操作fragment，否则fragment生命周期跟随anctivity不能操作，如在onPause，onStop等。</li>\n<li>setretaininstance(true)，横竖屏切换的时候fragment不会被销毁，数据都会被保存下来。这样其中的imgView、editText等内存状态都还在内存。</li>\n</ol>\n<p><img src=\"https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-fragment/fragment_lifecycle.png?raw=true\" alt=\"Fragmentst Lifecycle\">   </p>\n<h2 id=\"二、-subclasses\"><a href=\"#二、-subclasses\" class=\"headerlink\" title=\"二、 subclasses:\"></a>二、 subclasses:</h2><ul>\n<li>DialogFragment</li>\n<li>ListFragment</li>\n<li>PreferenceFragment</li>\n</ul>\n<h2 id=\"三、Adding-a-fragment-to-an-activity\"><a href=\"#三、Adding-a-fragment-to-an-activity\" class=\"headerlink\" title=\"三、Adding a fragment to an activity\"></a>三、Adding a fragment to an activity</h2><h3 id=\"1-Declare-the-fragment-inside-the-activity’s-layout-file\"><a href=\"#1-Declare-the-fragment-inside-the-activity’s-layout-file\" class=\"headerlink\" title=\"1. Declare the fragment inside the activity’s layout file.\"></a>1. Declare the fragment inside the activity’s layout file.</h3><p>When you add a fragment to an activity layout by defining the fragment in the layout XML file, you cannot remove the fragment at runtime. </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">  \t<span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span></span><br><span class=\"line\">  \t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">  \t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">fragment</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.news.ArticleReaderFragment\"</span></span><br><span class=\"line\">          <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/viewer\"</span></span><br><span class=\"line\">          <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"2\"</span></span><br><span class=\"line\">          <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span><br><span class=\"line\">          <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Each fragment requires a unique identifier that the system can use to restore the fragment if the activity is restarted (and which you can use to capture the fragment to perform transactions, such as remove it). There are <strong><em>three ways to provide an ID for a fragment</em></strong>:</p>\n<ul>\n<li>Supply the android:id attribute with a unique ID.</li>\n<li>Supply the android:tag attribute with a unique string.</li>\n<li>If you provide neither of the previous two, the system uses the ID of the container view.</li>\n</ul>\n<h3 id=\"2-programmatically-add-the-fragment-to-an-existing-ViewGroup\"><a href=\"#2-programmatically-add-the-fragment-to-an-existing-ViewGroup\" class=\"headerlink\" title=\"2. programmatically add the fragment to an existing ViewGroup.\"></a>2. programmatically add the fragment to an existing ViewGroup.</h3><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FragmentManager <span class=\"keyword\">fragment</span>Manager = getFragmentManager();</span><br><span class=\"line\">FragmentTransaction <span class=\"keyword\">fragment</span>Transaction = \t\t<span class=\"keyword\">fragment</span>Manager.beginTransaction();</span><br><span class=\"line\">ExampleFragment <span class=\"keyword\">fragment</span> = new ExampleFragment();</span><br><span class=\"line\"><span class=\"keyword\">fragment</span>Transaction.add(R.id.fragment_container, <span class=\"keyword\">fragment</span>);</span><br><span class=\"line\"><span class=\"keyword\">fragment</span>Transaction.commit();</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、Adding-a-fragment-without-a-UI\"><a href=\"#3、Adding-a-fragment-without-a-UI\" class=\"headerlink\" title=\"3、Adding a fragment without a UI\"></a>3、Adding a fragment without a UI</h3><ol>\n<li>you can also use a fragment to <strong><em>provide a background behavior for the activity without presenting additional UI</em></strong>.</li>\n<li>To add a fragment without a UI, add the fragment from the activity using <strong><em>add(Fragment, String) (supplying a unique string “tag” for the fragment, rather than a view ID)</em></strong>. This adds the fragment, but, because it’s not associated with a view in the activity layout, <strong><em>it does not receive a call to onCreateView(). So you don’t need to implement that method</em></strong>.</li>\n<li>If you want to get the fragment from the activity later, you need to use <strong><em>findFragmentByTag()</em></strong>.</li>\n</ol>\n<h2 id=\"四、-Performing-Fragment-Transactions\"><a href=\"#四、-Performing-Fragment-Transactions\" class=\"headerlink\" title=\"四、 Performing Fragment Transactions\"></a>四、 Performing Fragment Transactions</h2><ol>\n<li>using methods such as add(), remove(), and replace(). Then, to apply the transaction to the activity, <strong><em>you must call commit()</em></strong>.</li>\n<li><p>you might want to call <strong><em>addToBackStack()</em></strong>, in order to add the transaction to a back stack of fragment transactions. <strong><em>This back stack is managed by the activity and allows the user to return to the previous fragment state, by pressing the Back button</em></strong>. </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// <span class=\"keyword\">Replace</span> whatever <span class=\"keyword\">is</span> <span class=\"keyword\">in</span> the fragment_container <span class=\"keyword\">view</span> <span class=\"keyword\">with</span> this fragment,</span><br><span class=\"line\">// <span class=\"keyword\">and</span> <span class=\"keyword\">add</span> the <span class=\"keyword\">transaction</span> <span class=\"keyword\">to</span> the back stack</span><br><span class=\"line\"><span class=\"keyword\">transaction</span>.<span class=\"keyword\">replace</span>(R.<span class=\"keyword\">id</span>.fragment_container, newFragment);</span><br><span class=\"line\">transaction.addToBackStack(null);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>If you <strong><em>add multiple changes to the transaction</em></strong> (such as another add() or remove()) and call addToBackStack(), <strong><em>then all changes applied before you call commit() are added to the back stack as a single transaction and the Back button will reverse them all together</em></strong>.</p>\n</li>\n<li>If you <strong><em>do not call addToBackStack() when you perform a transaction that removes a fragment, then that fragment is destroyed</em></strong> when the transaction is committed and the user cannot navigate back to it.</li>\n<li>For each fragment transaction, <strong><em>you can apply a transition animation, by calling setTransition() before you commit</em></strong>.<br><strong><em>Caution:</em></strong> You can commit a transaction <strong><em>using commit() only prior to the activity saving its state</em></strong> (when the user leaves the activity). If you attempt to commit after that point, an exception will be thrown. This is because the state after the commit can be lost if the activity needs to be restored. <strong><em>For situations in which its okay that you lose the commit, use commitAllowingStateLoss()</em></strong>.</li>\n</ol>\n<h2 id=\"五、-Communicating-with-Other-Fragments\"><a href=\"#五、-Communicating-with-Other-Fragments\" class=\"headerlink\" title=\"五、 Communicating with Other Fragments\"></a>五、 Communicating with Other Fragments</h2><ol>\n<li>the fragment can access the Activity instance with <strong><em>getActivity()</em></strong>；</li>\n<li>your activity can call methods in the fragment by acquiring a reference to the Fragment from FragmentManager, using <strong><em>findFragmentById() or findFragmentByTag()</em></strong>.<br><strong>All Fragment-to-Fragment communication is done through the associated Activity. Two Fragments should never communicate directly.</strong></li>\n<li>define an interface in the Fragment class and implement it within the Activity. The Fragment captures the interface implementation during its onAttach() lifecycle method. Then the fragment can deliver messages to the activity by calling the onArticleSelected() method</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeadlinesFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">ListFragment</span> </span>&#123;</span><br><span class=\"line\">   \tOnHeadlineSelectedListener mCallback;</span><br><span class=\"line\"></span><br><span class=\"line\">   \t<span class=\"comment\">// Container Activity must implement this interface</span></span><br><span class=\"line\">   \t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnHeadlineSelectedListener</span> </span>&#123;</span><br><span class=\"line\">       \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onArticleSelected</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span></span>;</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAttach</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">       \t<span class=\"keyword\">super</span>.onAttach(activity);</span><br><span class=\"line\">       </span><br><span class=\"line\">       \t<span class=\"comment\">// This makes sure that the container activity has implemented</span></span><br><span class=\"line\">       \t<span class=\"comment\">// the callback interface. If not, it throws an exception</span></span><br><span class=\"line\">       \t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           \tmCallback = (OnHeadlineSelectedListener) activity;</span><br><span class=\"line\">       \t&#125; <span class=\"keyword\">catch</span> (ClassCastException e) &#123;</span><br><span class=\"line\">           \t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ClassCastException(activity.toString()</span><br><span class=\"line\">                   + <span class=\"string\">\" must implement OnHeadlineSelectedListener\"</span>);</span><br><span class=\"line\">       \t&#125;</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   \t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span></span></span><br><span class=\"line\">       implements <span class=\"type\">HeadlinesFragment</span>.<span class=\"type\">OnHeadlineSelectedListener</span>&#123;</span><br><span class=\"line\">   \t...</span><br><span class=\"line\">   </span><br><span class=\"line\">   \tpublic void onArticleSelected(int position) &#123;</span><br><span class=\"line\">       \t<span class=\"comment\">// The user selected the headline of an article from the HeadlinesFragment</span></span><br><span class=\"line\">       \t<span class=\"comment\">// Do something here to display that article</span></span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"六、Adding-items-to-the-App-Bar-and-Options-Menu\"><a href=\"#六、Adding-items-to-the-App-Bar-and-Options-Menu\" class=\"headerlink\" title=\"六、Adding items to the App Bar( and Options Menu)\"></a>六、Adding items to the App Bar( and Options Menu)</h3><p>Still not used.</p>\n"},{"title":"Android-Loaders","date":"2016-03-22T09:49:02.000Z","_content":"常用的是Android异步加载数据的CursorLoader, 继承自AsyncTaskLoader。可以实现MVVM的数据监测。\n\n## 一、 Loaders Introduction\n\n### 1. Brief Introduction\n\n1. They are available to every Activity and Fragment.\n2. They provide asynchronous loading of data.\n3. They monitor the source of their data and deliver new results when the content changes.\n4. They automatically reconnect to the last loader's cursor when being recreated after a configuration change. Thus, they don't need to re-query their data.\n\n使用场合：通讯录动态查询，ListView的数据动态发生变化更新UI。\n\n\n### 2. Loader API Summary\n\n1. LoaderManager    \nThere is only one LoaderManager per activity or fragment. But a LoaderManager can have multiple loaders.\n2. LoaderManager.LoaderCallbacks\n3. Loader\n4. AsyncTaskLoader\n5. CursorLoader\n\n### 3. 没做深入研究，参考案例暂不收录—.—||","source":"_posts/android-loaders.md","raw":"title: Android-Loaders\ncategories:\n  - Android\ntags:\n  - Android\n  - Loaders\ndate: 2016-03-22 17:49:02\n---\n常用的是Android异步加载数据的CursorLoader, 继承自AsyncTaskLoader。可以实现MVVM的数据监测。\n\n## 一、 Loaders Introduction\n\n### 1. Brief Introduction\n\n1. They are available to every Activity and Fragment.\n2. They provide asynchronous loading of data.\n3. They monitor the source of their data and deliver new results when the content changes.\n4. They automatically reconnect to the last loader's cursor when being recreated after a configuration change. Thus, they don't need to re-query their data.\n\n使用场合：通讯录动态查询，ListView的数据动态发生变化更新UI。\n\n\n### 2. Loader API Summary\n\n1. LoaderManager    \nThere is only one LoaderManager per activity or fragment. But a LoaderManager can have multiple loaders.\n2. LoaderManager.LoaderCallbacks\n3. Loader\n4. AsyncTaskLoader\n5. CursorLoader\n\n### 3. 没做深入研究，参考案例暂不收录—.—||","slug":"android-loaders","published":1,"updated":"2016-03-22T09:59:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimx9uskd000cj9v8uundj64a","content":"<p>常用的是Android异步加载数据的CursorLoader, 继承自AsyncTaskLoader。可以实现MVVM的数据监测。</p>\n<h2 id=\"一、-Loaders-Introduction\"><a href=\"#一、-Loaders-Introduction\" class=\"headerlink\" title=\"一、 Loaders Introduction\"></a>一、 Loaders Introduction</h2><h3 id=\"1-Brief-Introduction\"><a href=\"#1-Brief-Introduction\" class=\"headerlink\" title=\"1. Brief Introduction\"></a>1. Brief Introduction</h3><ol>\n<li>They are available to every Activity and Fragment.</li>\n<li>They provide asynchronous loading of data.</li>\n<li>They monitor the source of their data and deliver new results when the content changes.</li>\n<li>They automatically reconnect to the last loader’s cursor when being recreated after a configuration change. Thus, they don’t need to re-query their data.</li>\n</ol>\n<p>使用场合：通讯录动态查询，ListView的数据动态发生变化更新UI。</p>\n<h3 id=\"2-Loader-API-Summary\"><a href=\"#2-Loader-API-Summary\" class=\"headerlink\" title=\"2. Loader API Summary\"></a>2. Loader API Summary</h3><ol>\n<li>LoaderManager<br>There is only one LoaderManager per activity or fragment. But a LoaderManager can have multiple loaders.</li>\n<li>LoaderManager.LoaderCallbacks</li>\n<li>Loader</li>\n<li>AsyncTaskLoader</li>\n<li>CursorLoader</li>\n</ol>\n<h3 id=\"3-没做深入研究，参考案例暂不收录—-—\"><a href=\"#3-没做深入研究，参考案例暂不收录—-—\" class=\"headerlink\" title=\"3. 没做深入研究，参考案例暂不收录—.—||\"></a>3. 没做深入研究，参考案例暂不收录—.—||</h3>","excerpt":"","more":"<p>常用的是Android异步加载数据的CursorLoader, 继承自AsyncTaskLoader。可以实现MVVM的数据监测。</p>\n<h2 id=\"一、-Loaders-Introduction\"><a href=\"#一、-Loaders-Introduction\" class=\"headerlink\" title=\"一、 Loaders Introduction\"></a>一、 Loaders Introduction</h2><h3 id=\"1-Brief-Introduction\"><a href=\"#1-Brief-Introduction\" class=\"headerlink\" title=\"1. Brief Introduction\"></a>1. Brief Introduction</h3><ol>\n<li>They are available to every Activity and Fragment.</li>\n<li>They provide asynchronous loading of data.</li>\n<li>They monitor the source of their data and deliver new results when the content changes.</li>\n<li>They automatically reconnect to the last loader’s cursor when being recreated after a configuration change. Thus, they don’t need to re-query their data.</li>\n</ol>\n<p>使用场合：通讯录动态查询，ListView的数据动态发生变化更新UI。</p>\n<h3 id=\"2-Loader-API-Summary\"><a href=\"#2-Loader-API-Summary\" class=\"headerlink\" title=\"2. Loader API Summary\"></a>2. Loader API Summary</h3><ol>\n<li>LoaderManager<br>There is only one LoaderManager per activity or fragment. But a LoaderManager can have multiple loaders.</li>\n<li>LoaderManager.LoaderCallbacks</li>\n<li>Loader</li>\n<li>AsyncTaskLoader</li>\n<li>CursorLoader</li>\n</ol>\n<h3 id=\"3-没做深入研究，参考案例暂不收录—-—\"><a href=\"#3-没做深入研究，参考案例暂不收录—-—\" class=\"headerlink\" title=\"3. 没做深入研究，参考案例暂不收录—.—||\"></a>3. 没做深入研究，参考案例暂不收录—.—||</h3>"},{"title":"Android-Icon-Size","date":"2015-06-04T08:05:33.000Z","_content":"\nLauncher Icons存放到mipmap目录。但是官方建议也就只有launcher icons放到mipmap目录。Android使用mipmap目录下的资源，在scale上会有更好的性能优化。\n\nApp资源优化会移除一些未使用的屏幕密度资源，在某些屏上会模糊。\n\nApps should ***use the mipmap/ resource folders for launcher icons***. The Android system preserves these resources regardless of density stripping, and ensures that launcher apps can pick icons with the best resolution for display.     \n\nMoving all densities of your launcher icons to density-specific res/mipmap/ folders (for example res/mipmap-mdpi/ and res/mipmap-xxxhdpi/)。\n\n***Note:***添加一个当前更高的icon以增加对更高分辨率的兼容性。\n    \n***icon Size:***    \n\n| name | DPI | iconSize | 四边各留像素 | 实际图像size |\n|-|-|-|-|-|\n| ldpi | 120 | 36x36 | 1px | 34x34 |\n| mdpi | 160 | 48x48 | 1px | 46x46 |\n| hdpi | 240 | 72x72 | 2px | 68x68 |\n| xhdpi| 320 | 96x96 | 4px | 88x88 |\n| xxhdpi| 480 | 144x144 | 8px | 128x128 |\n| xxxhdpi| 640 | 192x192| 12px | 168x168 |","source":"_posts/android-icon-size.md","raw":"title: Android-Icon-Size\ncategories:\n  - Android\ntags:\n  - IconSize\ndate: 2015-06-04 16:05:33\n---\n\nLauncher Icons存放到mipmap目录。但是官方建议也就只有launcher icons放到mipmap目录。Android使用mipmap目录下的资源，在scale上会有更好的性能优化。\n\nApp资源优化会移除一些未使用的屏幕密度资源，在某些屏上会模糊。\n\nApps should ***use the mipmap/ resource folders for launcher icons***. The Android system preserves these resources regardless of density stripping, and ensures that launcher apps can pick icons with the best resolution for display.     \n\nMoving all densities of your launcher icons to density-specific res/mipmap/ folders (for example res/mipmap-mdpi/ and res/mipmap-xxxhdpi/)。\n\n***Note:***添加一个当前更高的icon以增加对更高分辨率的兼容性。\n    \n***icon Size:***    \n\n| name | DPI | iconSize | 四边各留像素 | 实际图像size |\n|-|-|-|-|-|\n| ldpi | 120 | 36x36 | 1px | 34x34 |\n| mdpi | 160 | 48x48 | 1px | 46x46 |\n| hdpi | 240 | 72x72 | 2px | 68x68 |\n| xhdpi| 320 | 96x96 | 4px | 88x88 |\n| xxhdpi| 480 | 144x144 | 8px | 128x128 |\n| xxxhdpi| 640 | 192x192| 12px | 168x168 |","slug":"android-icon-size","published":1,"updated":"2016-04-12T08:30:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimx9uskj000gj9v8ovda5t43","content":"<p>Launcher Icons存放到mipmap目录。但是官方建议也就只有launcher icons放到mipmap目录。Android使用mipmap目录下的资源，在scale上会有更好的性能优化。</p>\n<p>App资源优化会移除一些未使用的屏幕密度资源，在某些屏上会模糊。</p>\n<p>Apps should <strong><em>use the mipmap/ resource folders for launcher icons</em></strong>. The Android system preserves these resources regardless of density stripping, and ensures that launcher apps can pick icons with the best resolution for display.     </p>\n<p>Moving all densities of your launcher icons to density-specific res/mipmap/ folders (for example res/mipmap-mdpi/ and res/mipmap-xxxhdpi/)。</p>\n<p><strong><em>Note:</em></strong>添加一个当前更高的icon以增加对更高分辨率的兼容性。</p>\n<p><strong><em>icon Size:</em></strong>    </p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>DPI</th>\n<th>iconSize</th>\n<th>四边各留像素</th>\n<th>实际图像size</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ldpi</td>\n<td>120</td>\n<td>36x36</td>\n<td>1px</td>\n<td>34x34</td>\n</tr>\n<tr>\n<td>mdpi</td>\n<td>160</td>\n<td>48x48</td>\n<td>1px</td>\n<td>46x46</td>\n</tr>\n<tr>\n<td>hdpi</td>\n<td>240</td>\n<td>72x72</td>\n<td>2px</td>\n<td>68x68</td>\n</tr>\n<tr>\n<td>xhdpi</td>\n<td>320</td>\n<td>96x96</td>\n<td>4px</td>\n<td>88x88</td>\n</tr>\n<tr>\n<td>xxhdpi</td>\n<td>480</td>\n<td>144x144</td>\n<td>8px</td>\n<td>128x128</td>\n</tr>\n<tr>\n<td>xxxhdpi</td>\n<td>640</td>\n<td>192x192</td>\n<td>12px</td>\n<td>168x168</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<p>Launcher Icons存放到mipmap目录。但是官方建议也就只有launcher icons放到mipmap目录。Android使用mipmap目录下的资源，在scale上会有更好的性能优化。</p>\n<p>App资源优化会移除一些未使用的屏幕密度资源，在某些屏上会模糊。</p>\n<p>Apps should <strong><em>use the mipmap/ resource folders for launcher icons</em></strong>. The Android system preserves these resources regardless of density stripping, and ensures that launcher apps can pick icons with the best resolution for display.     </p>\n<p>Moving all densities of your launcher icons to density-specific res/mipmap/ folders (for example res/mipmap-mdpi/ and res/mipmap-xxxhdpi/)。</p>\n<p><strong><em>Note:</em></strong>添加一个当前更高的icon以增加对更高分辨率的兼容性。</p>\n<p><strong><em>icon Size:</em></strong>    </p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>DPI</th>\n<th>iconSize</th>\n<th>四边各留像素</th>\n<th>实际图像size</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ldpi</td>\n<td>120</td>\n<td>36x36</td>\n<td>1px</td>\n<td>34x34</td>\n</tr>\n<tr>\n<td>mdpi</td>\n<td>160</td>\n<td>48x48</td>\n<td>1px</td>\n<td>46x46</td>\n</tr>\n<tr>\n<td>hdpi</td>\n<td>240</td>\n<td>72x72</td>\n<td>2px</td>\n<td>68x68</td>\n</tr>\n<tr>\n<td>xhdpi</td>\n<td>320</td>\n<td>96x96</td>\n<td>4px</td>\n<td>88x88</td>\n</tr>\n<tr>\n<td>xxhdpi</td>\n<td>480</td>\n<td>144x144</td>\n<td>8px</td>\n<td>128x128</td>\n</tr>\n<tr>\n<td>xxxhdpi</td>\n<td>640</td>\n<td>192x192</td>\n<td>12px</td>\n<td>168x168</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Android-Managing-Memory","date":"2016-03-31T06:30:58.000Z","_content":"Android App上内存管理。\n\n## 一、 How Android Manages Memory\nAndroid does not offer swap space for memory, but it does use paging and memory-mapping (mmapping) to manage memory. 所以，唯一的释放内存的方式就是释放对象的引用。\n\n### 1. Sharing Memory\n\n1. Each app process is forked from an existing process called Zygote. The Zygote process starts when the system boots and loads common framework code and resources (such as activity themes). To start a new app process, the system forks the Zygote process then loads and runs the app's code in the new process. This allows most of the RAM pages allocated for framework code and resources to be shared across all app processes.\n2. Most static data is mmapped into a process. This not only allows that same data to be shared between processes but also allows it to be paged out when needed. Example static data include: Dalvik code (by placing it in a pre-linked .odex file for direct mmapping), app resources (by designing the resource table to be a structure that can be mmapped and by aligning the zip entries of the APK), and traditional project elements like native code in .so files.\n3. In many places, Android shares the same dynamic RAM across processes using explicitly allocated shared memory regions (either with ashmem or gralloc). For example, window surfaces use shared memory between the app and screen compositor, and cursor buffers use shared memory between the content provider and client.\n\n### 2. Allocating and Reclaiming App Memory\n\n1. Dalvik分配给每个app的内存大小有一个上限；\n2. The logical size of the heap is not the same as the amount of physical memory used by the heap.\n3. The Dalvik heap does not compact the logical size of the heap.\n\n### 3. Restricting App Memory\n\nAndroid sets a hard limit on the heap size for each app. If your app has reached the heap capacity and tries to allocate more memory, it will receive an OutOfMemoryError.\n\n如果想要知道分配了多少内存，使用***getMemoryClass()***，返回interger百万字节数。\n\n### 4. Switching Apps\n\nlow memory的时候，会kill LRU least-recently used process.\n\n## 二、 How Your App Should Manage Memory\n\n### 1. Use services sparingly\n\n1. 一个后台运行的service完成工作后，一定确保stop，不能一直运行。否则会导致leak service，因为system会保证这个service的process占用内存等资源运行；\n2. 解决办法：使用***IntentService***，它会在完成工作后自动finish自己；IntentService原理HandlerThread+Handler实现异步。\n\n### 2. Release memory when your user interface becomes hidden\n\n***onTrimmemory()*** : callback with ***TRIM_MEMORY_UI_HIDDEN*** only when all the UI components of your app process become hidden from the user.    \n更多level标签：http://developer.android.com/training/articles/memory.html#YourApp    \n***onStop()*** : to release activity resources such as a network connection or to unregister broadcast receivers, you usually should not release your UI resources until you receive onTrimMemory(TRIM_MEMORY_UI_HIDDEN).\n\n### 3. Check how much memory you should use\n\n***getMemoryClass()*** to get an estimate of your app's available heap in megabytes. If your app tries to allocate more memory than is available here, it will receive an OutOfMemoryError.\n\n***getLargeMemoryClass()*** In very special situations, call this to get an estimate of the large heap size, setting the largeHeap attribute to \"true\" in the manifest <application> tag.\n\n### 4. Avoid wasting memory with bitmaps\n\n***Keep it in RAM only at the resolution you need*** for the current device's screen, scaling it down if the original bitmap is a higher resolution.\n更多参考： Android-Displaying-Bitmap-Efficiently\n\n### 5. Use optimized data containers\n\n***Take advantage of optimized containers*** in the Android framework, ***such as SparseArray, SparseBooleanArray, and LongSparseArray***, ***instead of HashMap*** which can be quite memory inefficient because it needs a separate entry object for every mapping. \n\n为何SparseArray要比hashMap要好，both because it avoids\n * auto-boxing keys and its data structure doesn't rely on an extra entry object for each mapping.因为他不需要autoboxing(即将原始类型封装为对象类型，比如把int类型封装成Integer类型）。***当数据量不多(几百)的时候，用SparseArra。但是数据量多hashmap效率较高***\n\n### 6. Be aware of memory overhead\n\n1. Enums often require more than twice as much memory as static constants. You should strictly avoid using enums on Android.\n2. Every class in Java (including anonymous inner classes) uses about 500 bytes of code.\n3. Every class instance has 12-16 bytes of RAM overhead.\n4. Putting a single entry into a HashMap requires the allocation of an additional entry object that takes 32 bytes (see the previous section about optimized data containers).\n\n### 7. Be careful with code abstractions\n\n抽象可以更加敏捷和便于维护。然而抽象会有they require a fair amount more code that needs to be executed, requiring more time and more RAM for that code to be mapped into memory. 所以如果抽象并不是具有明显的意义，不要使用。\n\n### 8. Use nano protobufs for serialized data\nPB nano\n\n### 9. Avoid dependency injection frameworks\n\nUsing ***a dependency injection framework*** ***such as Guice or RoboGuice*** may be attractive because they can simplify the code you write and provide an adaptive environment that's useful for testing and other configuration changes. However, ***these frameworks tend to perform a lot of process initialization by scanning your code for annotations***, which can require significant amounts of your code to be mapped into RAM even though you don't need it. \n\n### 10. Be careful about using external libraries\n注意lib的大小，以及内存占用情况。如果针对app的，注意一下兼容情况，比如用的nano pb。\n\n### 11. Use ProGuard to strip out any unneeded code\n\nThe ProGuard tool shrinks, optimizes, and obfuscates your code by removing unused code and renaming classes, fields, and methods with semantically obscure names. Using ProGuard can make your code more compact, requiring fewer RAM pages to be mapped.\n\n### 12. Use zipalign on your final APK\n\n### 13. Use multiple processes\n\n***Most apps should not run multiple processes***, as it can easily increase—rather than decrease—your RAM footprint if done incorrectly.\n\nAn example of when multiple processes may be appropriate is when building a music player that plays music from a service for long period of time. If the entire app runs in one process, then many of the allocations performed for its activity UI must be kept around as long as it is playing music.\n\n***new process***\n```\n<service android:name=\".PlaybackService\"\n         android:process=\":newprocessname\" />\n```\n\n***Concern***\n1. 两个process，一个处理ui，另一个与ui无关。\n2. 注意代码规范，比如如果用了enum，此时2个进程占用的内存就会双份。\n3. 注意两个进程间的依赖，不能有任何的content provider或者service的依赖：For example, if your app has a content provider that you have running in the default process which also hosts your UI, then code in a background process that uses that content provider will also require that your UI process remain in RAM. If your goal is to have a background process that can run independently of a heavy-weight UI process, it can't have dependencies on content providers or services that execute in the UI process.","source":"_posts/android-managing-memory.md","raw":"title: Android-Managing-Memory\ncategories:\n\t- Android\ntags:\n\t- Android\n\t- Optimization\ndate: 2016-03-31 14:30:58\n---\nAndroid App上内存管理。\n\n## 一、 How Android Manages Memory\nAndroid does not offer swap space for memory, but it does use paging and memory-mapping (mmapping) to manage memory. 所以，唯一的释放内存的方式就是释放对象的引用。\n\n### 1. Sharing Memory\n\n1. Each app process is forked from an existing process called Zygote. The Zygote process starts when the system boots and loads common framework code and resources (such as activity themes). To start a new app process, the system forks the Zygote process then loads and runs the app's code in the new process. This allows most of the RAM pages allocated for framework code and resources to be shared across all app processes.\n2. Most static data is mmapped into a process. This not only allows that same data to be shared between processes but also allows it to be paged out when needed. Example static data include: Dalvik code (by placing it in a pre-linked .odex file for direct mmapping), app resources (by designing the resource table to be a structure that can be mmapped and by aligning the zip entries of the APK), and traditional project elements like native code in .so files.\n3. In many places, Android shares the same dynamic RAM across processes using explicitly allocated shared memory regions (either with ashmem or gralloc). For example, window surfaces use shared memory between the app and screen compositor, and cursor buffers use shared memory between the content provider and client.\n\n### 2. Allocating and Reclaiming App Memory\n\n1. Dalvik分配给每个app的内存大小有一个上限；\n2. The logical size of the heap is not the same as the amount of physical memory used by the heap.\n3. The Dalvik heap does not compact the logical size of the heap.\n\n### 3. Restricting App Memory\n\nAndroid sets a hard limit on the heap size for each app. If your app has reached the heap capacity and tries to allocate more memory, it will receive an OutOfMemoryError.\n\n如果想要知道分配了多少内存，使用***getMemoryClass()***，返回interger百万字节数。\n\n### 4. Switching Apps\n\nlow memory的时候，会kill LRU least-recently used process.\n\n## 二、 How Your App Should Manage Memory\n\n### 1. Use services sparingly\n\n1. 一个后台运行的service完成工作后，一定确保stop，不能一直运行。否则会导致leak service，因为system会保证这个service的process占用内存等资源运行；\n2. 解决办法：使用***IntentService***，它会在完成工作后自动finish自己；IntentService原理HandlerThread+Handler实现异步。\n\n### 2. Release memory when your user interface becomes hidden\n\n***onTrimmemory()*** : callback with ***TRIM_MEMORY_UI_HIDDEN*** only when all the UI components of your app process become hidden from the user.    \n更多level标签：http://developer.android.com/training/articles/memory.html#YourApp    \n***onStop()*** : to release activity resources such as a network connection or to unregister broadcast receivers, you usually should not release your UI resources until you receive onTrimMemory(TRIM_MEMORY_UI_HIDDEN).\n\n### 3. Check how much memory you should use\n\n***getMemoryClass()*** to get an estimate of your app's available heap in megabytes. If your app tries to allocate more memory than is available here, it will receive an OutOfMemoryError.\n\n***getLargeMemoryClass()*** In very special situations, call this to get an estimate of the large heap size, setting the largeHeap attribute to \"true\" in the manifest <application> tag.\n\n### 4. Avoid wasting memory with bitmaps\n\n***Keep it in RAM only at the resolution you need*** for the current device's screen, scaling it down if the original bitmap is a higher resolution.\n更多参考： Android-Displaying-Bitmap-Efficiently\n\n### 5. Use optimized data containers\n\n***Take advantage of optimized containers*** in the Android framework, ***such as SparseArray, SparseBooleanArray, and LongSparseArray***, ***instead of HashMap*** which can be quite memory inefficient because it needs a separate entry object for every mapping. \n\n为何SparseArray要比hashMap要好，both because it avoids\n * auto-boxing keys and its data structure doesn't rely on an extra entry object for each mapping.因为他不需要autoboxing(即将原始类型封装为对象类型，比如把int类型封装成Integer类型）。***当数据量不多(几百)的时候，用SparseArra。但是数据量多hashmap效率较高***\n\n### 6. Be aware of memory overhead\n\n1. Enums often require more than twice as much memory as static constants. You should strictly avoid using enums on Android.\n2. Every class in Java (including anonymous inner classes) uses about 500 bytes of code.\n3. Every class instance has 12-16 bytes of RAM overhead.\n4. Putting a single entry into a HashMap requires the allocation of an additional entry object that takes 32 bytes (see the previous section about optimized data containers).\n\n### 7. Be careful with code abstractions\n\n抽象可以更加敏捷和便于维护。然而抽象会有they require a fair amount more code that needs to be executed, requiring more time and more RAM for that code to be mapped into memory. 所以如果抽象并不是具有明显的意义，不要使用。\n\n### 8. Use nano protobufs for serialized data\nPB nano\n\n### 9. Avoid dependency injection frameworks\n\nUsing ***a dependency injection framework*** ***such as Guice or RoboGuice*** may be attractive because they can simplify the code you write and provide an adaptive environment that's useful for testing and other configuration changes. However, ***these frameworks tend to perform a lot of process initialization by scanning your code for annotations***, which can require significant amounts of your code to be mapped into RAM even though you don't need it. \n\n### 10. Be careful about using external libraries\n注意lib的大小，以及内存占用情况。如果针对app的，注意一下兼容情况，比如用的nano pb。\n\n### 11. Use ProGuard to strip out any unneeded code\n\nThe ProGuard tool shrinks, optimizes, and obfuscates your code by removing unused code and renaming classes, fields, and methods with semantically obscure names. Using ProGuard can make your code more compact, requiring fewer RAM pages to be mapped.\n\n### 12. Use zipalign on your final APK\n\n### 13. Use multiple processes\n\n***Most apps should not run multiple processes***, as it can easily increase—rather than decrease—your RAM footprint if done incorrectly.\n\nAn example of when multiple processes may be appropriate is when building a music player that plays music from a service for long period of time. If the entire app runs in one process, then many of the allocations performed for its activity UI must be kept around as long as it is playing music.\n\n***new process***\n```\n<service android:name=\".PlaybackService\"\n         android:process=\":newprocessname\" />\n```\n\n***Concern***\n1. 两个process，一个处理ui，另一个与ui无关。\n2. 注意代码规范，比如如果用了enum，此时2个进程占用的内存就会双份。\n3. 注意两个进程间的依赖，不能有任何的content provider或者service的依赖：For example, if your app has a content provider that you have running in the default process which also hosts your UI, then code in a background process that uses that content provider will also require that your UI process remain in RAM. If your goal is to have a background process that can run independently of a heavy-weight UI process, it can't have dependencies on content providers or services that execute in the UI process.","slug":"android-managing-memory","published":1,"updated":"2016-03-31T12:00:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimx9uskm000ij9v8g365f7q1","content":"<p>Android App上内存管理。</p>\n<h2 id=\"一、-How-Android-Manages-Memory\"><a href=\"#一、-How-Android-Manages-Memory\" class=\"headerlink\" title=\"一、 How Android Manages Memory\"></a>一、 How Android Manages Memory</h2><p>Android does not offer swap space for memory, but it does use paging and memory-mapping (mmapping) to manage memory. 所以，唯一的释放内存的方式就是释放对象的引用。</p>\n<h3 id=\"1-Sharing-Memory\"><a href=\"#1-Sharing-Memory\" class=\"headerlink\" title=\"1. Sharing Memory\"></a>1. Sharing Memory</h3><ol>\n<li>Each app process is forked from an existing process called Zygote. The Zygote process starts when the system boots and loads common framework code and resources (such as activity themes). To start a new app process, the system forks the Zygote process then loads and runs the app’s code in the new process. This allows most of the RAM pages allocated for framework code and resources to be shared across all app processes.</li>\n<li>Most static data is mmapped into a process. This not only allows that same data to be shared between processes but also allows it to be paged out when needed. Example static data include: Dalvik code (by placing it in a pre-linked .odex file for direct mmapping), app resources (by designing the resource table to be a structure that can be mmapped and by aligning the zip entries of the APK), and traditional project elements like native code in .so files.</li>\n<li>In many places, Android shares the same dynamic RAM across processes using explicitly allocated shared memory regions (either with ashmem or gralloc). For example, window surfaces use shared memory between the app and screen compositor, and cursor buffers use shared memory between the content provider and client.</li>\n</ol>\n<h3 id=\"2-Allocating-and-Reclaiming-App-Memory\"><a href=\"#2-Allocating-and-Reclaiming-App-Memory\" class=\"headerlink\" title=\"2. Allocating and Reclaiming App Memory\"></a>2. Allocating and Reclaiming App Memory</h3><ol>\n<li>Dalvik分配给每个app的内存大小有一个上限；</li>\n<li>The logical size of the heap is not the same as the amount of physical memory used by the heap.</li>\n<li>The Dalvik heap does not compact the logical size of the heap.</li>\n</ol>\n<h3 id=\"3-Restricting-App-Memory\"><a href=\"#3-Restricting-App-Memory\" class=\"headerlink\" title=\"3. Restricting App Memory\"></a>3. Restricting App Memory</h3><p>Android sets a hard limit on the heap size for each app. If your app has reached the heap capacity and tries to allocate more memory, it will receive an OutOfMemoryError.</p>\n<p>如果想要知道分配了多少内存，使用<strong><em>getMemoryClass()</em></strong>，返回interger百万字节数。</p>\n<h3 id=\"4-Switching-Apps\"><a href=\"#4-Switching-Apps\" class=\"headerlink\" title=\"4. Switching Apps\"></a>4. Switching Apps</h3><p>low memory的时候，会kill LRU least-recently used process.</p>\n<h2 id=\"二、-How-Your-App-Should-Manage-Memory\"><a href=\"#二、-How-Your-App-Should-Manage-Memory\" class=\"headerlink\" title=\"二、 How Your App Should Manage Memory\"></a>二、 How Your App Should Manage Memory</h2><h3 id=\"1-Use-services-sparingly\"><a href=\"#1-Use-services-sparingly\" class=\"headerlink\" title=\"1. Use services sparingly\"></a>1. Use services sparingly</h3><ol>\n<li>一个后台运行的service完成工作后，一定确保stop，不能一直运行。否则会导致leak service，因为system会保证这个service的process占用内存等资源运行；</li>\n<li>解决办法：使用<strong><em>IntentService</em></strong>，它会在完成工作后自动finish自己；IntentService原理HandlerThread+Handler实现异步。</li>\n</ol>\n<h3 id=\"2-Release-memory-when-your-user-interface-becomes-hidden\"><a href=\"#2-Release-memory-when-your-user-interface-becomes-hidden\" class=\"headerlink\" title=\"2. Release memory when your user interface becomes hidden\"></a>2. Release memory when your user interface becomes hidden</h3><p><strong><em>onTrimmemory()</em></strong> : callback with <strong><em>TRIM_MEMORY_UI_HIDDEN</em></strong> only when all the UI components of your app process become hidden from the user.<br>更多level标签：<a href=\"http://developer.android.com/training/articles/memory.html#YourApp\" target=\"_blank\" rel=\"external\">http://developer.android.com/training/articles/memory.html#YourApp</a><br><strong><em>onStop()</em></strong> : to release activity resources such as a network connection or to unregister broadcast receivers, you usually should not release your UI resources until you receive onTrimMemory(TRIM_MEMORY_UI_HIDDEN).</p>\n<h3 id=\"3-Check-how-much-memory-you-should-use\"><a href=\"#3-Check-how-much-memory-you-should-use\" class=\"headerlink\" title=\"3. Check how much memory you should use\"></a>3. Check how much memory you should use</h3><p><strong><em>getMemoryClass()</em></strong> to get an estimate of your app’s available heap in megabytes. If your app tries to allocate more memory than is available here, it will receive an OutOfMemoryError.</p>\n<p><strong><em>getLargeMemoryClass()</em></strong> In very special situations, call this to get an estimate of the large heap size, setting the largeHeap attribute to “true” in the manifest <application> tag.</application></p>\n<h3 id=\"4-Avoid-wasting-memory-with-bitmaps\"><a href=\"#4-Avoid-wasting-memory-with-bitmaps\" class=\"headerlink\" title=\"4. Avoid wasting memory with bitmaps\"></a>4. Avoid wasting memory with bitmaps</h3><p><strong><em>Keep it in RAM only at the resolution you need</em></strong> for the current device’s screen, scaling it down if the original bitmap is a higher resolution.<br>更多参考： Android-Displaying-Bitmap-Efficiently</p>\n<h3 id=\"5-Use-optimized-data-containers\"><a href=\"#5-Use-optimized-data-containers\" class=\"headerlink\" title=\"5. Use optimized data containers\"></a>5. Use optimized data containers</h3><p><strong><em>Take advantage of optimized containers</em></strong> in the Android framework, <strong><em>such as SparseArray, SparseBooleanArray, and LongSparseArray</em></strong>, <strong><em>instead of HashMap</em></strong> which can be quite memory inefficient because it needs a separate entry object for every mapping. </p>\n<p>为何SparseArray要比hashMap要好，both because it avoids</p>\n<ul>\n<li>auto-boxing keys and its data structure doesn’t rely on an extra entry object for each mapping.因为他不需要autoboxing(即将原始类型封装为对象类型，比如把int类型封装成Integer类型）。<strong><em>当数据量不多(几百)的时候，用SparseArra。但是数据量多hashmap效率较高</em></strong></li>\n</ul>\n<h3 id=\"6-Be-aware-of-memory-overhead\"><a href=\"#6-Be-aware-of-memory-overhead\" class=\"headerlink\" title=\"6. Be aware of memory overhead\"></a>6. Be aware of memory overhead</h3><ol>\n<li>Enums often require more than twice as much memory as static constants. You should strictly avoid using enums on Android.</li>\n<li>Every class in Java (including anonymous inner classes) uses about 500 bytes of code.</li>\n<li>Every class instance has 12-16 bytes of RAM overhead.</li>\n<li>Putting a single entry into a HashMap requires the allocation of an additional entry object that takes 32 bytes (see the previous section about optimized data containers).</li>\n</ol>\n<h3 id=\"7-Be-careful-with-code-abstractions\"><a href=\"#7-Be-careful-with-code-abstractions\" class=\"headerlink\" title=\"7. Be careful with code abstractions\"></a>7. Be careful with code abstractions</h3><p>抽象可以更加敏捷和便于维护。然而抽象会有they require a fair amount more code that needs to be executed, requiring more time and more RAM for that code to be mapped into memory. 所以如果抽象并不是具有明显的意义，不要使用。</p>\n<h3 id=\"8-Use-nano-protobufs-for-serialized-data\"><a href=\"#8-Use-nano-protobufs-for-serialized-data\" class=\"headerlink\" title=\"8. Use nano protobufs for serialized data\"></a>8. Use nano protobufs for serialized data</h3><p>PB nano</p>\n<h3 id=\"9-Avoid-dependency-injection-frameworks\"><a href=\"#9-Avoid-dependency-injection-frameworks\" class=\"headerlink\" title=\"9. Avoid dependency injection frameworks\"></a>9. Avoid dependency injection frameworks</h3><p>Using <strong><em>a dependency injection framework</em></strong> <strong><em>such as Guice or RoboGuice</em></strong> may be attractive because they can simplify the code you write and provide an adaptive environment that’s useful for testing and other configuration changes. However, <strong><em>these frameworks tend to perform a lot of process initialization by scanning your code for annotations</em></strong>, which can require significant amounts of your code to be mapped into RAM even though you don’t need it. </p>\n<h3 id=\"10-Be-careful-about-using-external-libraries\"><a href=\"#10-Be-careful-about-using-external-libraries\" class=\"headerlink\" title=\"10. Be careful about using external libraries\"></a>10. Be careful about using external libraries</h3><p>注意lib的大小，以及内存占用情况。如果针对app的，注意一下兼容情况，比如用的nano pb。</p>\n<h3 id=\"11-Use-ProGuard-to-strip-out-any-unneeded-code\"><a href=\"#11-Use-ProGuard-to-strip-out-any-unneeded-code\" class=\"headerlink\" title=\"11. Use ProGuard to strip out any unneeded code\"></a>11. Use ProGuard to strip out any unneeded code</h3><p>The ProGuard tool shrinks, optimizes, and obfuscates your code by removing unused code and renaming classes, fields, and methods with semantically obscure names. Using ProGuard can make your code more compact, requiring fewer RAM pages to be mapped.</p>\n<h3 id=\"12-Use-zipalign-on-your-final-APK\"><a href=\"#12-Use-zipalign-on-your-final-APK\" class=\"headerlink\" title=\"12. Use zipalign on your final APK\"></a>12. Use zipalign on your final APK</h3><h3 id=\"13-Use-multiple-processes\"><a href=\"#13-Use-multiple-processes\" class=\"headerlink\" title=\"13. Use multiple processes\"></a>13. Use multiple processes</h3><p><strong><em>Most apps should not run multiple processes</em></strong>, as it can easily increase—rather than decrease—your RAM footprint if done incorrectly.</p>\n<p>An example of when multiple processes may be appropriate is when building a music player that plays music from a service for long period of time. If the entire app runs in one process, then many of the allocations performed for its activity UI must be kept around as long as it is playing music.</p>\n<p><strong><em>new process</em></strong><br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;service android:<span class=\"built_in\">name</span>=<span class=\"string\">\".PlaybackService\"</span></span><br><span class=\"line\">         android:process=<span class=\"string\">\":newprocessname\"</span> /&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>Concern</em></strong></p>\n<ol>\n<li>两个process，一个处理ui，另一个与ui无关。</li>\n<li>注意代码规范，比如如果用了enum，此时2个进程占用的内存就会双份。</li>\n<li>注意两个进程间的依赖，不能有任何的content provider或者service的依赖：For example, if your app has a content provider that you have running in the default process which also hosts your UI, then code in a background process that uses that content provider will also require that your UI process remain in RAM. If your goal is to have a background process that can run independently of a heavy-weight UI process, it can’t have dependencies on content providers or services that execute in the UI process.</li>\n</ol>\n","excerpt":"","more":"<p>Android App上内存管理。</p>\n<h2 id=\"一、-How-Android-Manages-Memory\"><a href=\"#一、-How-Android-Manages-Memory\" class=\"headerlink\" title=\"一、 How Android Manages Memory\"></a>一、 How Android Manages Memory</h2><p>Android does not offer swap space for memory, but it does use paging and memory-mapping (mmapping) to manage memory. 所以，唯一的释放内存的方式就是释放对象的引用。</p>\n<h3 id=\"1-Sharing-Memory\"><a href=\"#1-Sharing-Memory\" class=\"headerlink\" title=\"1. Sharing Memory\"></a>1. Sharing Memory</h3><ol>\n<li>Each app process is forked from an existing process called Zygote. The Zygote process starts when the system boots and loads common framework code and resources (such as activity themes). To start a new app process, the system forks the Zygote process then loads and runs the app’s code in the new process. This allows most of the RAM pages allocated for framework code and resources to be shared across all app processes.</li>\n<li>Most static data is mmapped into a process. This not only allows that same data to be shared between processes but also allows it to be paged out when needed. Example static data include: Dalvik code (by placing it in a pre-linked .odex file for direct mmapping), app resources (by designing the resource table to be a structure that can be mmapped and by aligning the zip entries of the APK), and traditional project elements like native code in .so files.</li>\n<li>In many places, Android shares the same dynamic RAM across processes using explicitly allocated shared memory regions (either with ashmem or gralloc). For example, window surfaces use shared memory between the app and screen compositor, and cursor buffers use shared memory between the content provider and client.</li>\n</ol>\n<h3 id=\"2-Allocating-and-Reclaiming-App-Memory\"><a href=\"#2-Allocating-and-Reclaiming-App-Memory\" class=\"headerlink\" title=\"2. Allocating and Reclaiming App Memory\"></a>2. Allocating and Reclaiming App Memory</h3><ol>\n<li>Dalvik分配给每个app的内存大小有一个上限；</li>\n<li>The logical size of the heap is not the same as the amount of physical memory used by the heap.</li>\n<li>The Dalvik heap does not compact the logical size of the heap.</li>\n</ol>\n<h3 id=\"3-Restricting-App-Memory\"><a href=\"#3-Restricting-App-Memory\" class=\"headerlink\" title=\"3. Restricting App Memory\"></a>3. Restricting App Memory</h3><p>Android sets a hard limit on the heap size for each app. If your app has reached the heap capacity and tries to allocate more memory, it will receive an OutOfMemoryError.</p>\n<p>如果想要知道分配了多少内存，使用<strong><em>getMemoryClass()</em></strong>，返回interger百万字节数。</p>\n<h3 id=\"4-Switching-Apps\"><a href=\"#4-Switching-Apps\" class=\"headerlink\" title=\"4. Switching Apps\"></a>4. Switching Apps</h3><p>low memory的时候，会kill LRU least-recently used process.</p>\n<h2 id=\"二、-How-Your-App-Should-Manage-Memory\"><a href=\"#二、-How-Your-App-Should-Manage-Memory\" class=\"headerlink\" title=\"二、 How Your App Should Manage Memory\"></a>二、 How Your App Should Manage Memory</h2><h3 id=\"1-Use-services-sparingly\"><a href=\"#1-Use-services-sparingly\" class=\"headerlink\" title=\"1. Use services sparingly\"></a>1. Use services sparingly</h3><ol>\n<li>一个后台运行的service完成工作后，一定确保stop，不能一直运行。否则会导致leak service，因为system会保证这个service的process占用内存等资源运行；</li>\n<li>解决办法：使用<strong><em>IntentService</em></strong>，它会在完成工作后自动finish自己；IntentService原理HandlerThread+Handler实现异步。</li>\n</ol>\n<h3 id=\"2-Release-memory-when-your-user-interface-becomes-hidden\"><a href=\"#2-Release-memory-when-your-user-interface-becomes-hidden\" class=\"headerlink\" title=\"2. Release memory when your user interface becomes hidden\"></a>2. Release memory when your user interface becomes hidden</h3><p><strong><em>onTrimmemory()</em></strong> : callback with <strong><em>TRIM_MEMORY_UI_HIDDEN</em></strong> only when all the UI components of your app process become hidden from the user.<br>更多level标签：<a href=\"http://developer.android.com/training/articles/memory.html#YourApp\">http://developer.android.com/training/articles/memory.html#YourApp</a><br><strong><em>onStop()</em></strong> : to release activity resources such as a network connection or to unregister broadcast receivers, you usually should not release your UI resources until you receive onTrimMemory(TRIM_MEMORY_UI_HIDDEN).</p>\n<h3 id=\"3-Check-how-much-memory-you-should-use\"><a href=\"#3-Check-how-much-memory-you-should-use\" class=\"headerlink\" title=\"3. Check how much memory you should use\"></a>3. Check how much memory you should use</h3><p><strong><em>getMemoryClass()</em></strong> to get an estimate of your app’s available heap in megabytes. If your app tries to allocate more memory than is available here, it will receive an OutOfMemoryError.</p>\n<p><strong><em>getLargeMemoryClass()</em></strong> In very special situations, call this to get an estimate of the large heap size, setting the largeHeap attribute to “true” in the manifest <application> tag.</p>\n<h3 id=\"4-Avoid-wasting-memory-with-bitmaps\"><a href=\"#4-Avoid-wasting-memory-with-bitmaps\" class=\"headerlink\" title=\"4. Avoid wasting memory with bitmaps\"></a>4. Avoid wasting memory with bitmaps</h3><p><strong><em>Keep it in RAM only at the resolution you need</em></strong> for the current device’s screen, scaling it down if the original bitmap is a higher resolution.<br>更多参考： Android-Displaying-Bitmap-Efficiently</p>\n<h3 id=\"5-Use-optimized-data-containers\"><a href=\"#5-Use-optimized-data-containers\" class=\"headerlink\" title=\"5. Use optimized data containers\"></a>5. Use optimized data containers</h3><p><strong><em>Take advantage of optimized containers</em></strong> in the Android framework, <strong><em>such as SparseArray, SparseBooleanArray, and LongSparseArray</em></strong>, <strong><em>instead of HashMap</em></strong> which can be quite memory inefficient because it needs a separate entry object for every mapping. </p>\n<p>为何SparseArray要比hashMap要好，both because it avoids</p>\n<ul>\n<li>auto-boxing keys and its data structure doesn’t rely on an extra entry object for each mapping.因为他不需要autoboxing(即将原始类型封装为对象类型，比如把int类型封装成Integer类型）。<strong><em>当数据量不多(几百)的时候，用SparseArra。但是数据量多hashmap效率较高</em></strong></li>\n</ul>\n<h3 id=\"6-Be-aware-of-memory-overhead\"><a href=\"#6-Be-aware-of-memory-overhead\" class=\"headerlink\" title=\"6. Be aware of memory overhead\"></a>6. Be aware of memory overhead</h3><ol>\n<li>Enums often require more than twice as much memory as static constants. You should strictly avoid using enums on Android.</li>\n<li>Every class in Java (including anonymous inner classes) uses about 500 bytes of code.</li>\n<li>Every class instance has 12-16 bytes of RAM overhead.</li>\n<li>Putting a single entry into a HashMap requires the allocation of an additional entry object that takes 32 bytes (see the previous section about optimized data containers).</li>\n</ol>\n<h3 id=\"7-Be-careful-with-code-abstractions\"><a href=\"#7-Be-careful-with-code-abstractions\" class=\"headerlink\" title=\"7. Be careful with code abstractions\"></a>7. Be careful with code abstractions</h3><p>抽象可以更加敏捷和便于维护。然而抽象会有they require a fair amount more code that needs to be executed, requiring more time and more RAM for that code to be mapped into memory. 所以如果抽象并不是具有明显的意义，不要使用。</p>\n<h3 id=\"8-Use-nano-protobufs-for-serialized-data\"><a href=\"#8-Use-nano-protobufs-for-serialized-data\" class=\"headerlink\" title=\"8. Use nano protobufs for serialized data\"></a>8. Use nano protobufs for serialized data</h3><p>PB nano</p>\n<h3 id=\"9-Avoid-dependency-injection-frameworks\"><a href=\"#9-Avoid-dependency-injection-frameworks\" class=\"headerlink\" title=\"9. Avoid dependency injection frameworks\"></a>9. Avoid dependency injection frameworks</h3><p>Using <strong><em>a dependency injection framework</em></strong> <strong><em>such as Guice or RoboGuice</em></strong> may be attractive because they can simplify the code you write and provide an adaptive environment that’s useful for testing and other configuration changes. However, <strong><em>these frameworks tend to perform a lot of process initialization by scanning your code for annotations</em></strong>, which can require significant amounts of your code to be mapped into RAM even though you don’t need it. </p>\n<h3 id=\"10-Be-careful-about-using-external-libraries\"><a href=\"#10-Be-careful-about-using-external-libraries\" class=\"headerlink\" title=\"10. Be careful about using external libraries\"></a>10. Be careful about using external libraries</h3><p>注意lib的大小，以及内存占用情况。如果针对app的，注意一下兼容情况，比如用的nano pb。</p>\n<h3 id=\"11-Use-ProGuard-to-strip-out-any-unneeded-code\"><a href=\"#11-Use-ProGuard-to-strip-out-any-unneeded-code\" class=\"headerlink\" title=\"11. Use ProGuard to strip out any unneeded code\"></a>11. Use ProGuard to strip out any unneeded code</h3><p>The ProGuard tool shrinks, optimizes, and obfuscates your code by removing unused code and renaming classes, fields, and methods with semantically obscure names. Using ProGuard can make your code more compact, requiring fewer RAM pages to be mapped.</p>\n<h3 id=\"12-Use-zipalign-on-your-final-APK\"><a href=\"#12-Use-zipalign-on-your-final-APK\" class=\"headerlink\" title=\"12. Use zipalign on your final APK\"></a>12. Use zipalign on your final APK</h3><h3 id=\"13-Use-multiple-processes\"><a href=\"#13-Use-multiple-processes\" class=\"headerlink\" title=\"13. Use multiple processes\"></a>13. Use multiple processes</h3><p><strong><em>Most apps should not run multiple processes</em></strong>, as it can easily increase—rather than decrease—your RAM footprint if done incorrectly.</p>\n<p>An example of when multiple processes may be appropriate is when building a music player that plays music from a service for long period of time. If the entire app runs in one process, then many of the allocations performed for its activity UI must be kept around as long as it is playing music.</p>\n<p><strong><em>new process</em></strong><br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;service android:<span class=\"built_in\">name</span>=<span class=\"string\">\".PlaybackService\"</span></span><br><span class=\"line\">         android:process=<span class=\"string\">\":newprocessname\"</span> /&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>Concern</em></strong></p>\n<ol>\n<li>两个process，一个处理ui，另一个与ui无关。</li>\n<li>注意代码规范，比如如果用了enum，此时2个进程占用的内存就会双份。</li>\n<li>注意两个进程间的依赖，不能有任何的content provider或者service的依赖：For example, if your app has a content provider that you have running in the default process which also hosts your UI, then code in a background process that uses that content provider will also require that your UI process remain in RAM. If your goal is to have a background process that can run independently of a heavy-weight UI process, it can’t have dependencies on content providers or services that execute in the UI process.</li>\n</ol>\n"},{"title":"Android-Overview-Screen","date":"2016-03-24T06:36:50.000Z","_content":"有关Recents列表的操作。但是并没有完全弄懂。收录地址http://developer.android.com/guide/components/recents.html\n\n## 一、Brief Introduction\n\n1. 就是后台任务栏，referred to as the recents screen, recent task list, or recent apps) is a system-level UI that lists recently accessed activities and tasks.\n2. With the ***Android 5.0 release (API level 21), multiple instances of the same activity containing different documents may appear as tasks in the overview screen***. For example, Google Drive may have a task for each of several Google documents. Each document appears as a task in the overview screen.\n3. The ***ActivityManager.AppTask*** class ***lets you manage tasks***, and the activity flags of ***the Intent*** class ***let you specify when an activity is added or removed from the overview screen***. Also, ***the <activity> attributes let you set the behavior in the manifest***.\n\n## 二、 Adding Tasks to the Overview Screen\n\n启用multiple tasks功能，被启动的Act的launchmode必须是standard。\n\n### 1. Two types Diff\n\n1. manifest activity attr:     \nYou can choose between ***always*** opening the document in a new task or reusing an existing task for the document\n2. Intent flag:    \naffords greater control over when and how a document gets opened or reopened in the overview screen\n\n### 2. Using the Intent flag to add a task\n\n1. When you create a new document for your activity, pass the ***FLAG_ACTIVITY_NEW_DOCUMENT*** flag in the ***addFlags()*** method of the Intent. you call the startActivity() method of the ActivityManager.AppTask class, passing to it the intent that launches the activity. ***The system treats your activity as a new task in the overview screen***. **The FLAG_ACTIVITY_NEW_DOCUMENT flag replaces the FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET flag, which is deprecated as of Android 5.0 (API level 21)**.    \n***Note:*** Activities launched with the FLAG_ACTIVITY_NEW_DOCUMENT flag ***must have the android:launchMode=\"standard\"*** attribute value (the default) set in the manifest.\n2. 有FLAG_ACTIVITY_NEW_DOCUMENT时，将会新建一个task Act，但是相同的Act只有一个，之后启动的会走onNewIntent();如果想要每一次启动都是一个新的task Act，需要再addFlags(Intent.FLAG_ACTIVITY_MULTIPLE_TASK); 这样不论Act内容是否相同，都会创建新的Act task。\n\n### 3. Using the activity attribute  \"android:documentLaunchMode\" to add a task\n\n1. intoExisting    \nsame as FLAG_ACTIVITY_NEW_DOCUMENT.\n2. always    \nsame as FLAG_ACTIVITY_NEW_DOCUMENT & FLAG_INTENT_MULTIPLE_TASK.\n3. none    \ndefault behavior.\n4. never    \nSetting this value overrides the behavior of the FLAG_ACTIVITY_NEW_DOCUMENT and FLAG_ACTIVITY_MULTIPLE_TASK flags.\n\n***Note:*** For values other than \"none\" and \"never\" the activity must be defined with launchMode=\"standard\".\n\n\n## 三、 Removing Tasks\n\n### 1. Using the activity attribute\n\n1. Adding ***android:excludeFromRecents=true*** to \\<activity> attr, You can always exclude a task from the overview screen entirely.\n> 这个隐藏的act哪里去了。。关闭启动他的act也没有走onDestroy，达到maxRecents> 也没有onDestroy, 调用finishAndRemoveTask()也没有onDestroy\n> \n\n2. You can set the maximum number of tasks that your app can include in the overview screen by setting the <activity> attribute ***android:maxRecents*** to an integer value.     \nDefault is 16; 到达上限后least recently uesed is removed但是没有onDestroy！ 最大值是50（25 on low memory devices）。最小值1。\n\n### 2. Using the AppTask class to remove tasks\n\n1. finishAndRemoveTask();     \n> finish all activities associated with the activity.然而并没有搞懂有什么意思。难道类似于 system.exit(0)?\n2. intent add FLAG_ACTIVITY_RETAIN_IN_RECENTS\n即使Act已经OnDestroy了，但是在recents列表里仍有显示，点击后会重新onCreate。","source":"_posts/android-overview-screen.md","raw":"title: Android-Overview-Screen\ncategories:\n  - Android\ntags:\n  - Android\n  - Tasks\n  - Stack\n  - OverviewScreen\ndate: 2016-03-24 14:36:50\n---\n有关Recents列表的操作。但是并没有完全弄懂。收录地址http://developer.android.com/guide/components/recents.html\n\n## 一、Brief Introduction\n\n1. 就是后台任务栏，referred to as the recents screen, recent task list, or recent apps) is a system-level UI that lists recently accessed activities and tasks.\n2. With the ***Android 5.0 release (API level 21), multiple instances of the same activity containing different documents may appear as tasks in the overview screen***. For example, Google Drive may have a task for each of several Google documents. Each document appears as a task in the overview screen.\n3. The ***ActivityManager.AppTask*** class ***lets you manage tasks***, and the activity flags of ***the Intent*** class ***let you specify when an activity is added or removed from the overview screen***. Also, ***the <activity> attributes let you set the behavior in the manifest***.\n\n## 二、 Adding Tasks to the Overview Screen\n\n启用multiple tasks功能，被启动的Act的launchmode必须是standard。\n\n### 1. Two types Diff\n\n1. manifest activity attr:     \nYou can choose between ***always*** opening the document in a new task or reusing an existing task for the document\n2. Intent flag:    \naffords greater control over when and how a document gets opened or reopened in the overview screen\n\n### 2. Using the Intent flag to add a task\n\n1. When you create a new document for your activity, pass the ***FLAG_ACTIVITY_NEW_DOCUMENT*** flag in the ***addFlags()*** method of the Intent. you call the startActivity() method of the ActivityManager.AppTask class, passing to it the intent that launches the activity. ***The system treats your activity as a new task in the overview screen***. **The FLAG_ACTIVITY_NEW_DOCUMENT flag replaces the FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET flag, which is deprecated as of Android 5.0 (API level 21)**.    \n***Note:*** Activities launched with the FLAG_ACTIVITY_NEW_DOCUMENT flag ***must have the android:launchMode=\"standard\"*** attribute value (the default) set in the manifest.\n2. 有FLAG_ACTIVITY_NEW_DOCUMENT时，将会新建一个task Act，但是相同的Act只有一个，之后启动的会走onNewIntent();如果想要每一次启动都是一个新的task Act，需要再addFlags(Intent.FLAG_ACTIVITY_MULTIPLE_TASK); 这样不论Act内容是否相同，都会创建新的Act task。\n\n### 3. Using the activity attribute  \"android:documentLaunchMode\" to add a task\n\n1. intoExisting    \nsame as FLAG_ACTIVITY_NEW_DOCUMENT.\n2. always    \nsame as FLAG_ACTIVITY_NEW_DOCUMENT & FLAG_INTENT_MULTIPLE_TASK.\n3. none    \ndefault behavior.\n4. never    \nSetting this value overrides the behavior of the FLAG_ACTIVITY_NEW_DOCUMENT and FLAG_ACTIVITY_MULTIPLE_TASK flags.\n\n***Note:*** For values other than \"none\" and \"never\" the activity must be defined with launchMode=\"standard\".\n\n\n## 三、 Removing Tasks\n\n### 1. Using the activity attribute\n\n1. Adding ***android:excludeFromRecents=true*** to \\<activity> attr, You can always exclude a task from the overview screen entirely.\n> 这个隐藏的act哪里去了。。关闭启动他的act也没有走onDestroy，达到maxRecents> 也没有onDestroy, 调用finishAndRemoveTask()也没有onDestroy\n> \n\n2. You can set the maximum number of tasks that your app can include in the overview screen by setting the <activity> attribute ***android:maxRecents*** to an integer value.     \nDefault is 16; 到达上限后least recently uesed is removed但是没有onDestroy！ 最大值是50（25 on low memory devices）。最小值1。\n\n### 2. Using the AppTask class to remove tasks\n\n1. finishAndRemoveTask();     \n> finish all activities associated with the activity.然而并没有搞懂有什么意思。难道类似于 system.exit(0)?\n2. intent add FLAG_ACTIVITY_RETAIN_IN_RECENTS\n即使Act已经OnDestroy了，但是在recents列表里仍有显示，点击后会重新onCreate。","slug":"android-overview-screen","published":1,"updated":"2016-03-28T03:02:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimx9uskn000lj9v8vo05ny53","content":"<p>有关Recents列表的操作。但是并没有完全弄懂。收录地址<a href=\"http://developer.android.com/guide/components/recents.html\" target=\"_blank\" rel=\"external\">http://developer.android.com/guide/components/recents.html</a></p>\n<h2 id=\"一、Brief-Introduction\"><a href=\"#一、Brief-Introduction\" class=\"headerlink\" title=\"一、Brief Introduction\"></a>一、Brief Introduction</h2><ol>\n<li>就是后台任务栏，referred to as the recents screen, recent task list, or recent apps) is a system-level UI that lists recently accessed activities and tasks.</li>\n<li>With the <strong><em>Android 5.0 release (API level 21), multiple instances of the same activity containing different documents may appear as tasks in the overview screen</em></strong>. For example, Google Drive may have a task for each of several Google documents. Each document appears as a task in the overview screen.</li>\n<li>The <strong><em>ActivityManager.AppTask</em></strong> class <strong><em>lets you manage tasks</em></strong>, and the activity flags of <strong><em>the Intent</em></strong> class <strong><em>let you specify when an activity is added or removed from the overview screen</em></strong>. Also, <strong><em>the <activity> attributes let you set the behavior in the manifest</activity></em></strong>.</li>\n</ol>\n<h2 id=\"二、-Adding-Tasks-to-the-Overview-Screen\"><a href=\"#二、-Adding-Tasks-to-the-Overview-Screen\" class=\"headerlink\" title=\"二、 Adding Tasks to the Overview Screen\"></a>二、 Adding Tasks to the Overview Screen</h2><p>启用multiple tasks功能，被启动的Act的launchmode必须是standard。</p>\n<h3 id=\"1-Two-types-Diff\"><a href=\"#1-Two-types-Diff\" class=\"headerlink\" title=\"1. Two types Diff\"></a>1. Two types Diff</h3><ol>\n<li>manifest activity attr:<br>You can choose between <strong><em>always</em></strong> opening the document in a new task or reusing an existing task for the document</li>\n<li>Intent flag:<br>affords greater control over when and how a document gets opened or reopened in the overview screen</li>\n</ol>\n<h3 id=\"2-Using-the-Intent-flag-to-add-a-task\"><a href=\"#2-Using-the-Intent-flag-to-add-a-task\" class=\"headerlink\" title=\"2. Using the Intent flag to add a task\"></a>2. Using the Intent flag to add a task</h3><ol>\n<li>When you create a new document for your activity, pass the <strong><em>FLAG_ACTIVITY_NEW_DOCUMENT</em></strong> flag in the <strong><em>addFlags()</em></strong> method of the Intent. you call the startActivity() method of the ActivityManager.AppTask class, passing to it the intent that launches the activity. <strong><em>The system treats your activity as a new task in the overview screen</em></strong>. <strong>The FLAG_ACTIVITY_NEW_DOCUMENT flag replaces the FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET flag, which is deprecated as of Android 5.0 (API level 21)</strong>.<br><strong><em>Note:</em></strong> Activities launched with the FLAG_ACTIVITY_NEW_DOCUMENT flag <strong><em>must have the android:launchMode=”standard”</em></strong> attribute value (the default) set in the manifest.</li>\n<li>有FLAG_ACTIVITY_NEW_DOCUMENT时，将会新建一个task Act，但是相同的Act只有一个，之后启动的会走onNewIntent();如果想要每一次启动都是一个新的task Act，需要再addFlags(Intent.FLAG_ACTIVITY_MULTIPLE_TASK); 这样不论Act内容是否相同，都会创建新的Act task。</li>\n</ol>\n<h3 id=\"3-Using-the-activity-attribute-“android-documentLaunchMode”-to-add-a-task\"><a href=\"#3-Using-the-activity-attribute-“android-documentLaunchMode”-to-add-a-task\" class=\"headerlink\" title=\"3. Using the activity attribute  “android:documentLaunchMode” to add a task\"></a>3. Using the activity attribute  “android:documentLaunchMode” to add a task</h3><ol>\n<li>intoExisting<br>same as FLAG_ACTIVITY_NEW_DOCUMENT.</li>\n<li>always<br>same as FLAG_ACTIVITY_NEW_DOCUMENT &amp; FLAG_INTENT_MULTIPLE_TASK.</li>\n<li>none<br>default behavior.</li>\n<li>never<br>Setting this value overrides the behavior of the FLAG_ACTIVITY_NEW_DOCUMENT and FLAG_ACTIVITY_MULTIPLE_TASK flags.</li>\n</ol>\n<p><strong><em>Note:</em></strong> For values other than “none” and “never” the activity must be defined with launchMode=”standard”.</p>\n<h2 id=\"三、-Removing-Tasks\"><a href=\"#三、-Removing-Tasks\" class=\"headerlink\" title=\"三、 Removing Tasks\"></a>三、 Removing Tasks</h2><h3 id=\"1-Using-the-activity-attribute\"><a href=\"#1-Using-the-activity-attribute\" class=\"headerlink\" title=\"1. Using the activity attribute\"></a>1. Using the activity attribute</h3><ol>\n<li><p>Adding <strong><em>android:excludeFromRecents=true</em></strong> to \\<activity> attr, You can always exclude a task from the overview screen entirely.</activity></p>\n<blockquote>\n<p>这个隐藏的act哪里去了。。关闭启动他的act也没有走onDestroy，达到maxRecents&gt; 也没有onDestroy, 调用finishAndRemoveTask()也没有onDestroy</p>\n</blockquote>\n</li>\n<li><p>You can set the maximum number of tasks that your app can include in the overview screen by setting the <activity> attribute <strong><em>android:maxRecents</em></strong> to an integer value.<br>Default is 16; 到达上限后least recently uesed is removed但是没有onDestroy！ 最大值是50（25 on low memory devices）。最小值1。</activity></p>\n</li>\n</ol>\n<h3 id=\"2-Using-the-AppTask-class-to-remove-tasks\"><a href=\"#2-Using-the-AppTask-class-to-remove-tasks\" class=\"headerlink\" title=\"2. Using the AppTask class to remove tasks\"></a>2. Using the AppTask class to remove tasks</h3><ol>\n<li>finishAndRemoveTask();     <blockquote>\n<p>finish all activities associated with the activity.然而并没有搞懂有什么意思。难道类似于 system.exit(0)?</p>\n</blockquote>\n</li>\n<li>intent add FLAG_ACTIVITY_RETAIN_IN_RECENTS<br>即使Act已经OnDestroy了，但是在recents列表里仍有显示，点击后会重新onCreate。</li>\n</ol>\n","excerpt":"","more":"<p>有关Recents列表的操作。但是并没有完全弄懂。收录地址<a href=\"http://developer.android.com/guide/components/recents.html\">http://developer.android.com/guide/components/recents.html</a></p>\n<h2 id=\"一、Brief-Introduction\"><a href=\"#一、Brief-Introduction\" class=\"headerlink\" title=\"一、Brief Introduction\"></a>一、Brief Introduction</h2><ol>\n<li>就是后台任务栏，referred to as the recents screen, recent task list, or recent apps) is a system-level UI that lists recently accessed activities and tasks.</li>\n<li>With the <strong><em>Android 5.0 release (API level 21), multiple instances of the same activity containing different documents may appear as tasks in the overview screen</em></strong>. For example, Google Drive may have a task for each of several Google documents. Each document appears as a task in the overview screen.</li>\n<li>The <strong><em>ActivityManager.AppTask</em></strong> class <strong><em>lets you manage tasks</em></strong>, and the activity flags of <strong><em>the Intent</em></strong> class <strong><em>let you specify when an activity is added or removed from the overview screen</em></strong>. Also, <strong><em>the <activity> attributes let you set the behavior in the manifest</em></strong>.</li>\n</ol>\n<h2 id=\"二、-Adding-Tasks-to-the-Overview-Screen\"><a href=\"#二、-Adding-Tasks-to-the-Overview-Screen\" class=\"headerlink\" title=\"二、 Adding Tasks to the Overview Screen\"></a>二、 Adding Tasks to the Overview Screen</h2><p>启用multiple tasks功能，被启动的Act的launchmode必须是standard。</p>\n<h3 id=\"1-Two-types-Diff\"><a href=\"#1-Two-types-Diff\" class=\"headerlink\" title=\"1. Two types Diff\"></a>1. Two types Diff</h3><ol>\n<li>manifest activity attr:<br>You can choose between <strong><em>always</em></strong> opening the document in a new task or reusing an existing task for the document</li>\n<li>Intent flag:<br>affords greater control over when and how a document gets opened or reopened in the overview screen</li>\n</ol>\n<h3 id=\"2-Using-the-Intent-flag-to-add-a-task\"><a href=\"#2-Using-the-Intent-flag-to-add-a-task\" class=\"headerlink\" title=\"2. Using the Intent flag to add a task\"></a>2. Using the Intent flag to add a task</h3><ol>\n<li>When you create a new document for your activity, pass the <strong><em>FLAG_ACTIVITY_NEW_DOCUMENT</em></strong> flag in the <strong><em>addFlags()</em></strong> method of the Intent. you call the startActivity() method of the ActivityManager.AppTask class, passing to it the intent that launches the activity. <strong><em>The system treats your activity as a new task in the overview screen</em></strong>. <strong>The FLAG_ACTIVITY_NEW_DOCUMENT flag replaces the FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET flag, which is deprecated as of Android 5.0 (API level 21)</strong>.<br><strong><em>Note:</em></strong> Activities launched with the FLAG_ACTIVITY_NEW_DOCUMENT flag <strong><em>must have the android:launchMode=”standard”</em></strong> attribute value (the default) set in the manifest.</li>\n<li>有FLAG_ACTIVITY_NEW_DOCUMENT时，将会新建一个task Act，但是相同的Act只有一个，之后启动的会走onNewIntent();如果想要每一次启动都是一个新的task Act，需要再addFlags(Intent.FLAG_ACTIVITY_MULTIPLE_TASK); 这样不论Act内容是否相同，都会创建新的Act task。</li>\n</ol>\n<h3 id=\"3-Using-the-activity-attribute-“android-documentLaunchMode”-to-add-a-task\"><a href=\"#3-Using-the-activity-attribute-“android-documentLaunchMode”-to-add-a-task\" class=\"headerlink\" title=\"3. Using the activity attribute  “android:documentLaunchMode” to add a task\"></a>3. Using the activity attribute  “android:documentLaunchMode” to add a task</h3><ol>\n<li>intoExisting<br>same as FLAG_ACTIVITY_NEW_DOCUMENT.</li>\n<li>always<br>same as FLAG_ACTIVITY_NEW_DOCUMENT &amp; FLAG_INTENT_MULTIPLE_TASK.</li>\n<li>none<br>default behavior.</li>\n<li>never<br>Setting this value overrides the behavior of the FLAG_ACTIVITY_NEW_DOCUMENT and FLAG_ACTIVITY_MULTIPLE_TASK flags.</li>\n</ol>\n<p><strong><em>Note:</em></strong> For values other than “none” and “never” the activity must be defined with launchMode=”standard”.</p>\n<h2 id=\"三、-Removing-Tasks\"><a href=\"#三、-Removing-Tasks\" class=\"headerlink\" title=\"三、 Removing Tasks\"></a>三、 Removing Tasks</h2><h3 id=\"1-Using-the-activity-attribute\"><a href=\"#1-Using-the-activity-attribute\" class=\"headerlink\" title=\"1. Using the activity attribute\"></a>1. Using the activity attribute</h3><ol>\n<li><p>Adding <strong><em>android:excludeFromRecents=true</em></strong> to \\<activity> attr, You can always exclude a task from the overview screen entirely.</p>\n<blockquote>\n<p>这个隐藏的act哪里去了。。关闭启动他的act也没有走onDestroy，达到maxRecents&gt; 也没有onDestroy, 调用finishAndRemoveTask()也没有onDestroy</p>\n</blockquote>\n</li>\n<li><p>You can set the maximum number of tasks that your app can include in the overview screen by setting the <activity> attribute <strong><em>android:maxRecents</em></strong> to an integer value.<br>Default is 16; 到达上限后least recently uesed is removed但是没有onDestroy！ 最大值是50（25 on low memory devices）。最小值1。</p>\n</li>\n</ol>\n<h3 id=\"2-Using-the-AppTask-class-to-remove-tasks\"><a href=\"#2-Using-the-AppTask-class-to-remove-tasks\" class=\"headerlink\" title=\"2. Using the AppTask class to remove tasks\"></a>2. Using the AppTask class to remove tasks</h3><ol>\n<li>finishAndRemoveTask();     <blockquote>\n<p>finish all activities associated with the activity.然而并没有搞懂有什么意思。难道类似于 system.exit(0)?</p>\n</blockquote>\n</li>\n<li>intent add FLAG_ACTIVITY_RETAIN_IN_RECENTS<br>即使Act已经OnDestroy了，但是在recents列表里仍有显示，点击后会重新onCreate。</li>\n</ol>\n"},{"title":"Android-Performance-Tools","date":"2016-03-30T07:52:25.000Z","_content":"性能优化工具介绍及使用。\n\n## 一、 Performance Profiling Tools\n\nPutting pixels on the screen involves four primary pieces of hardware. \n\n1. the CPU computes display lists\n2. the GPU renders images to the display\n3. the memory stores images and data\n4. the battery provides electrical power\n\nEach of these pieces of hardware has constraints; pushing or exceeding those constraints causes your app to be slow, have bad display performance, or exhaust the battery. \n\n### 1. Traceview \n### 2. Systrace\n\n## 二、 Compute Analysis Tools\n\n## 三、 Rendering Analysis Tools\n\n### 1. Debug GPU Overdraw\n\n##### 1. Enable in Developer Options\n##### 2. Color:\n\n* True Color: no overdraw 代码指定的实际颜色\n* Blue: overdraw once  其实有点偏紫色\n* Green: overdraw twice 浅绿色\n* Pink: overdraw three times\n* Red: overdraw four or more times\n\n### 2. Profiling GPU Rendering\n\n#### 1. Enable in Developer Options : Profile GPU Rendering\n##### 2. 原理：\n大多数卡顿是因为渲染性能问题。Android每16ms发送VSYNC信号对UI进行渲染，每次渲染即为一帧。如果16ms内没有绘制完，比如在20ms绘制完，则实际上用户在32ms内看到一帧，丢失一帧显示。丢帧太多，就会卡顿。所以要尽量保证所有的操作在16ms内完成。    \n##### 3. 为什么16ms？\n人视觉产生连续效果需要达到基本的24fps，电影一般用这个帧数。60fps是人眼能感受到的最快的变化，超过60fps是不必要的。为了达到60fps，即需要16ms绘制一帧。    \n每16ms刷新一次的刷新频率，60fps的帧频率，如果刚好匹配，则完美工作。实际上很难刚好保证同步。\n\n1. 帧率超过刷新频率，即在16ms等待VSYNC刷新信号的过程中，帧数据需要等待VSYNC刷新被hold住以保持每次刷新都有数据可以显示；\n2. 帧率低于刷新频率。即16ms内没有绘制完一帧，用户在32ms、48ms内看到一帧完整显示。就是卡顿了。\n\n##### 4. Colors\n\n1. 绿线表示16ms； 每一帧超过16ms，就意味着丢失一帧；\n2. 帧的颜色从底部到顶部：\n\t* 绿色：代表创建和更新view的时间；过长表示同时绘制的view过多或ondraw比较费时；\n\t* 紫色：4.0之上才有，传输资源到渲染线程花费的时间\n\t* 红色：OpenGL渲染图像花费的时间\n\t* 黄色：CPU等待GPU绘制结束花费的时间，如果过长，说明GPU工作很多。CPU发送cmd给GPU后，需要等过长时间才能发送新的cmd，会导致黄色很长。\n \n### 3. Hierarchy Viewer\nThe Hierarchy Viewer tool visualizes your ***app's view hierarchy*** and ***profiles the relative rendering speed for each view***. \n\n1. 但是。。不会用。我咔咔咔。下面这里也没看懂怎样就是有问题，怎样去优化\nhttp://developer.android.com/tools/performance/hierarchy-viewer/profiling.html\n \n## 四、 Memory Analysis Tools\n通过Memory Monitor观察到频繁的GC，用Heap Viewer看一下对象类型，用Allocation Tracker找到问题代码位置。\n\n### 1. MemoryMonitor\n\n##### 1. 查看内容\n\n1. free和allocated的内存\n2. 查看GC garbage collection的频率是否正常，频繁gc导致性能问题。\n3. 是否内存溢出导致crash\n4. 看看是否有内存泄漏\n\n### 2. Heap Viewer\n\nAndroid Monitor和DDMS里都有。\n\n＃#### 1. 查看内容\n1. 查看分配内存的对象，数量及占内存大小\n2. 查看不必要分配的内存对象，检查内存泄漏\n\n### 3. Allocation Tracker\n\n1. 可以帮助找到问题代码的位置。\n\n##### 1. 查看内容\n\n\n### 4. Investigating Your RAM Usage\n\n#####  1. Interpreting Dalvik Log Messages\n\n1. GC Reason\n\t* ***GC_CONCURRENT***\n    A concurrent GC that frees up memory as your heap begins to fill up.\n\t* ***GC_FOR_MALLOC***    \n    A GC caused because your app attempted to allocate memory when your heap was already full, so the system had to stop your app and reclaim memory.\n\t* ***GC_HPROF_DUMP_HEAP***    \n    A GC that occurs when you request to create an HPROF file to analyze your heap.\n\t* ***GC_EXPLICIT***    \n    An explicit GC, such as when you call gc() (which you should avoid calling and instead trust the GC to run when needed).\n\n##### 2. ART Log Message\n\nhttp://developer.android.com/tools/debugging/debugging-memory.html#LogMessages\n\n## 五、 Battery Analysis Tools","source":"_posts/android-performance-tools.md","raw":"title: Android-Performance-Tools\ncategories:\n\t- Android\ntags:\n\t- Android\n\t- Optimization\ndate: 2016-03-30 15:52:25\n---\n性能优化工具介绍及使用。\n\n## 一、 Performance Profiling Tools\n\nPutting pixels on the screen involves four primary pieces of hardware. \n\n1. the CPU computes display lists\n2. the GPU renders images to the display\n3. the memory stores images and data\n4. the battery provides electrical power\n\nEach of these pieces of hardware has constraints; pushing or exceeding those constraints causes your app to be slow, have bad display performance, or exhaust the battery. \n\n### 1. Traceview \n### 2. Systrace\n\n## 二、 Compute Analysis Tools\n\n## 三、 Rendering Analysis Tools\n\n### 1. Debug GPU Overdraw\n\n##### 1. Enable in Developer Options\n##### 2. Color:\n\n* True Color: no overdraw 代码指定的实际颜色\n* Blue: overdraw once  其实有点偏紫色\n* Green: overdraw twice 浅绿色\n* Pink: overdraw three times\n* Red: overdraw four or more times\n\n### 2. Profiling GPU Rendering\n\n#### 1. Enable in Developer Options : Profile GPU Rendering\n##### 2. 原理：\n大多数卡顿是因为渲染性能问题。Android每16ms发送VSYNC信号对UI进行渲染，每次渲染即为一帧。如果16ms内没有绘制完，比如在20ms绘制完，则实际上用户在32ms内看到一帧，丢失一帧显示。丢帧太多，就会卡顿。所以要尽量保证所有的操作在16ms内完成。    \n##### 3. 为什么16ms？\n人视觉产生连续效果需要达到基本的24fps，电影一般用这个帧数。60fps是人眼能感受到的最快的变化，超过60fps是不必要的。为了达到60fps，即需要16ms绘制一帧。    \n每16ms刷新一次的刷新频率，60fps的帧频率，如果刚好匹配，则完美工作。实际上很难刚好保证同步。\n\n1. 帧率超过刷新频率，即在16ms等待VSYNC刷新信号的过程中，帧数据需要等待VSYNC刷新被hold住以保持每次刷新都有数据可以显示；\n2. 帧率低于刷新频率。即16ms内没有绘制完一帧，用户在32ms、48ms内看到一帧完整显示。就是卡顿了。\n\n##### 4. Colors\n\n1. 绿线表示16ms； 每一帧超过16ms，就意味着丢失一帧；\n2. 帧的颜色从底部到顶部：\n\t* 绿色：代表创建和更新view的时间；过长表示同时绘制的view过多或ondraw比较费时；\n\t* 紫色：4.0之上才有，传输资源到渲染线程花费的时间\n\t* 红色：OpenGL渲染图像花费的时间\n\t* 黄色：CPU等待GPU绘制结束花费的时间，如果过长，说明GPU工作很多。CPU发送cmd给GPU后，需要等过长时间才能发送新的cmd，会导致黄色很长。\n \n### 3. Hierarchy Viewer\nThe Hierarchy Viewer tool visualizes your ***app's view hierarchy*** and ***profiles the relative rendering speed for each view***. \n\n1. 但是。。不会用。我咔咔咔。下面这里也没看懂怎样就是有问题，怎样去优化\nhttp://developer.android.com/tools/performance/hierarchy-viewer/profiling.html\n \n## 四、 Memory Analysis Tools\n通过Memory Monitor观察到频繁的GC，用Heap Viewer看一下对象类型，用Allocation Tracker找到问题代码位置。\n\n### 1. MemoryMonitor\n\n##### 1. 查看内容\n\n1. free和allocated的内存\n2. 查看GC garbage collection的频率是否正常，频繁gc导致性能问题。\n3. 是否内存溢出导致crash\n4. 看看是否有内存泄漏\n\n### 2. Heap Viewer\n\nAndroid Monitor和DDMS里都有。\n\n＃#### 1. 查看内容\n1. 查看分配内存的对象，数量及占内存大小\n2. 查看不必要分配的内存对象，检查内存泄漏\n\n### 3. Allocation Tracker\n\n1. 可以帮助找到问题代码的位置。\n\n##### 1. 查看内容\n\n\n### 4. Investigating Your RAM Usage\n\n#####  1. Interpreting Dalvik Log Messages\n\n1. GC Reason\n\t* ***GC_CONCURRENT***\n    A concurrent GC that frees up memory as your heap begins to fill up.\n\t* ***GC_FOR_MALLOC***    \n    A GC caused because your app attempted to allocate memory when your heap was already full, so the system had to stop your app and reclaim memory.\n\t* ***GC_HPROF_DUMP_HEAP***    \n    A GC that occurs when you request to create an HPROF file to analyze your heap.\n\t* ***GC_EXPLICIT***    \n    An explicit GC, such as when you call gc() (which you should avoid calling and instead trust the GC to run when needed).\n\n##### 2. ART Log Message\n\nhttp://developer.android.com/tools/debugging/debugging-memory.html#LogMessages\n\n## 五、 Battery Analysis Tools","slug":"android-performance-tools","published":1,"updated":"2016-03-31T12:12:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimx9usko000nj9v8wvg84idw","content":"<p>性能优化工具介绍及使用。</p>\n<h2 id=\"一、-Performance-Profiling-Tools\"><a href=\"#一、-Performance-Profiling-Tools\" class=\"headerlink\" title=\"一、 Performance Profiling Tools\"></a>一、 Performance Profiling Tools</h2><p>Putting pixels on the screen involves four primary pieces of hardware. </p>\n<ol>\n<li>the CPU computes display lists</li>\n<li>the GPU renders images to the display</li>\n<li>the memory stores images and data</li>\n<li>the battery provides electrical power</li>\n</ol>\n<p>Each of these pieces of hardware has constraints; pushing or exceeding those constraints causes your app to be slow, have bad display performance, or exhaust the battery. </p>\n<h3 id=\"1-Traceview\"><a href=\"#1-Traceview\" class=\"headerlink\" title=\"1. Traceview\"></a>1. Traceview</h3><h3 id=\"2-Systrace\"><a href=\"#2-Systrace\" class=\"headerlink\" title=\"2. Systrace\"></a>2. Systrace</h3><h2 id=\"二、-Compute-Analysis-Tools\"><a href=\"#二、-Compute-Analysis-Tools\" class=\"headerlink\" title=\"二、 Compute Analysis Tools\"></a>二、 Compute Analysis Tools</h2><h2 id=\"三、-Rendering-Analysis-Tools\"><a href=\"#三、-Rendering-Analysis-Tools\" class=\"headerlink\" title=\"三、 Rendering Analysis Tools\"></a>三、 Rendering Analysis Tools</h2><h3 id=\"1-Debug-GPU-Overdraw\"><a href=\"#1-Debug-GPU-Overdraw\" class=\"headerlink\" title=\"1. Debug GPU Overdraw\"></a>1. Debug GPU Overdraw</h3><h5 id=\"1-Enable-in-Developer-Options\"><a href=\"#1-Enable-in-Developer-Options\" class=\"headerlink\" title=\"1. Enable in Developer Options\"></a>1. Enable in Developer Options</h5><h5 id=\"2-Color\"><a href=\"#2-Color\" class=\"headerlink\" title=\"2. Color:\"></a>2. Color:</h5><ul>\n<li>True Color: no overdraw 代码指定的实际颜色</li>\n<li>Blue: overdraw once  其实有点偏紫色</li>\n<li>Green: overdraw twice 浅绿色</li>\n<li>Pink: overdraw three times</li>\n<li>Red: overdraw four or more times</li>\n</ul>\n<h3 id=\"2-Profiling-GPU-Rendering\"><a href=\"#2-Profiling-GPU-Rendering\" class=\"headerlink\" title=\"2. Profiling GPU Rendering\"></a>2. Profiling GPU Rendering</h3><h4 id=\"1-Enable-in-Developer-Options-Profile-GPU-Rendering\"><a href=\"#1-Enable-in-Developer-Options-Profile-GPU-Rendering\" class=\"headerlink\" title=\"1. Enable in Developer Options : Profile GPU Rendering\"></a>1. Enable in Developer Options : Profile GPU Rendering</h4><h5 id=\"2-原理：\"><a href=\"#2-原理：\" class=\"headerlink\" title=\"2. 原理：\"></a>2. 原理：</h5><p>大多数卡顿是因为渲染性能问题。Android每16ms发送VSYNC信号对UI进行渲染，每次渲染即为一帧。如果16ms内没有绘制完，比如在20ms绘制完，则实际上用户在32ms内看到一帧，丢失一帧显示。丢帧太多，就会卡顿。所以要尽量保证所有的操作在16ms内完成。    </p>\n<h5 id=\"3-为什么16ms？\"><a href=\"#3-为什么16ms？\" class=\"headerlink\" title=\"3. 为什么16ms？\"></a>3. 为什么16ms？</h5><p>人视觉产生连续效果需要达到基本的24fps，电影一般用这个帧数。60fps是人眼能感受到的最快的变化，超过60fps是不必要的。为了达到60fps，即需要16ms绘制一帧。<br>每16ms刷新一次的刷新频率，60fps的帧频率，如果刚好匹配，则完美工作。实际上很难刚好保证同步。</p>\n<ol>\n<li>帧率超过刷新频率，即在16ms等待VSYNC刷新信号的过程中，帧数据需要等待VSYNC刷新被hold住以保持每次刷新都有数据可以显示；</li>\n<li>帧率低于刷新频率。即16ms内没有绘制完一帧，用户在32ms、48ms内看到一帧完整显示。就是卡顿了。</li>\n</ol>\n<h5 id=\"4-Colors\"><a href=\"#4-Colors\" class=\"headerlink\" title=\"4. Colors\"></a>4. Colors</h5><ol>\n<li>绿线表示16ms； 每一帧超过16ms，就意味着丢失一帧；</li>\n<li>帧的颜色从底部到顶部：<ul>\n<li>绿色：代表创建和更新view的时间；过长表示同时绘制的view过多或ondraw比较费时；</li>\n<li>紫色：4.0之上才有，传输资源到渲染线程花费的时间</li>\n<li>红色：OpenGL渲染图像花费的时间</li>\n<li>黄色：CPU等待GPU绘制结束花费的时间，如果过长，说明GPU工作很多。CPU发送cmd给GPU后，需要等过长时间才能发送新的cmd，会导致黄色很长。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-Hierarchy-Viewer\"><a href=\"#3-Hierarchy-Viewer\" class=\"headerlink\" title=\"3. Hierarchy Viewer\"></a>3. Hierarchy Viewer</h3><p>The Hierarchy Viewer tool visualizes your <strong><em>app’s view hierarchy</em></strong> and <strong><em>profiles the relative rendering speed for each view</em></strong>. </p>\n<ol>\n<li>但是。。不会用。我咔咔咔。下面这里也没看懂怎样就是有问题，怎样去优化<br><a href=\"http://developer.android.com/tools/performance/hierarchy-viewer/profiling.html\" target=\"_blank\" rel=\"external\">http://developer.android.com/tools/performance/hierarchy-viewer/profiling.html</a></li>\n</ol>\n<h2 id=\"四、-Memory-Analysis-Tools\"><a href=\"#四、-Memory-Analysis-Tools\" class=\"headerlink\" title=\"四、 Memory Analysis Tools\"></a>四、 Memory Analysis Tools</h2><p>通过Memory Monitor观察到频繁的GC，用Heap Viewer看一下对象类型，用Allocation Tracker找到问题代码位置。</p>\n<h3 id=\"1-MemoryMonitor\"><a href=\"#1-MemoryMonitor\" class=\"headerlink\" title=\"1. MemoryMonitor\"></a>1. MemoryMonitor</h3><h5 id=\"1-查看内容\"><a href=\"#1-查看内容\" class=\"headerlink\" title=\"1. 查看内容\"></a>1. 查看内容</h5><ol>\n<li>free和allocated的内存</li>\n<li>查看GC garbage collection的频率是否正常，频繁gc导致性能问题。</li>\n<li>是否内存溢出导致crash</li>\n<li>看看是否有内存泄漏</li>\n</ol>\n<h3 id=\"2-Heap-Viewer\"><a href=\"#2-Heap-Viewer\" class=\"headerlink\" title=\"2. Heap Viewer\"></a>2. Heap Viewer</h3><p>Android Monitor和DDMS里都有。</p>\n<p>＃#### 1. 查看内容</p>\n<ol>\n<li>查看分配内存的对象，数量及占内存大小</li>\n<li>查看不必要分配的内存对象，检查内存泄漏</li>\n</ol>\n<h3 id=\"3-Allocation-Tracker\"><a href=\"#3-Allocation-Tracker\" class=\"headerlink\" title=\"3. Allocation Tracker\"></a>3. Allocation Tracker</h3><ol>\n<li>可以帮助找到问题代码的位置。</li>\n</ol>\n<h5 id=\"1-查看内容-1\"><a href=\"#1-查看内容-1\" class=\"headerlink\" title=\"1. 查看内容\"></a>1. 查看内容</h5><h3 id=\"4-Investigating-Your-RAM-Usage\"><a href=\"#4-Investigating-Your-RAM-Usage\" class=\"headerlink\" title=\"4. Investigating Your RAM Usage\"></a>4. Investigating Your RAM Usage</h3><h5 id=\"1-Interpreting-Dalvik-Log-Messages\"><a href=\"#1-Interpreting-Dalvik-Log-Messages\" class=\"headerlink\" title=\"1. Interpreting Dalvik Log Messages\"></a>1. Interpreting Dalvik Log Messages</h5><ol>\n<li>GC Reason<ul>\n<li><strong><em>GC_CONCURRENT</em></strong><br>A concurrent GC that frees up memory as your heap begins to fill up.</li>\n<li><strong><em>GC_FOR_MALLOC</em></strong><br>A GC caused because your app attempted to allocate memory when your heap was already full, so the system had to stop your app and reclaim memory.</li>\n<li><strong><em>GC_HPROF_DUMP_HEAP</em></strong><br>A GC that occurs when you request to create an HPROF file to analyze your heap.</li>\n<li><strong><em>GC_EXPLICIT</em></strong><br>An explicit GC, such as when you call gc() (which you should avoid calling and instead trust the GC to run when needed).</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"2-ART-Log-Message\"><a href=\"#2-ART-Log-Message\" class=\"headerlink\" title=\"2. ART Log Message\"></a>2. ART Log Message</h5><p><a href=\"http://developer.android.com/tools/debugging/debugging-memory.html#LogMessages\" target=\"_blank\" rel=\"external\">http://developer.android.com/tools/debugging/debugging-memory.html#LogMessages</a></p>\n<h2 id=\"五、-Battery-Analysis-Tools\"><a href=\"#五、-Battery-Analysis-Tools\" class=\"headerlink\" title=\"五、 Battery Analysis Tools\"></a>五、 Battery Analysis Tools</h2>","excerpt":"","more":"<p>性能优化工具介绍及使用。</p>\n<h2 id=\"一、-Performance-Profiling-Tools\"><a href=\"#一、-Performance-Profiling-Tools\" class=\"headerlink\" title=\"一、 Performance Profiling Tools\"></a>一、 Performance Profiling Tools</h2><p>Putting pixels on the screen involves four primary pieces of hardware. </p>\n<ol>\n<li>the CPU computes display lists</li>\n<li>the GPU renders images to the display</li>\n<li>the memory stores images and data</li>\n<li>the battery provides electrical power</li>\n</ol>\n<p>Each of these pieces of hardware has constraints; pushing or exceeding those constraints causes your app to be slow, have bad display performance, or exhaust the battery. </p>\n<h3 id=\"1-Traceview\"><a href=\"#1-Traceview\" class=\"headerlink\" title=\"1. Traceview\"></a>1. Traceview</h3><h3 id=\"2-Systrace\"><a href=\"#2-Systrace\" class=\"headerlink\" title=\"2. Systrace\"></a>2. Systrace</h3><h2 id=\"二、-Compute-Analysis-Tools\"><a href=\"#二、-Compute-Analysis-Tools\" class=\"headerlink\" title=\"二、 Compute Analysis Tools\"></a>二、 Compute Analysis Tools</h2><h2 id=\"三、-Rendering-Analysis-Tools\"><a href=\"#三、-Rendering-Analysis-Tools\" class=\"headerlink\" title=\"三、 Rendering Analysis Tools\"></a>三、 Rendering Analysis Tools</h2><h3 id=\"1-Debug-GPU-Overdraw\"><a href=\"#1-Debug-GPU-Overdraw\" class=\"headerlink\" title=\"1. Debug GPU Overdraw\"></a>1. Debug GPU Overdraw</h3><h5 id=\"1-Enable-in-Developer-Options\"><a href=\"#1-Enable-in-Developer-Options\" class=\"headerlink\" title=\"1. Enable in Developer Options\"></a>1. Enable in Developer Options</h5><h5 id=\"2-Color\"><a href=\"#2-Color\" class=\"headerlink\" title=\"2. Color:\"></a>2. Color:</h5><ul>\n<li>True Color: no overdraw 代码指定的实际颜色</li>\n<li>Blue: overdraw once  其实有点偏紫色</li>\n<li>Green: overdraw twice 浅绿色</li>\n<li>Pink: overdraw three times</li>\n<li>Red: overdraw four or more times</li>\n</ul>\n<h3 id=\"2-Profiling-GPU-Rendering\"><a href=\"#2-Profiling-GPU-Rendering\" class=\"headerlink\" title=\"2. Profiling GPU Rendering\"></a>2. Profiling GPU Rendering</h3><h4 id=\"1-Enable-in-Developer-Options-Profile-GPU-Rendering\"><a href=\"#1-Enable-in-Developer-Options-Profile-GPU-Rendering\" class=\"headerlink\" title=\"1. Enable in Developer Options : Profile GPU Rendering\"></a>1. Enable in Developer Options : Profile GPU Rendering</h4><h5 id=\"2-原理：\"><a href=\"#2-原理：\" class=\"headerlink\" title=\"2. 原理：\"></a>2. 原理：</h5><p>大多数卡顿是因为渲染性能问题。Android每16ms发送VSYNC信号对UI进行渲染，每次渲染即为一帧。如果16ms内没有绘制完，比如在20ms绘制完，则实际上用户在32ms内看到一帧，丢失一帧显示。丢帧太多，就会卡顿。所以要尽量保证所有的操作在16ms内完成。    </p>\n<h5 id=\"3-为什么16ms？\"><a href=\"#3-为什么16ms？\" class=\"headerlink\" title=\"3. 为什么16ms？\"></a>3. 为什么16ms？</h5><p>人视觉产生连续效果需要达到基本的24fps，电影一般用这个帧数。60fps是人眼能感受到的最快的变化，超过60fps是不必要的。为了达到60fps，即需要16ms绘制一帧。<br>每16ms刷新一次的刷新频率，60fps的帧频率，如果刚好匹配，则完美工作。实际上很难刚好保证同步。</p>\n<ol>\n<li>帧率超过刷新频率，即在16ms等待VSYNC刷新信号的过程中，帧数据需要等待VSYNC刷新被hold住以保持每次刷新都有数据可以显示；</li>\n<li>帧率低于刷新频率。即16ms内没有绘制完一帧，用户在32ms、48ms内看到一帧完整显示。就是卡顿了。</li>\n</ol>\n<h5 id=\"4-Colors\"><a href=\"#4-Colors\" class=\"headerlink\" title=\"4. Colors\"></a>4. Colors</h5><ol>\n<li>绿线表示16ms； 每一帧超过16ms，就意味着丢失一帧；</li>\n<li>帧的颜色从底部到顶部：<ul>\n<li>绿色：代表创建和更新view的时间；过长表示同时绘制的view过多或ondraw比较费时；</li>\n<li>紫色：4.0之上才有，传输资源到渲染线程花费的时间</li>\n<li>红色：OpenGL渲染图像花费的时间</li>\n<li>黄色：CPU等待GPU绘制结束花费的时间，如果过长，说明GPU工作很多。CPU发送cmd给GPU后，需要等过长时间才能发送新的cmd，会导致黄色很长。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-Hierarchy-Viewer\"><a href=\"#3-Hierarchy-Viewer\" class=\"headerlink\" title=\"3. Hierarchy Viewer\"></a>3. Hierarchy Viewer</h3><p>The Hierarchy Viewer tool visualizes your <strong><em>app’s view hierarchy</em></strong> and <strong><em>profiles the relative rendering speed for each view</em></strong>. </p>\n<ol>\n<li>但是。。不会用。我咔咔咔。下面这里也没看懂怎样就是有问题，怎样去优化<br><a href=\"http://developer.android.com/tools/performance/hierarchy-viewer/profiling.html\">http://developer.android.com/tools/performance/hierarchy-viewer/profiling.html</a></li>\n</ol>\n<h2 id=\"四、-Memory-Analysis-Tools\"><a href=\"#四、-Memory-Analysis-Tools\" class=\"headerlink\" title=\"四、 Memory Analysis Tools\"></a>四、 Memory Analysis Tools</h2><p>通过Memory Monitor观察到频繁的GC，用Heap Viewer看一下对象类型，用Allocation Tracker找到问题代码位置。</p>\n<h3 id=\"1-MemoryMonitor\"><a href=\"#1-MemoryMonitor\" class=\"headerlink\" title=\"1. MemoryMonitor\"></a>1. MemoryMonitor</h3><h5 id=\"1-查看内容\"><a href=\"#1-查看内容\" class=\"headerlink\" title=\"1. 查看内容\"></a>1. 查看内容</h5><ol>\n<li>free和allocated的内存</li>\n<li>查看GC garbage collection的频率是否正常，频繁gc导致性能问题。</li>\n<li>是否内存溢出导致crash</li>\n<li>看看是否有内存泄漏</li>\n</ol>\n<h3 id=\"2-Heap-Viewer\"><a href=\"#2-Heap-Viewer\" class=\"headerlink\" title=\"2. Heap Viewer\"></a>2. Heap Viewer</h3><p>Android Monitor和DDMS里都有。</p>\n<p>＃#### 1. 查看内容</p>\n<ol>\n<li>查看分配内存的对象，数量及占内存大小</li>\n<li>查看不必要分配的内存对象，检查内存泄漏</li>\n</ol>\n<h3 id=\"3-Allocation-Tracker\"><a href=\"#3-Allocation-Tracker\" class=\"headerlink\" title=\"3. Allocation Tracker\"></a>3. Allocation Tracker</h3><ol>\n<li>可以帮助找到问题代码的位置。</li>\n</ol>\n<h5 id=\"1-查看内容-1\"><a href=\"#1-查看内容-1\" class=\"headerlink\" title=\"1. 查看内容\"></a>1. 查看内容</h5><h3 id=\"4-Investigating-Your-RAM-Usage\"><a href=\"#4-Investigating-Your-RAM-Usage\" class=\"headerlink\" title=\"4. Investigating Your RAM Usage\"></a>4. Investigating Your RAM Usage</h3><h5 id=\"1-Interpreting-Dalvik-Log-Messages\"><a href=\"#1-Interpreting-Dalvik-Log-Messages\" class=\"headerlink\" title=\"1. Interpreting Dalvik Log Messages\"></a>1. Interpreting Dalvik Log Messages</h5><ol>\n<li>GC Reason<ul>\n<li><strong><em>GC_CONCURRENT</em></strong><br>A concurrent GC that frees up memory as your heap begins to fill up.</li>\n<li><strong><em>GC_FOR_MALLOC</em></strong><br>A GC caused because your app attempted to allocate memory when your heap was already full, so the system had to stop your app and reclaim memory.</li>\n<li><strong><em>GC_HPROF_DUMP_HEAP</em></strong><br>A GC that occurs when you request to create an HPROF file to analyze your heap.</li>\n<li><strong><em>GC_EXPLICIT</em></strong><br>An explicit GC, such as when you call gc() (which you should avoid calling and instead trust the GC to run when needed).</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"2-ART-Log-Message\"><a href=\"#2-ART-Log-Message\" class=\"headerlink\" title=\"2. ART Log Message\"></a>2. ART Log Message</h5><p><a href=\"http://developer.android.com/tools/debugging/debugging-memory.html#LogMessages\">http://developer.android.com/tools/debugging/debugging-memory.html#LogMessages</a></p>\n<h2 id=\"五、-Battery-Analysis-Tools\"><a href=\"#五、-Battery-Analysis-Tools\" class=\"headerlink\" title=\"五、 Battery Analysis Tools\"></a>五、 Battery Analysis Tools</h2>"},{"title":"Android-Project-Managing","date":"2015-06-03T03:07:14.000Z","_content":"Android项目目录基本配置和管理，以及icon及其size。\n## 一、 Android Project Files\n\n### 1. IDE Setting\n\n1. **.idea**\n2. **.iml** Module file created by the IntelliJ IDEA to store module information.\n\n### 2. Gradle 相关\n1. **gradle** gradler wrapper\n2. **.gradle**\n3. **gradle.properties** project-wide gradle setting, such as MaxPermSize.\n4. **local.properties** computer-specific properties.should not be maintained in a source revision control system. \n5. **build.gradle** Customizable properties for the build system. Set keystore, keyalias. This file is integral to the project, so maintain it in a source revision control system. \n6. **setting.gradle** Specifies the sub-modules to build.\n7. **gradlew** gradle startup script for Unix.\n8. **gradlew.bat** gradle startup script for Windows.\n\n### 3. Git\n1. .gitignore\n\n## 二、 Android Application Modules\n1. **src** module directories and files\n2. **build** build outputs for all project modules.\n3. **libs**\n\n##### src目录分解\n\n1. **proguard-rules.pro**\n1. **.iml**\n1. **build.gradle**    \nCustomizable properties for the build system. You can edit this file to override default build settings used by the manifest file and also set the location of your keystore and key alias so that the build tools can sign your application when building in release mode. This file is integral to the project, so maintain it in a source revision control system. \n1. **.gitignore**\n\n1. **androidTest**\n1. **main/AndroidManifest**   \n    \n    ```\n\t\t<uses-adk\n\t\t\tandroid:minSdkVersion=\"\"\n\t\t\tandroid:targetSdkVersion=\"\"/>\n\t\t<uses-permission android:name=\"\"/>\n\t\t<permission android:name=\"\" android:protectionLevel=\"\"/>\n\t\t<application>\n\t\t\t<activity>\n\t\t\t\t<intent-filter>\n\t\t\t\t\t<action\n\t\t\t\t\t<category\n\t\t\t\t\t<data\n\t\t\t<service\n\t\t\t<receiver\n\t\t\t<provider\n\t```\n\t\t\t\t\n3. **main/java**  \n4. **main/jni**\n5. **main/gen**    \nContains the Java files generated by Android Studio, such as your R.java file and interfaces created from AIDL files.\n6. **main/assets**    \nFiles that you save here are compiled into an .apk file as-is, and the original filename is preserved. \n7. **main/res**\n\t1. anim\t\n\t2. **drawable** For bitmap files (PNG, JPEG, or GIF), 9-Patch image files, and XML files that describe Drawable shapes or Drawable objects that contain multiple states (normal, pressed, or focused).\n\t3. **mipmap** For app launcher icons. \n\t4. color\n\t5. layout\n\t6. raw\n\t7. values\n\t\tstring.xml, color.xml, dimens.xml, styles.xml\n\n## 三、 Library Module\nWhen you build an application that depends on a library module, the SDK tools ***compile the library into a temporary JAR file*** and use it in the main module, ***then uses the result to generate the .apk***\n    \n***You cannot:***    \n\n1.  cannot compile it directly to its own .apk\n2.  cannot export the library module to a self-contained JAR file\n3.  cannot include raw assets; \n\n***You can:***\n    \n1.  can add Dependencies添加lib，module和本地jar lib\n2.  can include a JAR into a lib module; manually edit the dependent application modules's build path and add a path to the JAR file.\n3.  can include an external jar lib into a lib module;\n\n\t```\n\t    <uses-library   \t\n      \t\tandroid:name=\"string\"   \n      \t\tandroid:required=[\"true\" | \"false\"] \n      \t\t/>\n\t```\n\n***Resource conflicts***    \n1. If a resource ID is defined in both the application and the library, the tools ensure that ***the resource declared in the application gets priority*** and that ***the resource in the library module is not compiled into the application .apk***\n2. your application can add references to ***multiple library modules***, then specify the relative priority of the resources in each library.When two libraries referenced from an application define the same resource ID, ***the tools select the resource from the library with higher priority and discard the other.***\n3. Should use prefixes to avoid resource conflicts;\n\n***Note***    \n1. lib platform version要等于或低于app version;\n2. No restriction on library module names\n3. Each library module creates its own R class \n\n## 四、 Test Project\nThe src/androidTest source set may not be created for every type of available module template. If this source set is not created, you can just create it for that module.\n\nMore Info http://developer.android.com/tools/testing/index.html.","source":"_posts/android-project-managing.md","raw":"title: Android-Project-Managing\ncategories:\n  - Android\ntags:\n  - 项目目录\n  \ndate: 2015-06-03 11:07:14\n---\nAndroid项目目录基本配置和管理，以及icon及其size。\n## 一、 Android Project Files\n\n### 1. IDE Setting\n\n1. **.idea**\n2. **.iml** Module file created by the IntelliJ IDEA to store module information.\n\n### 2. Gradle 相关\n1. **gradle** gradler wrapper\n2. **.gradle**\n3. **gradle.properties** project-wide gradle setting, such as MaxPermSize.\n4. **local.properties** computer-specific properties.should not be maintained in a source revision control system. \n5. **build.gradle** Customizable properties for the build system. Set keystore, keyalias. This file is integral to the project, so maintain it in a source revision control system. \n6. **setting.gradle** Specifies the sub-modules to build.\n7. **gradlew** gradle startup script for Unix.\n8. **gradlew.bat** gradle startup script for Windows.\n\n### 3. Git\n1. .gitignore\n\n## 二、 Android Application Modules\n1. **src** module directories and files\n2. **build** build outputs for all project modules.\n3. **libs**\n\n##### src目录分解\n\n1. **proguard-rules.pro**\n1. **.iml**\n1. **build.gradle**    \nCustomizable properties for the build system. You can edit this file to override default build settings used by the manifest file and also set the location of your keystore and key alias so that the build tools can sign your application when building in release mode. This file is integral to the project, so maintain it in a source revision control system. \n1. **.gitignore**\n\n1. **androidTest**\n1. **main/AndroidManifest**   \n    \n    ```\n\t\t<uses-adk\n\t\t\tandroid:minSdkVersion=\"\"\n\t\t\tandroid:targetSdkVersion=\"\"/>\n\t\t<uses-permission android:name=\"\"/>\n\t\t<permission android:name=\"\" android:protectionLevel=\"\"/>\n\t\t<application>\n\t\t\t<activity>\n\t\t\t\t<intent-filter>\n\t\t\t\t\t<action\n\t\t\t\t\t<category\n\t\t\t\t\t<data\n\t\t\t<service\n\t\t\t<receiver\n\t\t\t<provider\n\t```\n\t\t\t\t\n3. **main/java**  \n4. **main/jni**\n5. **main/gen**    \nContains the Java files generated by Android Studio, such as your R.java file and interfaces created from AIDL files.\n6. **main/assets**    \nFiles that you save here are compiled into an .apk file as-is, and the original filename is preserved. \n7. **main/res**\n\t1. anim\t\n\t2. **drawable** For bitmap files (PNG, JPEG, or GIF), 9-Patch image files, and XML files that describe Drawable shapes or Drawable objects that contain multiple states (normal, pressed, or focused).\n\t3. **mipmap** For app launcher icons. \n\t4. color\n\t5. layout\n\t6. raw\n\t7. values\n\t\tstring.xml, color.xml, dimens.xml, styles.xml\n\n## 三、 Library Module\nWhen you build an application that depends on a library module, the SDK tools ***compile the library into a temporary JAR file*** and use it in the main module, ***then uses the result to generate the .apk***\n    \n***You cannot:***    \n\n1.  cannot compile it directly to its own .apk\n2.  cannot export the library module to a self-contained JAR file\n3.  cannot include raw assets; \n\n***You can:***\n    \n1.  can add Dependencies添加lib，module和本地jar lib\n2.  can include a JAR into a lib module; manually edit the dependent application modules's build path and add a path to the JAR file.\n3.  can include an external jar lib into a lib module;\n\n\t```\n\t    <uses-library   \t\n      \t\tandroid:name=\"string\"   \n      \t\tandroid:required=[\"true\" | \"false\"] \n      \t\t/>\n\t```\n\n***Resource conflicts***    \n1. If a resource ID is defined in both the application and the library, the tools ensure that ***the resource declared in the application gets priority*** and that ***the resource in the library module is not compiled into the application .apk***\n2. your application can add references to ***multiple library modules***, then specify the relative priority of the resources in each library.When two libraries referenced from an application define the same resource ID, ***the tools select the resource from the library with higher priority and discard the other.***\n3. Should use prefixes to avoid resource conflicts;\n\n***Note***    \n1. lib platform version要等于或低于app version;\n2. No restriction on library module names\n3. Each library module creates its own R class \n\n## 四、 Test Project\nThe src/androidTest source set may not be created for every type of available module template. If this source set is not created, you can just create it for that module.\n\nMore Info http://developer.android.com/tools/testing/index.html.","slug":"android-project-managing","published":1,"updated":"2016-04-12T08:30:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimx9uskr000qj9v8e7st8pck","content":"<p>Android项目目录基本配置和管理，以及icon及其size。</p>\n<h2 id=\"一、-Android-Project-Files\"><a href=\"#一、-Android-Project-Files\" class=\"headerlink\" title=\"一、 Android Project Files\"></a>一、 Android Project Files</h2><h3 id=\"1-IDE-Setting\"><a href=\"#1-IDE-Setting\" class=\"headerlink\" title=\"1. IDE Setting\"></a>1. IDE Setting</h3><ol>\n<li><strong>.idea</strong></li>\n<li><strong>.iml</strong> Module file created by the IntelliJ IDEA to store module information.</li>\n</ol>\n<h3 id=\"2-Gradle-相关\"><a href=\"#2-Gradle-相关\" class=\"headerlink\" title=\"2. Gradle 相关\"></a>2. Gradle 相关</h3><ol>\n<li><strong>gradle</strong> gradler wrapper</li>\n<li><strong>.gradle</strong></li>\n<li><strong>gradle.properties</strong> project-wide gradle setting, such as MaxPermSize.</li>\n<li><strong>local.properties</strong> computer-specific properties.should not be maintained in a source revision control system. </li>\n<li><strong>build.gradle</strong> Customizable properties for the build system. Set keystore, keyalias. This file is integral to the project, so maintain it in a source revision control system. </li>\n<li><strong>setting.gradle</strong> Specifies the sub-modules to build.</li>\n<li><strong>gradlew</strong> gradle startup script for Unix.</li>\n<li><strong>gradlew.bat</strong> gradle startup script for Windows.</li>\n</ol>\n<h3 id=\"3-Git\"><a href=\"#3-Git\" class=\"headerlink\" title=\"3. Git\"></a>3. Git</h3><ol>\n<li>.gitignore</li>\n</ol>\n<h2 id=\"二、-Android-Application-Modules\"><a href=\"#二、-Android-Application-Modules\" class=\"headerlink\" title=\"二、 Android Application Modules\"></a>二、 Android Application Modules</h2><ol>\n<li><strong>src</strong> module directories and files</li>\n<li><strong>build</strong> build outputs for all project modules.</li>\n<li><strong>libs</strong></li>\n</ol>\n<h5 id=\"src目录分解\"><a href=\"#src目录分解\" class=\"headerlink\" title=\"src目录分解\"></a>src目录分解</h5><ol>\n<li><strong>proguard-rules.pro</strong></li>\n<li><strong>.iml</strong></li>\n<li><strong>build.gradle</strong><br>Customizable properties for the build system. You can edit this file to override default build settings used by the manifest file and also set the location of your keystore and key alias so that the build tools can sign your application when building in release mode. This file is integral to the project, so maintain it in a source revision control system. </li>\n<li><p><strong>.gitignore</strong></p>\n</li>\n<li><p><strong>androidTest</strong></p>\n</li>\n<li><p><strong>main/AndroidManifest</strong>   </p>\n <figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">uses-adk</span></span><br><span class=\"line\">\t<span class=\"attr\">android:minSdkVersion</span>=<span class=\"string\">\"\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:targetSdkVersion</span>=<span class=\"string\">\"\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">android:protectionLevel</span>=<span class=\"string\">\"\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span></span><br><span class=\"line\">\t\t\t&lt;<span class=\"attr\">category</span></span><br><span class=\"line\">\t\t\t&lt;<span class=\"attr\">data</span></span><br><span class=\"line\">\t&lt;<span class=\"attr\">service</span></span><br><span class=\"line\">\t&lt;<span class=\"attr\">receiver</span></span><br><span class=\"line\">\t&lt;<span class=\"attr\">provider</span></span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><strong>main/java</strong>  </li>\n<li><strong>main/jni</strong></li>\n<li><strong>main/gen</strong><br>Contains the Java files generated by Android Studio, such as your R.java file and interfaces created from AIDL files.</li>\n<li><strong>main/assets</strong><br>Files that you save here are compiled into an .apk file as-is, and the original filename is preserved. </li>\n<li><strong>main/res</strong><ol>\n<li>anim    </li>\n<li><strong>drawable</strong> For bitmap files (PNG, JPEG, or GIF), 9-Patch image files, and XML files that describe Drawable shapes or Drawable objects that contain multiple states (normal, pressed, or focused).</li>\n<li><strong>mipmap</strong> For app launcher icons. </li>\n<li>color</li>\n<li>layout</li>\n<li>raw</li>\n<li>values<br> string.xml, color.xml, dimens.xml, styles.xml</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"三、-Library-Module\"><a href=\"#三、-Library-Module\" class=\"headerlink\" title=\"三、 Library Module\"></a>三、 Library Module</h2><p>When you build an application that depends on a library module, the SDK tools <strong><em>compile the library into a temporary JAR file</em></strong> and use it in the main module, <strong><em>then uses the result to generate the .apk</em></strong></p>\n<p><strong><em>You cannot:</em></strong>    </p>\n<ol>\n<li>cannot compile it directly to its own .apk</li>\n<li>cannot export the library module to a self-contained JAR file</li>\n<li>cannot include raw assets; </li>\n</ol>\n<p><strong><em>You can:</em></strong></p>\n<ol>\n<li>can add Dependencies添加lib，module和本地jar lib</li>\n<li>can include a JAR into a lib module; manually edit the dependent application modules’s build path and add a path to the JAR file.</li>\n<li><p>can include an external jar lib into a lib module;</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-library   \t</span><br><span class=\"line\"> \t\tandroid:name=<span class=\"string\">\"string\"</span>   </span><br><span class=\"line\"> \t\tandroid:required=[<span class=\"string\">\"true\"</span> <span class=\"string\">| \"</span>false<span class=\"string\">\"] </span></span><br><span class=\"line\"> \t\t/&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong><em>Resource conflicts</em></strong>    </p>\n<ol>\n<li>If a resource ID is defined in both the application and the library, the tools ensure that <strong><em>the resource declared in the application gets priority</em></strong> and that <strong><em>the resource in the library module is not compiled into the application .apk</em></strong></li>\n<li>your application can add references to <strong><em>multiple library modules</em></strong>, then specify the relative priority of the resources in each library.When two libraries referenced from an application define the same resource ID, <strong><em>the tools select the resource from the library with higher priority and discard the other.</em></strong></li>\n<li>Should use prefixes to avoid resource conflicts;</li>\n</ol>\n<p><strong><em>Note</em></strong>    </p>\n<ol>\n<li>lib platform version要等于或低于app version;</li>\n<li>No restriction on library module names</li>\n<li>Each library module creates its own R class </li>\n</ol>\n<h2 id=\"四、-Test-Project\"><a href=\"#四、-Test-Project\" class=\"headerlink\" title=\"四、 Test Project\"></a>四、 Test Project</h2><p>The src/androidTest source set may not be created for every type of available module template. If this source set is not created, you can just create it for that module.</p>\n<p>More Info <a href=\"http://developer.android.com/tools/testing/index.html\" target=\"_blank\" rel=\"external\">http://developer.android.com/tools/testing/index.html</a>.</p>\n","excerpt":"","more":"<p>Android项目目录基本配置和管理，以及icon及其size。</p>\n<h2 id=\"一、-Android-Project-Files\"><a href=\"#一、-Android-Project-Files\" class=\"headerlink\" title=\"一、 Android Project Files\"></a>一、 Android Project Files</h2><h3 id=\"1-IDE-Setting\"><a href=\"#1-IDE-Setting\" class=\"headerlink\" title=\"1. IDE Setting\"></a>1. IDE Setting</h3><ol>\n<li><strong>.idea</strong></li>\n<li><strong>.iml</strong> Module file created by the IntelliJ IDEA to store module information.</li>\n</ol>\n<h3 id=\"2-Gradle-相关\"><a href=\"#2-Gradle-相关\" class=\"headerlink\" title=\"2. Gradle 相关\"></a>2. Gradle 相关</h3><ol>\n<li><strong>gradle</strong> gradler wrapper</li>\n<li><strong>.gradle</strong></li>\n<li><strong>gradle.properties</strong> project-wide gradle setting, such as MaxPermSize.</li>\n<li><strong>local.properties</strong> computer-specific properties.should not be maintained in a source revision control system. </li>\n<li><strong>build.gradle</strong> Customizable properties for the build system. Set keystore, keyalias. This file is integral to the project, so maintain it in a source revision control system. </li>\n<li><strong>setting.gradle</strong> Specifies the sub-modules to build.</li>\n<li><strong>gradlew</strong> gradle startup script for Unix.</li>\n<li><strong>gradlew.bat</strong> gradle startup script for Windows.</li>\n</ol>\n<h3 id=\"3-Git\"><a href=\"#3-Git\" class=\"headerlink\" title=\"3. Git\"></a>3. Git</h3><ol>\n<li>.gitignore</li>\n</ol>\n<h2 id=\"二、-Android-Application-Modules\"><a href=\"#二、-Android-Application-Modules\" class=\"headerlink\" title=\"二、 Android Application Modules\"></a>二、 Android Application Modules</h2><ol>\n<li><strong>src</strong> module directories and files</li>\n<li><strong>build</strong> build outputs for all project modules.</li>\n<li><strong>libs</strong></li>\n</ol>\n<h5 id=\"src目录分解\"><a href=\"#src目录分解\" class=\"headerlink\" title=\"src目录分解\"></a>src目录分解</h5><ol>\n<li><strong>proguard-rules.pro</strong></li>\n<li><strong>.iml</strong></li>\n<li><strong>build.gradle</strong><br>Customizable properties for the build system. You can edit this file to override default build settings used by the manifest file and also set the location of your keystore and key alias so that the build tools can sign your application when building in release mode. This file is integral to the project, so maintain it in a source revision control system. </li>\n<li><p><strong>.gitignore</strong></p>\n</li>\n<li><p><strong>androidTest</strong></p>\n</li>\n<li><p><strong>main/AndroidManifest</strong>   </p>\n <figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">uses-adk</span></span><br><span class=\"line\">\t<span class=\"attr\">android:minSdkVersion</span>=<span class=\"string\">\"\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:targetSdkVersion</span>=<span class=\"string\">\"\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">android:protectionLevel</span>=<span class=\"string\">\"\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span></span><br><span class=\"line\">\t\t\t&lt;<span class=\"attr\">category</span></span><br><span class=\"line\">\t\t\t&lt;<span class=\"attr\">data</span></span><br><span class=\"line\">\t&lt;<span class=\"attr\">service</span></span><br><span class=\"line\">\t&lt;<span class=\"attr\">receiver</span></span><br><span class=\"line\">\t&lt;<span class=\"attr\">provider</span></span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><strong>main/java</strong>  </li>\n<li><strong>main/jni</strong></li>\n<li><strong>main/gen</strong><br>Contains the Java files generated by Android Studio, such as your R.java file and interfaces created from AIDL files.</li>\n<li><strong>main/assets</strong><br>Files that you save here are compiled into an .apk file as-is, and the original filename is preserved. </li>\n<li><strong>main/res</strong><ol>\n<li>anim    </li>\n<li><strong>drawable</strong> For bitmap files (PNG, JPEG, or GIF), 9-Patch image files, and XML files that describe Drawable shapes or Drawable objects that contain multiple states (normal, pressed, or focused).</li>\n<li><strong>mipmap</strong> For app launcher icons. </li>\n<li>color</li>\n<li>layout</li>\n<li>raw</li>\n<li>values<br> string.xml, color.xml, dimens.xml, styles.xml</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"三、-Library-Module\"><a href=\"#三、-Library-Module\" class=\"headerlink\" title=\"三、 Library Module\"></a>三、 Library Module</h2><p>When you build an application that depends on a library module, the SDK tools <strong><em>compile the library into a temporary JAR file</em></strong> and use it in the main module, <strong><em>then uses the result to generate the .apk</em></strong></p>\n<p><strong><em>You cannot:</em></strong>    </p>\n<ol>\n<li>cannot compile it directly to its own .apk</li>\n<li>cannot export the library module to a self-contained JAR file</li>\n<li>cannot include raw assets; </li>\n</ol>\n<p><strong><em>You can:</em></strong></p>\n<ol>\n<li>can add Dependencies添加lib，module和本地jar lib</li>\n<li>can include a JAR into a lib module; manually edit the dependent application modules’s build path and add a path to the JAR file.</li>\n<li><p>can include an external jar lib into a lib module;</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-library   \t</span><br><span class=\"line\"> \t\tandroid:name=<span class=\"string\">\"string\"</span>   </span><br><span class=\"line\"> \t\tandroid:required=[<span class=\"string\">\"true\"</span> <span class=\"string\">| \"</span>false<span class=\"string\">\"] </span></span><br><span class=\"line\"> \t\t/&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong><em>Resource conflicts</em></strong>    </p>\n<ol>\n<li>If a resource ID is defined in both the application and the library, the tools ensure that <strong><em>the resource declared in the application gets priority</em></strong> and that <strong><em>the resource in the library module is not compiled into the application .apk</em></strong></li>\n<li>your application can add references to <strong><em>multiple library modules</em></strong>, then specify the relative priority of the resources in each library.When two libraries referenced from an application define the same resource ID, <strong><em>the tools select the resource from the library with higher priority and discard the other.</em></strong></li>\n<li>Should use prefixes to avoid resource conflicts;</li>\n</ol>\n<p><strong><em>Note</em></strong>    </p>\n<ol>\n<li>lib platform version要等于或低于app version;</li>\n<li>No restriction on library module names</li>\n<li>Each library module creates its own R class </li>\n</ol>\n<h2 id=\"四、-Test-Project\"><a href=\"#四、-Test-Project\" class=\"headerlink\" title=\"四、 Test Project\"></a>四、 Test Project</h2><p>The src/androidTest source set may not be created for every type of available module template. If this source set is not created, you can just create it for that module.</p>\n<p>More Info <a href=\"http://developer.android.com/tools/testing/index.html\">http://developer.android.com/tools/testing/index.html</a>.</p>\n"},{"title":"Android-Tasks-And-Stack","date":"2016-03-15T10:26:19.000Z","_content":"收录Activity栈管理和操作的相关内容。\n## 一、 Managing Tasks\n\n### 1. 两种栈管理方式：    \n\n#### 1. <activity> attributes\n    \n* taskAffinity\n* launchMode\n* allowTaskReparenting\n* clearTaskOnLaunch\n* alwaysRetainTaskState\n* finishOnTaskLaunch    \n\n#### 2. intent flags\n\n* FLAG_ACTIVITY_NEW_TASK\n* FLAG_ACTIVITY_CLEAR_TOP\n* FLAG_ACTIVITY_SINGLE_TOP\n\n## 二、 Defining launch modes\n    \nAs such, if Activity A starts Activity B, ***Activity B can define in its manifest how it should associate with the current task*** (if at all) and ***Activity A can also request how Activity B should associate with current task***. If both activities define how Activity B should associate with a task, then ***Activity A's request (as defined in the intent) is honored over Activity B's request (as defined in its manifest)***.    \n    \nSome launch modes available for the manifest file are not available as flags for an intent and, likewise, some launch modes available as flags for an intent cannot be defined in the manifest.\n\n### 1. Using the manifest file\n\n1. ***standard***   \nThe activity can be instantiated multiple times, each instance can belong to different tasks, and one task can have multiple instances.\n如果是App A启动App B里的ActB(standard),那么ActB会在App A的栈里。\n\n2. ***singleTop***\nIf an instance of the activity already exists at the top of the current task, the system routes the intent to that instance through a call to its ***onNewIntent()*** method, rather than creating a new instance of the activity. 如果是App A启动App B里的ActB(singleTop),那么ActB会在App A的栈里。\n\n3. ***singleTask***    \n However, if an instance of the activity(singleTask) already exists in a separate task, the system routes the intent to the existing instance through a call to its ***onNewIntent()*** method, rather than creating a new instance.     \n ActA启动ActB(singleTask),两个在同一个栈中。但ActB不是root元素(这是实验结果，但实验与google developer网站不符)。假设App A里栈 ActA->ActB->ActC->actD...; 在App Z里ActZ启动ActB，则将跳转App A的栈中的ActB，并且ActC、ActD等出栈，此时点击返回键直接在App A的栈中返回ActA，再点击返回键，将返回App Z的ActZ。\n\n4. ***singleInstance***\nThe system doesn't launch any other activities into the task holding the instance. 不论是从App A还是App B启动该activity，有且仅有一个栈实例。\n\n### 2. Using Intent flags\n\n1. ***FLAG_ACTIVITY_NEW_TASK***    \nsame as singltTask.\n\n2. ***FLAG_ACTIVITY_SINGLE_TOP***    \nsame as singleTop.\n\n3. ***FLAG_ACTIVITY_CLEAR_TOP***   \n如果栈中已有对应被启动的Activity，那么该Activity之上的所有Act出栈。如果栈中没有，那么新创建一个实例。\nApp B用CLEAR_TOP启动App A中的某一个Activity，这个activity将会在App B的栈中进行操作，如clear top或者new instance。\n\n4. to be continued\n\n### 三、 Handling affinities\nThe affinity indicates which task an activity prefers to belong to. By default, all the activities from the same application have an affinity for each other.\n\n—.—||| 实在烦，看不下去，总结不出来啊\nhttp://developer.android.com/guide/components/tasks-and-back-stack.html#ManagingTasks\n\n### 四、 Clearing the back stack\nIf the user leaves a task for a long time, the system clears the task of all activities except the root activity. When the user returns to the task again, only the root activity is restored.\n\nThere are some activity attributes that you can use to modify this behavior:   \n  \n1. ***alwaysRetainTaskState***     \nThe task retains all activities in its stack even after a long period.    \n\n2. ***clearTaskOnLaunch***\nIf this attribute is set to \"true\" in the root activity of a task, the stack is cleared down to the root activity whenever the user leaves the task and returns to it. In other words, it's the opposite of alwaysRetainTaskState. \n\n3. ***finishOnTaskLaunch***    \nThis attribute is like clearTaskOnLaunch, but ***it operates on a single activity, not an entire task***. It can also cause any activity to go away, including the root activity. When it's set to \"true\", the activity remains part of the task only for the current session. If the user leaves and then returns to the task, it is no longer present.\n\n### 五、 Starting a task\n\n—.—||| 鬼哦 没卵用","source":"_posts/android-tasks-and-stack.md","raw":"title: Android-Tasks-And-Stack\ncategories:\n  - Android\ntags:\n  - Tasks\n  - Stack\ndate: 2016-03-15 18:26:19\n---\n收录Activity栈管理和操作的相关内容。\n## 一、 Managing Tasks\n\n### 1. 两种栈管理方式：    \n\n#### 1. <activity> attributes\n    \n* taskAffinity\n* launchMode\n* allowTaskReparenting\n* clearTaskOnLaunch\n* alwaysRetainTaskState\n* finishOnTaskLaunch    \n\n#### 2. intent flags\n\n* FLAG_ACTIVITY_NEW_TASK\n* FLAG_ACTIVITY_CLEAR_TOP\n* FLAG_ACTIVITY_SINGLE_TOP\n\n## 二、 Defining launch modes\n    \nAs such, if Activity A starts Activity B, ***Activity B can define in its manifest how it should associate with the current task*** (if at all) and ***Activity A can also request how Activity B should associate with current task***. If both activities define how Activity B should associate with a task, then ***Activity A's request (as defined in the intent) is honored over Activity B's request (as defined in its manifest)***.    \n    \nSome launch modes available for the manifest file are not available as flags for an intent and, likewise, some launch modes available as flags for an intent cannot be defined in the manifest.\n\n### 1. Using the manifest file\n\n1. ***standard***   \nThe activity can be instantiated multiple times, each instance can belong to different tasks, and one task can have multiple instances.\n如果是App A启动App B里的ActB(standard),那么ActB会在App A的栈里。\n\n2. ***singleTop***\nIf an instance of the activity already exists at the top of the current task, the system routes the intent to that instance through a call to its ***onNewIntent()*** method, rather than creating a new instance of the activity. 如果是App A启动App B里的ActB(singleTop),那么ActB会在App A的栈里。\n\n3. ***singleTask***    \n However, if an instance of the activity(singleTask) already exists in a separate task, the system routes the intent to the existing instance through a call to its ***onNewIntent()*** method, rather than creating a new instance.     \n ActA启动ActB(singleTask),两个在同一个栈中。但ActB不是root元素(这是实验结果，但实验与google developer网站不符)。假设App A里栈 ActA->ActB->ActC->actD...; 在App Z里ActZ启动ActB，则将跳转App A的栈中的ActB，并且ActC、ActD等出栈，此时点击返回键直接在App A的栈中返回ActA，再点击返回键，将返回App Z的ActZ。\n\n4. ***singleInstance***\nThe system doesn't launch any other activities into the task holding the instance. 不论是从App A还是App B启动该activity，有且仅有一个栈实例。\n\n### 2. Using Intent flags\n\n1. ***FLAG_ACTIVITY_NEW_TASK***    \nsame as singltTask.\n\n2. ***FLAG_ACTIVITY_SINGLE_TOP***    \nsame as singleTop.\n\n3. ***FLAG_ACTIVITY_CLEAR_TOP***   \n如果栈中已有对应被启动的Activity，那么该Activity之上的所有Act出栈。如果栈中没有，那么新创建一个实例。\nApp B用CLEAR_TOP启动App A中的某一个Activity，这个activity将会在App B的栈中进行操作，如clear top或者new instance。\n\n4. to be continued\n\n### 三、 Handling affinities\nThe affinity indicates which task an activity prefers to belong to. By default, all the activities from the same application have an affinity for each other.\n\n—.—||| 实在烦，看不下去，总结不出来啊\nhttp://developer.android.com/guide/components/tasks-and-back-stack.html#ManagingTasks\n\n### 四、 Clearing the back stack\nIf the user leaves a task for a long time, the system clears the task of all activities except the root activity. When the user returns to the task again, only the root activity is restored.\n\nThere are some activity attributes that you can use to modify this behavior:   \n  \n1. ***alwaysRetainTaskState***     \nThe task retains all activities in its stack even after a long period.    \n\n2. ***clearTaskOnLaunch***\nIf this attribute is set to \"true\" in the root activity of a task, the stack is cleared down to the root activity whenever the user leaves the task and returns to it. In other words, it's the opposite of alwaysRetainTaskState. \n\n3. ***finishOnTaskLaunch***    \nThis attribute is like clearTaskOnLaunch, but ***it operates on a single activity, not an entire task***. It can also cause any activity to go away, including the root activity. When it's set to \"true\", the activity remains part of the task only for the current session. If the user leaves and then returns to the task, it is no longer present.\n\n### 五、 Starting a task\n\n—.—||| 鬼哦 没卵用","slug":"android-tasks-and-stack","published":1,"updated":"2016-04-12T08:31:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimx9usku000tj9v8ci8krape","content":"<p>收录Activity栈管理和操作的相关内容。</p>\n<h2 id=\"一、-Managing-Tasks\"><a href=\"#一、-Managing-Tasks\" class=\"headerlink\" title=\"一、 Managing Tasks\"></a>一、 Managing Tasks</h2><h3 id=\"1-两种栈管理方式：\"><a href=\"#1-两种栈管理方式：\" class=\"headerlink\" title=\"1. 两种栈管理方式：\"></a>1. 两种栈管理方式：</h3><h4 id=\"1-attributes\"><a href=\"#1-attributes\" class=\"headerlink\" title=\"1.  attributes\"></a>1. <activity> attributes</activity></h4><ul>\n<li>taskAffinity</li>\n<li>launchMode</li>\n<li>allowTaskReparenting</li>\n<li>clearTaskOnLaunch</li>\n<li>alwaysRetainTaskState</li>\n<li>finishOnTaskLaunch    </li>\n</ul>\n<h4 id=\"2-intent-flags\"><a href=\"#2-intent-flags\" class=\"headerlink\" title=\"2. intent flags\"></a>2. intent flags</h4><ul>\n<li>FLAG_ACTIVITY_NEW_TASK</li>\n<li>FLAG_ACTIVITY_CLEAR_TOP</li>\n<li>FLAG_ACTIVITY_SINGLE_TOP</li>\n</ul>\n<h2 id=\"二、-Defining-launch-modes\"><a href=\"#二、-Defining-launch-modes\" class=\"headerlink\" title=\"二、 Defining launch modes\"></a>二、 Defining launch modes</h2><p>As such, if Activity A starts Activity B, <strong><em>Activity B can define in its manifest how it should associate with the current task</em></strong> (if at all) and <strong><em>Activity A can also request how Activity B should associate with current task</em></strong>. If both activities define how Activity B should associate with a task, then <strong><em>Activity A’s request (as defined in the intent) is honored over Activity B’s request (as defined in its manifest)</em></strong>.    </p>\n<p>Some launch modes available for the manifest file are not available as flags for an intent and, likewise, some launch modes available as flags for an intent cannot be defined in the manifest.</p>\n<h3 id=\"1-Using-the-manifest-file\"><a href=\"#1-Using-the-manifest-file\" class=\"headerlink\" title=\"1. Using the manifest file\"></a>1. Using the manifest file</h3><ol>\n<li><p><strong><em>standard</em></strong><br>The activity can be instantiated multiple times, each instance can belong to different tasks, and one task can have multiple instances.<br>如果是App A启动App B里的ActB(standard),那么ActB会在App A的栈里。</p>\n</li>\n<li><p><strong><em>singleTop</em></strong><br>If an instance of the activity already exists at the top of the current task, the system routes the intent to that instance through a call to its <strong><em>onNewIntent()</em></strong> method, rather than creating a new instance of the activity. 如果是App A启动App B里的ActB(singleTop),那么ActB会在App A的栈里。</p>\n</li>\n<li><p><strong><em>singleTask</em></strong><br>However, if an instance of the activity(singleTask) already exists in a separate task, the system routes the intent to the existing instance through a call to its <strong><em>onNewIntent()</em></strong> method, rather than creating a new instance.<br>ActA启动ActB(singleTask),两个在同一个栈中。但ActB不是root元素(这是实验结果，但实验与google developer网站不符)。假设App A里栈 ActA-&gt;ActB-&gt;ActC-&gt;actD…; 在App Z里ActZ启动ActB，则将跳转App A的栈中的ActB，并且ActC、ActD等出栈，此时点击返回键直接在App A的栈中返回ActA，再点击返回键，将返回App Z的ActZ。</p>\n</li>\n<li><p><strong><em>singleInstance</em></strong><br>The system doesn’t launch any other activities into the task holding the instance. 不论是从App A还是App B启动该activity，有且仅有一个栈实例。</p>\n</li>\n</ol>\n<h3 id=\"2-Using-Intent-flags\"><a href=\"#2-Using-Intent-flags\" class=\"headerlink\" title=\"2. Using Intent flags\"></a>2. Using Intent flags</h3><ol>\n<li><p><strong><em>FLAG_ACTIVITY_NEW_TASK</em></strong><br>same as singltTask.</p>\n</li>\n<li><p><strong><em>FLAG_ACTIVITY_SINGLE_TOP</em></strong><br>same as singleTop.</p>\n</li>\n<li><p><strong><em>FLAG_ACTIVITY_CLEAR_TOP</em></strong><br>如果栈中已有对应被启动的Activity，那么该Activity之上的所有Act出栈。如果栈中没有，那么新创建一个实例。<br>App B用CLEAR_TOP启动App A中的某一个Activity，这个activity将会在App B的栈中进行操作，如clear top或者new instance。</p>\n</li>\n<li><p>to be continued</p>\n</li>\n</ol>\n<h3 id=\"三、-Handling-affinities\"><a href=\"#三、-Handling-affinities\" class=\"headerlink\" title=\"三、 Handling affinities\"></a>三、 Handling affinities</h3><p>The affinity indicates which task an activity prefers to belong to. By default, all the activities from the same application have an affinity for each other.</p>\n<p>—.—||| 实在烦，看不下去，总结不出来啊<br><a href=\"http://developer.android.com/guide/components/tasks-and-back-stack.html#ManagingTasks\" target=\"_blank\" rel=\"external\">http://developer.android.com/guide/components/tasks-and-back-stack.html#ManagingTasks</a></p>\n<h3 id=\"四、-Clearing-the-back-stack\"><a href=\"#四、-Clearing-the-back-stack\" class=\"headerlink\" title=\"四、 Clearing the back stack\"></a>四、 Clearing the back stack</h3><p>If the user leaves a task for a long time, the system clears the task of all activities except the root activity. When the user returns to the task again, only the root activity is restored.</p>\n<p>There are some activity attributes that you can use to modify this behavior:   </p>\n<ol>\n<li><p><strong><em>alwaysRetainTaskState</em></strong><br>The task retains all activities in its stack even after a long period.    </p>\n</li>\n<li><p><strong><em>clearTaskOnLaunch</em></strong><br>If this attribute is set to “true” in the root activity of a task, the stack is cleared down to the root activity whenever the user leaves the task and returns to it. In other words, it’s the opposite of alwaysRetainTaskState. </p>\n</li>\n<li><p><strong><em>finishOnTaskLaunch</em></strong><br>This attribute is like clearTaskOnLaunch, but <strong><em>it operates on a single activity, not an entire task</em></strong>. It can also cause any activity to go away, including the root activity. When it’s set to “true”, the activity remains part of the task only for the current session. If the user leaves and then returns to the task, it is no longer present.</p>\n</li>\n</ol>\n<h3 id=\"五、-Starting-a-task\"><a href=\"#五、-Starting-a-task\" class=\"headerlink\" title=\"五、 Starting a task\"></a>五、 Starting a task</h3><p>—.—||| 鬼哦 没卵用</p>\n","excerpt":"","more":"<p>收录Activity栈管理和操作的相关内容。</p>\n<h2 id=\"一、-Managing-Tasks\"><a href=\"#一、-Managing-Tasks\" class=\"headerlink\" title=\"一、 Managing Tasks\"></a>一、 Managing Tasks</h2><h3 id=\"1-两种栈管理方式：\"><a href=\"#1-两种栈管理方式：\" class=\"headerlink\" title=\"1. 两种栈管理方式：\"></a>1. 两种栈管理方式：</h3><h4 id=\"1-attributes\"><a href=\"#1-attributes\" class=\"headerlink\" title=\"1.  attributes\"></a>1. <activity> attributes</h4><ul>\n<li>taskAffinity</li>\n<li>launchMode</li>\n<li>allowTaskReparenting</li>\n<li>clearTaskOnLaunch</li>\n<li>alwaysRetainTaskState</li>\n<li>finishOnTaskLaunch    </li>\n</ul>\n<h4 id=\"2-intent-flags\"><a href=\"#2-intent-flags\" class=\"headerlink\" title=\"2. intent flags\"></a>2. intent flags</h4><ul>\n<li>FLAG_ACTIVITY_NEW_TASK</li>\n<li>FLAG_ACTIVITY_CLEAR_TOP</li>\n<li>FLAG_ACTIVITY_SINGLE_TOP</li>\n</ul>\n<h2 id=\"二、-Defining-launch-modes\"><a href=\"#二、-Defining-launch-modes\" class=\"headerlink\" title=\"二、 Defining launch modes\"></a>二、 Defining launch modes</h2><p>As such, if Activity A starts Activity B, <strong><em>Activity B can define in its manifest how it should associate with the current task</em></strong> (if at all) and <strong><em>Activity A can also request how Activity B should associate with current task</em></strong>. If both activities define how Activity B should associate with a task, then <strong><em>Activity A’s request (as defined in the intent) is honored over Activity B’s request (as defined in its manifest)</em></strong>.    </p>\n<p>Some launch modes available for the manifest file are not available as flags for an intent and, likewise, some launch modes available as flags for an intent cannot be defined in the manifest.</p>\n<h3 id=\"1-Using-the-manifest-file\"><a href=\"#1-Using-the-manifest-file\" class=\"headerlink\" title=\"1. Using the manifest file\"></a>1. Using the manifest file</h3><ol>\n<li><p><strong><em>standard</em></strong><br>The activity can be instantiated multiple times, each instance can belong to different tasks, and one task can have multiple instances.<br>如果是App A启动App B里的ActB(standard),那么ActB会在App A的栈里。</p>\n</li>\n<li><p><strong><em>singleTop</em></strong><br>If an instance of the activity already exists at the top of the current task, the system routes the intent to that instance through a call to its <strong><em>onNewIntent()</em></strong> method, rather than creating a new instance of the activity. 如果是App A启动App B里的ActB(singleTop),那么ActB会在App A的栈里。</p>\n</li>\n<li><p><strong><em>singleTask</em></strong><br>However, if an instance of the activity(singleTask) already exists in a separate task, the system routes the intent to the existing instance through a call to its <strong><em>onNewIntent()</em></strong> method, rather than creating a new instance.<br>ActA启动ActB(singleTask),两个在同一个栈中。但ActB不是root元素(这是实验结果，但实验与google developer网站不符)。假设App A里栈 ActA-&gt;ActB-&gt;ActC-&gt;actD…; 在App Z里ActZ启动ActB，则将跳转App A的栈中的ActB，并且ActC、ActD等出栈，此时点击返回键直接在App A的栈中返回ActA，再点击返回键，将返回App Z的ActZ。</p>\n</li>\n<li><p><strong><em>singleInstance</em></strong><br>The system doesn’t launch any other activities into the task holding the instance. 不论是从App A还是App B启动该activity，有且仅有一个栈实例。</p>\n</li>\n</ol>\n<h3 id=\"2-Using-Intent-flags\"><a href=\"#2-Using-Intent-flags\" class=\"headerlink\" title=\"2. Using Intent flags\"></a>2. Using Intent flags</h3><ol>\n<li><p><strong><em>FLAG_ACTIVITY_NEW_TASK</em></strong><br>same as singltTask.</p>\n</li>\n<li><p><strong><em>FLAG_ACTIVITY_SINGLE_TOP</em></strong><br>same as singleTop.</p>\n</li>\n<li><p><strong><em>FLAG_ACTIVITY_CLEAR_TOP</em></strong><br>如果栈中已有对应被启动的Activity，那么该Activity之上的所有Act出栈。如果栈中没有，那么新创建一个实例。<br>App B用CLEAR_TOP启动App A中的某一个Activity，这个activity将会在App B的栈中进行操作，如clear top或者new instance。</p>\n</li>\n<li><p>to be continued</p>\n</li>\n</ol>\n<h3 id=\"三、-Handling-affinities\"><a href=\"#三、-Handling-affinities\" class=\"headerlink\" title=\"三、 Handling affinities\"></a>三、 Handling affinities</h3><p>The affinity indicates which task an activity prefers to belong to. By default, all the activities from the same application have an affinity for each other.</p>\n<p>—.—||| 实在烦，看不下去，总结不出来啊<br><a href=\"http://developer.android.com/guide/components/tasks-and-back-stack.html#ManagingTasks\">http://developer.android.com/guide/components/tasks-and-back-stack.html#ManagingTasks</a></p>\n<h3 id=\"四、-Clearing-the-back-stack\"><a href=\"#四、-Clearing-the-back-stack\" class=\"headerlink\" title=\"四、 Clearing the back stack\"></a>四、 Clearing the back stack</h3><p>If the user leaves a task for a long time, the system clears the task of all activities except the root activity. When the user returns to the task again, only the root activity is restored.</p>\n<p>There are some activity attributes that you can use to modify this behavior:   </p>\n<ol>\n<li><p><strong><em>alwaysRetainTaskState</em></strong><br>The task retains all activities in its stack even after a long period.    </p>\n</li>\n<li><p><strong><em>clearTaskOnLaunch</em></strong><br>If this attribute is set to “true” in the root activity of a task, the stack is cleared down to the root activity whenever the user leaves the task and returns to it. In other words, it’s the opposite of alwaysRetainTaskState. </p>\n</li>\n<li><p><strong><em>finishOnTaskLaunch</em></strong><br>This attribute is like clearTaskOnLaunch, but <strong><em>it operates on a single activity, not an entire task</em></strong>. It can also cause any activity to go away, including the root activity. When it’s set to “true”, the activity remains part of the task only for the current session. If the user leaves and then returns to the task, it is no longer present.</p>\n</li>\n</ol>\n<h3 id=\"五、-Starting-a-task\"><a href=\"#五、-Starting-a-task\" class=\"headerlink\" title=\"五、 Starting a task\"></a>五、 Starting a task</h3><p>—.—||| 鬼哦 没卵用</p>\n"},{"title":"Android-Tools","date":"2016-01-29T01:40:09.000Z","_content":"Android tools of sdk and platform.\n\n## 一、 SDK Tools\n### 1. Virtual Device Tools\n##### 1. Android Virtual Device Manager\n##### 2. Android Emulator\n##### 3. mksdcard    \nHelps you create a disk image that you can use with the emulator, to simulate the presence of an external storage card (such as an SD card).\n\n### 2. Development Tools\n\n##### 1. Hierarchy Viewer\n\nThe Hierarchy Viewer allows you to debug and optimize your user interface. It provides ***a visual representation of the layout's View hierarchy (the Layout View)*** and ***a magnified inspector of the display (the Pixel Perfect View)***. \n\n##### 2. lint\n##### 3. SDK Manager\n##### 4. sqlite3\n\n\n### 3. Debugging Tools\n\n##### 1. Android Monitor\n##### 2. adb\n##### 3. ADB Shell\n##### 4. DDMS dalvik debug monitor server\n##### 5. Device monitor\n##### 6. dmtracedump\n##### 7. hprof-conv\n##### 8. systrace\n##### 9. traceview\n##### 10. tracer for OpenGL ES\n\n\n### 4. Build Tools\n\n##### 1. JOBB\n##### 2. aapt\n\n1. ~/sdk/build-tools/xxxx/aapt dump badging xxx.apk 查看包的基本信息，如packageid，version，permission等\n\n##### 3. ProGuard\n\n1. 优化方式：移除二进制bytecode中未使用的classes/fields/methods;删除bytecode中的debuging info(文件名，行数，方法名变量名等)，模糊重命名类、变量和方法；\n2. 好处：更小的apk包，并且很难被反破解；\n3. Enable ***minifyEnabled*** property in the build.gradle\n \n    ```\n    android {\n       ...\n     \n        buildTypes {\n            release {\n                minifyEnabled true\n                proguardFiles getDefaultProguardFile('proguard-android.txt'),\n                'proguard-rules.pro'\n            }\n        }\n      }\n    ```\n\n4. progurad file:\n\n\t* ***proguard-android.txt*** : the default ProGuard settings from the Android SDK tools/proguard/ folder\n\t* ***proguard-android-optimize.txt*** : file is also available in this Android SDK folder with the same rules but with optimizations enabled. 不建议使用，并不是所有的优化都能在所有的dalvik上正确运行。\n\t* ***proguard-rules.pro*** : file is at root of the module for customing ProGuard rules specific to the current module. \n***下面是没看懂的一段。。。。***\n> You can also add ProGuard files to the getDefaultProguardFile directive for all release builds or as part of the productFlavor settings in the build.gradle file to customize the settings applied to build variants. This example adds the proguard-rules-new.pro to the proguardFiles directive and the other-rules.pro file to the flavor2 product flavor. \n\n    ```\n        android {\n       ...\n     \n        buildTypes {\n            release {\n                minifyEnabled true\n                proguardFiles getDefaultProguardFile('proguard-android.txt'),\n                'proguard-rules.pro', 'proguard-rules-new.pro'\n            }\n        }\n     \n       productFlavors {\n            flavor1 {\n            }\n            flavor2 {\n                proguardFile 'other-rules.pro'\n            }\n        }\n     }\n    ```\n\n5. Configuring ProGuard\nProGuard might remove code that it thinks is not used, but your application actually needs. Some examples include:\n\t* a class that is referenced only in the AndroidManifest.xml file\n\t* a method called from JNI\n\t* dynamically referenced fields and methods    \n***Proguard Manual :*** https://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/introduction.html    \n***Proguard Troubleshooting :*** https://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/troubleshooting.html    \n\n6. Decoding Obfuscated Stack Traces\nWhenever ProGuard runs, it outputs a mapping.txt file, which shows you the original class, method, and field names mapped to their obfuscated names.\n\n\t```\n\tretrace.bat|retrace.sh [-verbose] mapping.txt [<stacktrace_file>]\n\t```\nYou can fix this by :\n\n\t```\n\t-keep public class <MyClass>\n\t```\n\t\n7. Debugging considerations for published applications\nSave the mapping.txt file for every release that you publish to your users. A project's mapping.txt file is overwritten every time you do a release build.\n\n\n### 3. zipalign\n\n1. 优化方式：保证apk内未压缩的资源文件，比如图片和二进制流文件四子节边界对其；\n2. 好处：运行时节省内存。This allows all portions to be accessed directly with mmap() even if they contain binary data with alignment restrictions.\n3. zipalign要在sign之后，逆序后sign会undo the alignment.\n\t\n### 5. Image Tools\n\n#### 1. Draw 9-patch\n#### 2. etc1tool\n\n## 二、 Platform Tools\n\n### 1. bmgr\n### 2. logcat","source":"_posts/android-tools.md","raw":"title: Android-Tools\ncategories:\n  - Android\ntags:\n  - Android\n  - Tools\n  - Optimization\ndate: 2016-01-29 09:40:09\n---\nAndroid tools of sdk and platform.\n\n## 一、 SDK Tools\n### 1. Virtual Device Tools\n##### 1. Android Virtual Device Manager\n##### 2. Android Emulator\n##### 3. mksdcard    \nHelps you create a disk image that you can use with the emulator, to simulate the presence of an external storage card (such as an SD card).\n\n### 2. Development Tools\n\n##### 1. Hierarchy Viewer\n\nThe Hierarchy Viewer allows you to debug and optimize your user interface. It provides ***a visual representation of the layout's View hierarchy (the Layout View)*** and ***a magnified inspector of the display (the Pixel Perfect View)***. \n\n##### 2. lint\n##### 3. SDK Manager\n##### 4. sqlite3\n\n\n### 3. Debugging Tools\n\n##### 1. Android Monitor\n##### 2. adb\n##### 3. ADB Shell\n##### 4. DDMS dalvik debug monitor server\n##### 5. Device monitor\n##### 6. dmtracedump\n##### 7. hprof-conv\n##### 8. systrace\n##### 9. traceview\n##### 10. tracer for OpenGL ES\n\n\n### 4. Build Tools\n\n##### 1. JOBB\n##### 2. aapt\n\n1. ~/sdk/build-tools/xxxx/aapt dump badging xxx.apk 查看包的基本信息，如packageid，version，permission等\n\n##### 3. ProGuard\n\n1. 优化方式：移除二进制bytecode中未使用的classes/fields/methods;删除bytecode中的debuging info(文件名，行数，方法名变量名等)，模糊重命名类、变量和方法；\n2. 好处：更小的apk包，并且很难被反破解；\n3. Enable ***minifyEnabled*** property in the build.gradle\n \n    ```\n    android {\n       ...\n     \n        buildTypes {\n            release {\n                minifyEnabled true\n                proguardFiles getDefaultProguardFile('proguard-android.txt'),\n                'proguard-rules.pro'\n            }\n        }\n      }\n    ```\n\n4. progurad file:\n\n\t* ***proguard-android.txt*** : the default ProGuard settings from the Android SDK tools/proguard/ folder\n\t* ***proguard-android-optimize.txt*** : file is also available in this Android SDK folder with the same rules but with optimizations enabled. 不建议使用，并不是所有的优化都能在所有的dalvik上正确运行。\n\t* ***proguard-rules.pro*** : file is at root of the module for customing ProGuard rules specific to the current module. \n***下面是没看懂的一段。。。。***\n> You can also add ProGuard files to the getDefaultProguardFile directive for all release builds or as part of the productFlavor settings in the build.gradle file to customize the settings applied to build variants. This example adds the proguard-rules-new.pro to the proguardFiles directive and the other-rules.pro file to the flavor2 product flavor. \n\n    ```\n        android {\n       ...\n     \n        buildTypes {\n            release {\n                minifyEnabled true\n                proguardFiles getDefaultProguardFile('proguard-android.txt'),\n                'proguard-rules.pro', 'proguard-rules-new.pro'\n            }\n        }\n     \n       productFlavors {\n            flavor1 {\n            }\n            flavor2 {\n                proguardFile 'other-rules.pro'\n            }\n        }\n     }\n    ```\n\n5. Configuring ProGuard\nProGuard might remove code that it thinks is not used, but your application actually needs. Some examples include:\n\t* a class that is referenced only in the AndroidManifest.xml file\n\t* a method called from JNI\n\t* dynamically referenced fields and methods    \n***Proguard Manual :*** https://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/introduction.html    \n***Proguard Troubleshooting :*** https://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/troubleshooting.html    \n\n6. Decoding Obfuscated Stack Traces\nWhenever ProGuard runs, it outputs a mapping.txt file, which shows you the original class, method, and field names mapped to their obfuscated names.\n\n\t```\n\tretrace.bat|retrace.sh [-verbose] mapping.txt [<stacktrace_file>]\n\t```\nYou can fix this by :\n\n\t```\n\t-keep public class <MyClass>\n\t```\n\t\n7. Debugging considerations for published applications\nSave the mapping.txt file for every release that you publish to your users. A project's mapping.txt file is overwritten every time you do a release build.\n\n\n### 3. zipalign\n\n1. 优化方式：保证apk内未压缩的资源文件，比如图片和二进制流文件四子节边界对其；\n2. 好处：运行时节省内存。This allows all portions to be accessed directly with mmap() even if they contain binary data with alignment restrictions.\n3. zipalign要在sign之后，逆序后sign会undo the alignment.\n\t\n### 5. Image Tools\n\n#### 1. Draw 9-patch\n#### 2. etc1tool\n\n## 二、 Platform Tools\n\n### 1. bmgr\n### 2. logcat","slug":"android-tools","published":1,"updated":"2016-04-08T03:19:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimx9uskw000xj9v8l4r5nlj5","content":"<p>Android tools of sdk and platform.</p>\n<h2 id=\"一、-SDK-Tools\"><a href=\"#一、-SDK-Tools\" class=\"headerlink\" title=\"一、 SDK Tools\"></a>一、 SDK Tools</h2><h3 id=\"1-Virtual-Device-Tools\"><a href=\"#1-Virtual-Device-Tools\" class=\"headerlink\" title=\"1. Virtual Device Tools\"></a>1. Virtual Device Tools</h3><h5 id=\"1-Android-Virtual-Device-Manager\"><a href=\"#1-Android-Virtual-Device-Manager\" class=\"headerlink\" title=\"1. Android Virtual Device Manager\"></a>1. Android Virtual Device Manager</h5><h5 id=\"2-Android-Emulator\"><a href=\"#2-Android-Emulator\" class=\"headerlink\" title=\"2. Android Emulator\"></a>2. Android Emulator</h5><h5 id=\"3-mksdcard\"><a href=\"#3-mksdcard\" class=\"headerlink\" title=\"3. mksdcard\"></a>3. mksdcard</h5><p>Helps you create a disk image that you can use with the emulator, to simulate the presence of an external storage card (such as an SD card).</p>\n<h3 id=\"2-Development-Tools\"><a href=\"#2-Development-Tools\" class=\"headerlink\" title=\"2. Development Tools\"></a>2. Development Tools</h3><h5 id=\"1-Hierarchy-Viewer\"><a href=\"#1-Hierarchy-Viewer\" class=\"headerlink\" title=\"1. Hierarchy Viewer\"></a>1. Hierarchy Viewer</h5><p>The Hierarchy Viewer allows you to debug and optimize your user interface. It provides <strong><em>a visual representation of the layout’s View hierarchy (the Layout View)</em></strong> and <strong><em>a magnified inspector of the display (the Pixel Perfect View)</em></strong>. </p>\n<h5 id=\"2-lint\"><a href=\"#2-lint\" class=\"headerlink\" title=\"2. lint\"></a>2. lint</h5><h5 id=\"3-SDK-Manager\"><a href=\"#3-SDK-Manager\" class=\"headerlink\" title=\"3. SDK Manager\"></a>3. SDK Manager</h5><h5 id=\"4-sqlite3\"><a href=\"#4-sqlite3\" class=\"headerlink\" title=\"4. sqlite3\"></a>4. sqlite3</h5><h3 id=\"3-Debugging-Tools\"><a href=\"#3-Debugging-Tools\" class=\"headerlink\" title=\"3. Debugging Tools\"></a>3. Debugging Tools</h3><h5 id=\"1-Android-Monitor\"><a href=\"#1-Android-Monitor\" class=\"headerlink\" title=\"1. Android Monitor\"></a>1. Android Monitor</h5><h5 id=\"2-adb\"><a href=\"#2-adb\" class=\"headerlink\" title=\"2. adb\"></a>2. adb</h5><h5 id=\"3-ADB-Shell\"><a href=\"#3-ADB-Shell\" class=\"headerlink\" title=\"3. ADB Shell\"></a>3. ADB Shell</h5><h5 id=\"4-DDMS-dalvik-debug-monitor-server\"><a href=\"#4-DDMS-dalvik-debug-monitor-server\" class=\"headerlink\" title=\"4. DDMS dalvik debug monitor server\"></a>4. DDMS dalvik debug monitor server</h5><h5 id=\"5-Device-monitor\"><a href=\"#5-Device-monitor\" class=\"headerlink\" title=\"5. Device monitor\"></a>5. Device monitor</h5><h5 id=\"6-dmtracedump\"><a href=\"#6-dmtracedump\" class=\"headerlink\" title=\"6. dmtracedump\"></a>6. dmtracedump</h5><h5 id=\"7-hprof-conv\"><a href=\"#7-hprof-conv\" class=\"headerlink\" title=\"7. hprof-conv\"></a>7. hprof-conv</h5><h5 id=\"8-systrace\"><a href=\"#8-systrace\" class=\"headerlink\" title=\"8. systrace\"></a>8. systrace</h5><h5 id=\"9-traceview\"><a href=\"#9-traceview\" class=\"headerlink\" title=\"9. traceview\"></a>9. traceview</h5><h5 id=\"10-tracer-for-OpenGL-ES\"><a href=\"#10-tracer-for-OpenGL-ES\" class=\"headerlink\" title=\"10. tracer for OpenGL ES\"></a>10. tracer for OpenGL ES</h5><h3 id=\"4-Build-Tools\"><a href=\"#4-Build-Tools\" class=\"headerlink\" title=\"4. Build Tools\"></a>4. Build Tools</h3><h5 id=\"1-JOBB\"><a href=\"#1-JOBB\" class=\"headerlink\" title=\"1. JOBB\"></a>1. JOBB</h5><h5 id=\"2-aapt\"><a href=\"#2-aapt\" class=\"headerlink\" title=\"2. aapt\"></a>2. aapt</h5><ol>\n<li>~/sdk/build-tools/xxxx/aapt dump badging xxx.apk 查看包的基本信息，如packageid，version，permission等</li>\n</ol>\n<h5 id=\"3-ProGuard\"><a href=\"#3-ProGuard\" class=\"headerlink\" title=\"3. ProGuard\"></a>3. ProGuard</h5><ol>\n<li>优化方式：移除二进制bytecode中未使用的classes/fields/methods;删除bytecode中的debuging info(文件名，行数，方法名变量名等)，模糊重命名类、变量和方法；</li>\n<li>好处：更小的apk包，并且很难被反破解；</li>\n<li><p>Enable <strong><em>minifyEnabled</em></strong> property in the build.gradle</p>\n <figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"decorator\">android</span> &#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"decorator\">buildTypes</span> &#123;</span><br><span class=\"line\">        <span class=\"decorator\">release</span> &#123;</span><br><span class=\"line\">            minifyEnabled <span class=\"literal\">true</span></span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>),</span><br><span class=\"line\">            <span class=\"string\">'proguard-rules.pro'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>progurad file:</p>\n<ul>\n<li><strong><em>proguard-android.txt</em></strong> : the default ProGuard settings from the Android SDK tools/proguard/ folder</li>\n<li><strong><em>proguard-android-optimize.txt</em></strong> : file is also available in this Android SDK folder with the same rules but with optimizations enabled. 不建议使用，并不是所有的优化都能在所有的dalvik上正确运行。</li>\n<li><p><strong><em>proguard-rules.pro</em></strong> : file is at root of the module for customing ProGuard rules specific to the current module.<br><strong><em>下面是没看懂的一段。。。。</em></strong></p>\n<blockquote>\n<p>You can also add ProGuard files to the getDefaultProguardFile directive for all release builds or as part of the productFlavor settings in the build.gradle file to customize the settings applied to build variants. This example adds the proguard-rules-new.pro to the proguardFiles directive and the other-rules.pro file to the flavor2 product flavor. </p>\n</blockquote>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"decorator\">android</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"decorator\">buildTypes</span> &#123;</span><br><span class=\"line\">       <span class=\"decorator\">release</span> &#123;</span><br><span class=\"line\">           minifyEnabled <span class=\"literal\">true</span></span><br><span class=\"line\">           proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>),</span><br><span class=\"line\">           <span class=\"string\">'proguard-rules.pro'</span>, <span class=\"string\">'proguard-rules-new.pro'</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"decorator\">productFlavors</span> &#123;</span><br><span class=\"line\">       <span class=\"decorator\">flavor1</span> &#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"decorator\">flavor2</span> &#123;</span><br><span class=\"line\">           proguardFile <span class=\"string\">'other-rules.pro'</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Configuring ProGuard<br>ProGuard might remove code that it thinks is not used, but your application actually needs. Some examples include:</p>\n<ul>\n<li>a class that is referenced only in the AndroidManifest.xml file</li>\n<li>a method called from JNI</li>\n<li>dynamically referenced fields and methods<br><strong><em>Proguard Manual :</em></strong> <a href=\"https://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/introduction.html\" target=\"_blank\" rel=\"external\">https://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/introduction.html</a><br><strong><em>Proguard Troubleshooting :</em></strong> <a href=\"https://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/troubleshooting.html\" target=\"_blank\" rel=\"external\">https://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/troubleshooting.html</a>    </li>\n</ul>\n</li>\n<li><p>Decoding Obfuscated Stack Traces<br>Whenever ProGuard runs, it outputs a mapping.txt file, which shows you the original class, method, and field names mapped to their obfuscated names.</p>\n <figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">retrace.bat|retrace.sh [-verbose] mapping.txt <span class=\"meta\">[&lt;stacktrace_file&gt;]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>You can fix this by :</p>\n<pre><code><figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"ruby\">keep public <span class=\"class\"><span class=\"keyword\">class</span> &lt;MyClass&gt;</span></span></span><br></pre></td></tr></table></figure>\n</code></pre><ol>\n<li>Debugging considerations for published applications<br>Save the mapping.txt file for every release that you publish to your users. A project’s mapping.txt file is overwritten every time you do a release build.</li>\n</ol>\n<h3 id=\"3-zipalign\"><a href=\"#3-zipalign\" class=\"headerlink\" title=\"3. zipalign\"></a>3. zipalign</h3><ol>\n<li>优化方式：保证apk内未压缩的资源文件，比如图片和二进制流文件四子节边界对其；</li>\n<li>好处：运行时节省内存。This allows all portions to be accessed directly with mmap() even if they contain binary data with alignment restrictions.</li>\n<li>zipalign要在sign之后，逆序后sign会undo the alignment.</li>\n</ol>\n<h3 id=\"5-Image-Tools\"><a href=\"#5-Image-Tools\" class=\"headerlink\" title=\"5. Image Tools\"></a>5. Image Tools</h3><h4 id=\"1-Draw-9-patch\"><a href=\"#1-Draw-9-patch\" class=\"headerlink\" title=\"1. Draw 9-patch\"></a>1. Draw 9-patch</h4><h4 id=\"2-etc1tool\"><a href=\"#2-etc1tool\" class=\"headerlink\" title=\"2. etc1tool\"></a>2. etc1tool</h4><h2 id=\"二、-Platform-Tools\"><a href=\"#二、-Platform-Tools\" class=\"headerlink\" title=\"二、 Platform Tools\"></a>二、 Platform Tools</h2><h3 id=\"1-bmgr\"><a href=\"#1-bmgr\" class=\"headerlink\" title=\"1. bmgr\"></a>1. bmgr</h3><h3 id=\"2-logcat\"><a href=\"#2-logcat\" class=\"headerlink\" title=\"2. logcat\"></a>2. logcat</h3>","excerpt":"","more":"<p>Android tools of sdk and platform.</p>\n<h2 id=\"一、-SDK-Tools\"><a href=\"#一、-SDK-Tools\" class=\"headerlink\" title=\"一、 SDK Tools\"></a>一、 SDK Tools</h2><h3 id=\"1-Virtual-Device-Tools\"><a href=\"#1-Virtual-Device-Tools\" class=\"headerlink\" title=\"1. Virtual Device Tools\"></a>1. Virtual Device Tools</h3><h5 id=\"1-Android-Virtual-Device-Manager\"><a href=\"#1-Android-Virtual-Device-Manager\" class=\"headerlink\" title=\"1. Android Virtual Device Manager\"></a>1. Android Virtual Device Manager</h5><h5 id=\"2-Android-Emulator\"><a href=\"#2-Android-Emulator\" class=\"headerlink\" title=\"2. Android Emulator\"></a>2. Android Emulator</h5><h5 id=\"3-mksdcard\"><a href=\"#3-mksdcard\" class=\"headerlink\" title=\"3. mksdcard\"></a>3. mksdcard</h5><p>Helps you create a disk image that you can use with the emulator, to simulate the presence of an external storage card (such as an SD card).</p>\n<h3 id=\"2-Development-Tools\"><a href=\"#2-Development-Tools\" class=\"headerlink\" title=\"2. Development Tools\"></a>2. Development Tools</h3><h5 id=\"1-Hierarchy-Viewer\"><a href=\"#1-Hierarchy-Viewer\" class=\"headerlink\" title=\"1. Hierarchy Viewer\"></a>1. Hierarchy Viewer</h5><p>The Hierarchy Viewer allows you to debug and optimize your user interface. It provides <strong><em>a visual representation of the layout’s View hierarchy (the Layout View)</em></strong> and <strong><em>a magnified inspector of the display (the Pixel Perfect View)</em></strong>. </p>\n<h5 id=\"2-lint\"><a href=\"#2-lint\" class=\"headerlink\" title=\"2. lint\"></a>2. lint</h5><h5 id=\"3-SDK-Manager\"><a href=\"#3-SDK-Manager\" class=\"headerlink\" title=\"3. SDK Manager\"></a>3. SDK Manager</h5><h5 id=\"4-sqlite3\"><a href=\"#4-sqlite3\" class=\"headerlink\" title=\"4. sqlite3\"></a>4. sqlite3</h5><h3 id=\"3-Debugging-Tools\"><a href=\"#3-Debugging-Tools\" class=\"headerlink\" title=\"3. Debugging Tools\"></a>3. Debugging Tools</h3><h5 id=\"1-Android-Monitor\"><a href=\"#1-Android-Monitor\" class=\"headerlink\" title=\"1. Android Monitor\"></a>1. Android Monitor</h5><h5 id=\"2-adb\"><a href=\"#2-adb\" class=\"headerlink\" title=\"2. adb\"></a>2. adb</h5><h5 id=\"3-ADB-Shell\"><a href=\"#3-ADB-Shell\" class=\"headerlink\" title=\"3. ADB Shell\"></a>3. ADB Shell</h5><h5 id=\"4-DDMS-dalvik-debug-monitor-server\"><a href=\"#4-DDMS-dalvik-debug-monitor-server\" class=\"headerlink\" title=\"4. DDMS dalvik debug monitor server\"></a>4. DDMS dalvik debug monitor server</h5><h5 id=\"5-Device-monitor\"><a href=\"#5-Device-monitor\" class=\"headerlink\" title=\"5. Device monitor\"></a>5. Device monitor</h5><h5 id=\"6-dmtracedump\"><a href=\"#6-dmtracedump\" class=\"headerlink\" title=\"6. dmtracedump\"></a>6. dmtracedump</h5><h5 id=\"7-hprof-conv\"><a href=\"#7-hprof-conv\" class=\"headerlink\" title=\"7. hprof-conv\"></a>7. hprof-conv</h5><h5 id=\"8-systrace\"><a href=\"#8-systrace\" class=\"headerlink\" title=\"8. systrace\"></a>8. systrace</h5><h5 id=\"9-traceview\"><a href=\"#9-traceview\" class=\"headerlink\" title=\"9. traceview\"></a>9. traceview</h5><h5 id=\"10-tracer-for-OpenGL-ES\"><a href=\"#10-tracer-for-OpenGL-ES\" class=\"headerlink\" title=\"10. tracer for OpenGL ES\"></a>10. tracer for OpenGL ES</h5><h3 id=\"4-Build-Tools\"><a href=\"#4-Build-Tools\" class=\"headerlink\" title=\"4. Build Tools\"></a>4. Build Tools</h3><h5 id=\"1-JOBB\"><a href=\"#1-JOBB\" class=\"headerlink\" title=\"1. JOBB\"></a>1. JOBB</h5><h5 id=\"2-aapt\"><a href=\"#2-aapt\" class=\"headerlink\" title=\"2. aapt\"></a>2. aapt</h5><ol>\n<li>~/sdk/build-tools/xxxx/aapt dump badging xxx.apk 查看包的基本信息，如packageid，version，permission等</li>\n</ol>\n<h5 id=\"3-ProGuard\"><a href=\"#3-ProGuard\" class=\"headerlink\" title=\"3. ProGuard\"></a>3. ProGuard</h5><ol>\n<li>优化方式：移除二进制bytecode中未使用的classes/fields/methods;删除bytecode中的debuging info(文件名，行数，方法名变量名等)，模糊重命名类、变量和方法；</li>\n<li>好处：更小的apk包，并且很难被反破解；</li>\n<li><p>Enable <strong><em>minifyEnabled</em></strong> property in the build.gradle</p>\n <figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"decorator\">android</span> &#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"decorator\">buildTypes</span> &#123;</span><br><span class=\"line\">        <span class=\"decorator\">release</span> &#123;</span><br><span class=\"line\">            minifyEnabled <span class=\"literal\">true</span></span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>),</span><br><span class=\"line\">            <span class=\"string\">'proguard-rules.pro'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>progurad file:</p>\n<ul>\n<li><strong><em>proguard-android.txt</em></strong> : the default ProGuard settings from the Android SDK tools/proguard/ folder</li>\n<li><strong><em>proguard-android-optimize.txt</em></strong> : file is also available in this Android SDK folder with the same rules but with optimizations enabled. 不建议使用，并不是所有的优化都能在所有的dalvik上正确运行。</li>\n<li><p><strong><em>proguard-rules.pro</em></strong> : file is at root of the module for customing ProGuard rules specific to the current module.<br><strong><em>下面是没看懂的一段。。。。</em></strong></p>\n<blockquote>\n<p>You can also add ProGuard files to the getDefaultProguardFile directive for all release builds or as part of the productFlavor settings in the build.gradle file to customize the settings applied to build variants. This example adds the proguard-rules-new.pro to the proguardFiles directive and the other-rules.pro file to the flavor2 product flavor. </p>\n</blockquote>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"decorator\">android</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"decorator\">buildTypes</span> &#123;</span><br><span class=\"line\">       <span class=\"decorator\">release</span> &#123;</span><br><span class=\"line\">           minifyEnabled <span class=\"literal\">true</span></span><br><span class=\"line\">           proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>),</span><br><span class=\"line\">           <span class=\"string\">'proguard-rules.pro'</span>, <span class=\"string\">'proguard-rules-new.pro'</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"decorator\">productFlavors</span> &#123;</span><br><span class=\"line\">       <span class=\"decorator\">flavor1</span> &#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"decorator\">flavor2</span> &#123;</span><br><span class=\"line\">           proguardFile <span class=\"string\">'other-rules.pro'</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Configuring ProGuard<br>ProGuard might remove code that it thinks is not used, but your application actually needs. Some examples include:</p>\n<ul>\n<li>a class that is referenced only in the AndroidManifest.xml file</li>\n<li>a method called from JNI</li>\n<li>dynamically referenced fields and methods<br><strong><em>Proguard Manual :</em></strong> <a href=\"https://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/introduction.html\">https://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/introduction.html</a><br><strong><em>Proguard Troubleshooting :</em></strong> <a href=\"https://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/troubleshooting.html\">https://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/troubleshooting.html</a>    </li>\n</ul>\n</li>\n<li><p>Decoding Obfuscated Stack Traces<br>Whenever ProGuard runs, it outputs a mapping.txt file, which shows you the original class, method, and field names mapped to their obfuscated names.</p>\n <figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">retrace.bat|retrace.sh [-verbose] mapping.txt <span class=\"meta\">[&lt;stacktrace_file&gt;]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>You can fix this by :</p>\n<pre><code><figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"ruby\">keep public <span class=\"class\"><span class=\"keyword\">class</span> &lt;MyClass&gt;</span></span></span><br></pre></td></tr></table></figure>\n</code></pre><ol>\n<li>Debugging considerations for published applications<br>Save the mapping.txt file for every release that you publish to your users. A project’s mapping.txt file is overwritten every time you do a release build.</li>\n</ol>\n<h3 id=\"3-zipalign\"><a href=\"#3-zipalign\" class=\"headerlink\" title=\"3. zipalign\"></a>3. zipalign</h3><ol>\n<li>优化方式：保证apk内未压缩的资源文件，比如图片和二进制流文件四子节边界对其；</li>\n<li>好处：运行时节省内存。This allows all portions to be accessed directly with mmap() even if they contain binary data with alignment restrictions.</li>\n<li>zipalign要在sign之后，逆序后sign会undo the alignment.</li>\n</ol>\n<h3 id=\"5-Image-Tools\"><a href=\"#5-Image-Tools\" class=\"headerlink\" title=\"5. Image Tools\"></a>5. Image Tools</h3><h4 id=\"1-Draw-9-patch\"><a href=\"#1-Draw-9-patch\" class=\"headerlink\" title=\"1. Draw 9-patch\"></a>1. Draw 9-patch</h4><h4 id=\"2-etc1tool\"><a href=\"#2-etc1tool\" class=\"headerlink\" title=\"2. etc1tool\"></a>2. etc1tool</h4><h2 id=\"二、-Platform-Tools\"><a href=\"#二、-Platform-Tools\" class=\"headerlink\" title=\"二、 Platform Tools\"></a>二、 Platform Tools</h2><h3 id=\"1-bmgr\"><a href=\"#1-bmgr\" class=\"headerlink\" title=\"1. bmgr\"></a>1. bmgr</h3><h3 id=\"2-logcat\"><a href=\"#2-logcat\" class=\"headerlink\" title=\"2. logcat\"></a>2. logcat</h3>"},{"title":"Hexo Quick Start","date":"2015-06-01T07:36:16.000Z","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Environment\n\n```\n\t$cd //folder\n\t$hexo init\n\t$npm install\n\t$vi _config.yml\n\t\tdeploy:\n  \t\ttype: git\n  \t\trepo: https://github.com/ccSun/ccsun.github.io.git\n\t\tbranch: master\n\t$hexo g\n\t$hexo d\n```\n\n## Error: Deployer not found: git\n\n``` bash\n$ npm install hexo-deployer-git --save\n```\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hexo-quick-start.md","raw":"title: Hexo Quick Start\ndate: 2015-06-01 15:36:16\ncategories: \n- Hexo\ntags:\n- Hexo\n- Setting\n\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Environment\n\n```\n\t$cd //folder\n\t$hexo init\n\t$npm install\n\t$vi _config.yml\n\t\tdeploy:\n  \t\ttype: git\n  \t\trepo: https://github.com/ccSun/ccsun.github.io.git\n\t\tbranch: master\n\t$hexo g\n\t$hexo d\n```\n\n## Error: Deployer not found: git\n\n``` bash\n$ npm install hexo-deployer-git --save\n```\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hexo-quick-start","published":1,"updated":"2016-03-28T09:06:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimx9uskz0010j9v8kjbrpsnj","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Environment\"><a href=\"#Environment\" class=\"headerlink\" title=\"Environment\"></a>Environment</h3><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cd //folder</span><br><span class=\"line\">$hexo init</span><br><span class=\"line\">$npm install</span><br><span class=\"line\">$vi _config.yml</span><br><span class=\"line\">\tdeploy:</span><br><span class=\"line\"> \t\ttype: git</span><br><span class=\"line\"> \t\trepo: https://github.com/ccSun/ccsun.github.io.git</span><br><span class=\"line\">\tbranch: master</span><br><span class=\"line\">$hexo g</span><br><span class=\"line\">$hexo d</span><br></pre></td></tr></table></figure>\n<h2 id=\"Error-Deployer-not-found-git\"><a href=\"#Error-Deployer-not-found-git\" class=\"headerlink\" title=\"Error: Deployer not found: git\"></a>Error: Deployer not found: git</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"http://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Environment\"><a href=\"#Environment\" class=\"headerlink\" title=\"Environment\"></a>Environment</h3><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cd //folder</span><br><span class=\"line\">$hexo init</span><br><span class=\"line\">$npm install</span><br><span class=\"line\">$vi _config.yml</span><br><span class=\"line\">\tdeploy:</span><br><span class=\"line\"> \t\ttype: git</span><br><span class=\"line\"> \t\trepo: https://github.com/ccSun/ccsun.github.io.git</span><br><span class=\"line\">\tbranch: master</span><br><span class=\"line\">$hexo g</span><br><span class=\"line\">$hexo d</span><br></pre></td></tr></table></figure>\n<h2 id=\"Error-Deployer-not-found-git\"><a href=\"#Error-Deployer-not-found-git\" class=\"headerlink\" title=\"Error: Deployer not found: git\"></a>Error: Deployer not found: git</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"Android-Ui-Tools","date":"2016-01-02T03:06:05.000Z","_content":"有关UI操作的tool：Layout Editor，Theme Editor，Translations Editor，Vector Asset Studio，Image Asset Studio。\n\n## 一、 Layout Editor\n## 二、 Theme Editor\n\n1. Pick a Theme\n![](https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-ui-tools/theme_tools.png?raw=true)\n2. Theme Editor\n\t* From an open styles.xml file, click Open editor near the top-right of the file window.\n\t* From the Tools menu, select Android > Theme Editor.\n\t\n## 三、 Vector Asset Studio\nHelps you ***add material icons*** and ***import Scalable Vector Graphic (SVG)*** files into your app project. SVG is an XML-based open standard of the World Wide Web Consortium (W3C). Vector Asset Studio supports the essential standard, but not all features.\n\n####Compatibility\n***Android 5.0 (API level 21)*** and higher provides vector drawable support.    \n***Android 4.4 (API level 20)*** and lower doesn't support vector drawables. If your minimum API level is set at one of these API levels, Vector Asset Studio also directs Gradle to generate Portable Network Graphic(PNG) raster images of the vector drawable for backward-compatibility. \n\n####Benefits\nCompared to raster images, vector drawables can ***reduce the size of your app** and be resized ***without loss of image quality。***\nMaintaining one XML file can be easier than updating multiple raster graphics at various resolutions.\n\n####Considerations\n\n***The initial loading of a vector graphic can cost more CPU cycles*** than the corresponding raster image. ***Afterward, memory use and performance are similar between the two.*** We recommend that you ***limit a vector image to a maximum of 200 x 200 dp***; otherwise, it can take too long to draw.\n\nAlthough vector drawables do support one or more colors, in many cases it makes sense to color icons black (android:fillColor=\"#FF000000\"). Using this approach, you can add a tint to the vector drawable that you placed in a layout, and the icon color changes to the tint color. If the icon color isn't black, the icon color might instead blend with the tint color.\n\n####Running Vector Android Studio\n右击res文件夹，new Vector Asset.    \n***Note:***    \n\n1. Select File > Project Structure.\n2. In the Project Structure dialog, select Project.\n3. In the Android Plugin Version field, change the Android Plugin for Gradle version to 1.5.0 or higher.\n\n***The default app icon size is 24 x 24 dp***, which is defined in the material design specification.\n\n####Referring to a Vector Drawable\n```\nDrawable drawable = res.getDrawable(R.drawable.myimage);\n\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n   VectorDrawable vectorDrawable =  (VectorDrawable) drawable;\n} else {\n   BitmapDrawable bitmapDrawable = (BitmapDrawable) drawable;\n}\n```\n## 四、 Image Asset Studio\n\nGenerates a set of icons at the appropriate resolution for each generalized screen density that your app supports.Inlcuding follow types:\n\n* launcher icons\n* action bar and tab icons\n* notification icons\n\n```\nImageView imageView = (ImageView) findViewById(R.id.myimageview);\nimageView.setImageResource(R.drawable.myimage);\n\n```\n","source":"_posts/android-ui-tools.md","raw":"title: Android-Ui-Tools\ncategories:\n  - Android\ntags:\n  - Android\n  - Tools\ndate: 2016-01-02 11:06:05\n---\n有关UI操作的tool：Layout Editor，Theme Editor，Translations Editor，Vector Asset Studio，Image Asset Studio。\n\n## 一、 Layout Editor\n## 二、 Theme Editor\n\n1. Pick a Theme\n![](https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-ui-tools/theme_tools.png?raw=true)\n2. Theme Editor\n\t* From an open styles.xml file, click Open editor near the top-right of the file window.\n\t* From the Tools menu, select Android > Theme Editor.\n\t\n## 三、 Vector Asset Studio\nHelps you ***add material icons*** and ***import Scalable Vector Graphic (SVG)*** files into your app project. SVG is an XML-based open standard of the World Wide Web Consortium (W3C). Vector Asset Studio supports the essential standard, but not all features.\n\n####Compatibility\n***Android 5.0 (API level 21)*** and higher provides vector drawable support.    \n***Android 4.4 (API level 20)*** and lower doesn't support vector drawables. If your minimum API level is set at one of these API levels, Vector Asset Studio also directs Gradle to generate Portable Network Graphic(PNG) raster images of the vector drawable for backward-compatibility. \n\n####Benefits\nCompared to raster images, vector drawables can ***reduce the size of your app** and be resized ***without loss of image quality。***\nMaintaining one XML file can be easier than updating multiple raster graphics at various resolutions.\n\n####Considerations\n\n***The initial loading of a vector graphic can cost more CPU cycles*** than the corresponding raster image. ***Afterward, memory use and performance are similar between the two.*** We recommend that you ***limit a vector image to a maximum of 200 x 200 dp***; otherwise, it can take too long to draw.\n\nAlthough vector drawables do support one or more colors, in many cases it makes sense to color icons black (android:fillColor=\"#FF000000\"). Using this approach, you can add a tint to the vector drawable that you placed in a layout, and the icon color changes to the tint color. If the icon color isn't black, the icon color might instead blend with the tint color.\n\n####Running Vector Android Studio\n右击res文件夹，new Vector Asset.    \n***Note:***    \n\n1. Select File > Project Structure.\n2. In the Project Structure dialog, select Project.\n3. In the Android Plugin Version field, change the Android Plugin for Gradle version to 1.5.0 or higher.\n\n***The default app icon size is 24 x 24 dp***, which is defined in the material design specification.\n\n####Referring to a Vector Drawable\n```\nDrawable drawable = res.getDrawable(R.drawable.myimage);\n\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n   VectorDrawable vectorDrawable =  (VectorDrawable) drawable;\n} else {\n   BitmapDrawable bitmapDrawable = (BitmapDrawable) drawable;\n}\n```\n## 四、 Image Asset Studio\n\nGenerates a set of icons at the appropriate resolution for each generalized screen density that your app supports.Inlcuding follow types:\n\n* launcher icons\n* action bar and tab icons\n* notification icons\n\n```\nImageView imageView = (ImageView) findViewById(R.id.myimageview);\nimageView.setImageResource(R.drawable.myimage);\n\n```\n","slug":"android-ui-tools","published":1,"updated":"2016-03-29T01:39:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimx9usl30013j9v8rqb5i2d6","content":"<p>有关UI操作的tool：Layout Editor，Theme Editor，Translations Editor，Vector Asset Studio，Image Asset Studio。</p>\n<h2 id=\"一、-Layout-Editor\"><a href=\"#一、-Layout-Editor\" class=\"headerlink\" title=\"一、 Layout Editor\"></a>一、 Layout Editor</h2><h2 id=\"二、-Theme-Editor\"><a href=\"#二、-Theme-Editor\" class=\"headerlink\" title=\"二、 Theme Editor\"></a>二、 Theme Editor</h2><ol>\n<li>Pick a Theme<br><img src=\"https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-ui-tools/theme_tools.png?raw=true\" alt=\"\"></li>\n<li>Theme Editor<ul>\n<li>From an open styles.xml file, click Open editor near the top-right of the file window.</li>\n<li>From the Tools menu, select Android &gt; Theme Editor.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"三、-Vector-Asset-Studio\"><a href=\"#三、-Vector-Asset-Studio\" class=\"headerlink\" title=\"三、 Vector Asset Studio\"></a>三、 Vector Asset Studio</h2><p>Helps you <strong><em>add material icons</em></strong> and <strong><em>import Scalable Vector Graphic (SVG)</em></strong> files into your app project. SVG is an XML-based open standard of the World Wide Web Consortium (W3C). Vector Asset Studio supports the essential standard, but not all features.</p>\n<p>####Compatibility<br><strong><em>Android 5.0 (API level 21)</em></strong> and higher provides vector drawable support.<br><strong><em>Android 4.4 (API level 20)</em></strong> and lower doesn’t support vector drawables. If your minimum API level is set at one of these API levels, Vector Asset Studio also directs Gradle to generate Portable Network Graphic(PNG) raster images of the vector drawable for backward-compatibility. </p>\n<p>####Benefits<br>Compared to raster images, vector drawables can <strong>*reduce the size of your app</strong> and be resized <strong><em>without loss of image quality。</em></strong><br>Maintaining one XML file can be easier than updating multiple raster graphics at various resolutions.</p>\n<p>####Considerations</p>\n<p><strong><em>The initial loading of a vector graphic can cost more CPU cycles</em></strong> than the corresponding raster image. <strong><em>Afterward, memory use and performance are similar between the two.</em></strong> We recommend that you <strong><em>limit a vector image to a maximum of 200 x 200 dp</em></strong>; otherwise, it can take too long to draw.</p>\n<p>Although vector drawables do support one or more colors, in many cases it makes sense to color icons black (android:fillColor=”#FF000000”). Using this approach, you can add a tint to the vector drawable that you placed in a layout, and the icon color changes to the tint color. If the icon color isn’t black, the icon color might instead blend with the tint color.</p>\n<p>####Running Vector Android Studio<br>右击res文件夹，new Vector Asset.<br><strong><em>Note:</em></strong>    </p>\n<ol>\n<li>Select File &gt; Project Structure.</li>\n<li>In the Project Structure dialog, select Project.</li>\n<li>In the Android Plugin Version field, change the Android Plugin for Gradle version to 1.5.0 or higher.</li>\n</ol>\n<p><strong><em>The default app icon size is 24 x 24 dp</em></strong>, which is defined in the material design specification.</p>\n<p>####Referring to a Vector Drawable<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Drawable drawable = res.getDrawable(R.drawable.myimage)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">if (<span class=\"keyword\">Build.VERSION.SDK_INT </span>&gt;= <span class=\"keyword\">Build.VERSION_CODES.LOLLIPOP) </span>&#123;</span><br><span class=\"line\">   VectorDrawable vectorDrawable =  (VectorDrawable) drawable<span class=\"comment\">;</span></span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">   <span class=\"keyword\">BitmapDrawable </span><span class=\"keyword\">bitmapDrawable </span>= (<span class=\"keyword\">BitmapDrawable) </span>drawable<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"四、-Image-Asset-Studio\"><a href=\"#四、-Image-Asset-Studio\" class=\"headerlink\" title=\"四、 Image Asset Studio\"></a>四、 Image Asset Studio</h2><p>Generates a set of icons at the appropriate resolution for each generalized screen density that your app supports.Inlcuding follow types:</p>\n<ul>\n<li>launcher icons</li>\n<li>action bar and tab icons</li>\n<li>notification icons</li>\n</ul>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImageView imageView = (ImageView) findViewById(<span class=\"keyword\">R</span>.id.myimageview)<span class=\"comment\">;</span></span><br><span class=\"line\">imageView.setImageResource(<span class=\"keyword\">R</span>.drawable.myimage)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>有关UI操作的tool：Layout Editor，Theme Editor，Translations Editor，Vector Asset Studio，Image Asset Studio。</p>\n<h2 id=\"一、-Layout-Editor\"><a href=\"#一、-Layout-Editor\" class=\"headerlink\" title=\"一、 Layout Editor\"></a>一、 Layout Editor</h2><h2 id=\"二、-Theme-Editor\"><a href=\"#二、-Theme-Editor\" class=\"headerlink\" title=\"二、 Theme Editor\"></a>二、 Theme Editor</h2><ol>\n<li>Pick a Theme<br><img src=\"https://github.com/ccSun/hexoBlogOnGitHub/blob/master/source/_posts/android-ui-tools/theme_tools.png?raw=true\" alt=\"\"></li>\n<li>Theme Editor<ul>\n<li>From an open styles.xml file, click Open editor near the top-right of the file window.</li>\n<li>From the Tools menu, select Android &gt; Theme Editor.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"三、-Vector-Asset-Studio\"><a href=\"#三、-Vector-Asset-Studio\" class=\"headerlink\" title=\"三、 Vector Asset Studio\"></a>三、 Vector Asset Studio</h2><p>Helps you <strong><em>add material icons</em></strong> and <strong><em>import Scalable Vector Graphic (SVG)</em></strong> files into your app project. SVG is an XML-based open standard of the World Wide Web Consortium (W3C). Vector Asset Studio supports the essential standard, but not all features.</p>\n<p>####Compatibility<br><strong><em>Android 5.0 (API level 21)</em></strong> and higher provides vector drawable support.<br><strong><em>Android 4.4 (API level 20)</em></strong> and lower doesn’t support vector drawables. If your minimum API level is set at one of these API levels, Vector Asset Studio also directs Gradle to generate Portable Network Graphic(PNG) raster images of the vector drawable for backward-compatibility. </p>\n<p>####Benefits<br>Compared to raster images, vector drawables can <strong>*reduce the size of your app</strong> and be resized <strong><em>without loss of image quality。</em></strong><br>Maintaining one XML file can be easier than updating multiple raster graphics at various resolutions.</p>\n<p>####Considerations</p>\n<p><strong><em>The initial loading of a vector graphic can cost more CPU cycles</em></strong> than the corresponding raster image. <strong><em>Afterward, memory use and performance are similar between the two.</em></strong> We recommend that you <strong><em>limit a vector image to a maximum of 200 x 200 dp</em></strong>; otherwise, it can take too long to draw.</p>\n<p>Although vector drawables do support one or more colors, in many cases it makes sense to color icons black (android:fillColor=”#FF000000”). Using this approach, you can add a tint to the vector drawable that you placed in a layout, and the icon color changes to the tint color. If the icon color isn’t black, the icon color might instead blend with the tint color.</p>\n<p>####Running Vector Android Studio<br>右击res文件夹，new Vector Asset.<br><strong><em>Note:</em></strong>    </p>\n<ol>\n<li>Select File &gt; Project Structure.</li>\n<li>In the Project Structure dialog, select Project.</li>\n<li>In the Android Plugin Version field, change the Android Plugin for Gradle version to 1.5.0 or higher.</li>\n</ol>\n<p><strong><em>The default app icon size is 24 x 24 dp</em></strong>, which is defined in the material design specification.</p>\n<p>####Referring to a Vector Drawable<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Drawable drawable = res.getDrawable(R.drawable.myimage)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">if (<span class=\"keyword\">Build.VERSION.SDK_INT </span>&gt;= <span class=\"keyword\">Build.VERSION_CODES.LOLLIPOP) </span>&#123;</span><br><span class=\"line\">   VectorDrawable vectorDrawable =  (VectorDrawable) drawable<span class=\"comment\">;</span></span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">   <span class=\"keyword\">BitmapDrawable </span><span class=\"keyword\">bitmapDrawable </span>= (<span class=\"keyword\">BitmapDrawable) </span>drawable<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"四、-Image-Asset-Studio\"><a href=\"#四、-Image-Asset-Studio\" class=\"headerlink\" title=\"四、 Image Asset Studio\"></a>四、 Image Asset Studio</h2><p>Generates a set of icons at the appropriate resolution for each generalized screen density that your app supports.Inlcuding follow types:</p>\n<ul>\n<li>launcher icons</li>\n<li>action bar and tab icons</li>\n<li>notification icons</li>\n</ul>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImageView imageView = (ImageView) findViewById(<span class=\"keyword\">R</span>.id.myimageview)<span class=\"comment\">;</span></span><br><span class=\"line\">imageView.setImageResource(<span class=\"keyword\">R</span>.drawable.myimage)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Spring","date":"2016-01-27T05:07:38.000Z","_content":"Spring整理\n\n## 一. 基础配置\n\n1. 导入jar包（dist）\n2. src目录添加beans.xml, schema的添加从doc的reference， spring-framework中可以找到；\n3. 创建User对象类；在beans中添加所有的累进行对象实例；\n\t\t\n\t```\n\t// 相当于User user = new User(); \n    <bean id=\"userDao\" class=\"com.xxx.model.User\" scope=\"四个值可选\"></bean>\n    ```\n    **scope默认singleton， prototype为多例。即fac.getBean时得到的对象是否时单例**\n        \n4. 测试类中使用user对象,通过工厂方法得到的user对象是被Spring管理的\n\t\n\t```\t\n\t// 创建Spring工厂\n\tprivate BeanFactory fac = new ClassPathXmlApplicationContext(\"beans.xml\");\n\tpublic void test(){\n\t\tUser user = fac.getBean(\"userDao\", User.class);\n\t}\n\t```\n\t**xml没有代码提示，在ide配置中修改xml的catalog，增加配置文件xsd；**\n\n## 二. IoC注入\n\n分层model,dao,service,action,各添加需要的包、类；    \n大项目使用xml配置，中小项目用annotation配置；\n\n### 1. 基于xml配置\n\n#### (1).手动注入\n\n1. 配置所有的类到beans.xml\n\n\t```\n\t\t\t// 相当于User user = new User();  在User类中有set/get方法\n    \t<bean id=\"user\" class=\"com.xxx.model.User\" scope=\"singleton\">\n    \t</bean>\n    \t\n    \t<bean id=\"userDao\" class=\"com.xxx.dao.UserDao\"/>\n    \t\n    \t<bean id=\"userService\" class=\"com.xxx.service.UserService\">\n    \t\t<property name=\"userDaoS\" ref=\"userDao\"></property>\n    \t\t\n    \t\t// 此处的userDaoS需要在userService中添加对应的setUserDaoS/getUserDaoS方法；\n    \t\t// 需要在service类中添加对应的setUserDaoS(IUserDao userDao)/get方法\n    \t\t// ref=\"userDao\"中的userDao即为bean.xml中配置文件的id：userDao\n    \t</bean>\n    \t\n    \t<bean id=\"userAction\" class=\"com.xxx.action.UserAction\" scope=\"prototype\">\n    \t\n    \t\t<property name=\"userService\" ref=\"userService\"></property>\n    \t\n    \t</bean>\n\t```\n\n  **对于Action而言，里面的对象的值会发生改变，需要用多例，比如2个thread添加不同的user，user已经发生了变化了**    \n  **如果没有属性、状态变化的，使用单里即可**\n3. 在各类中通过工厂方法方式获取注入的类实例；\n\n\n#### (2). 构造方法注入\n\n1. UserAction添加构造方法，有两个参数；\n2. 修改配置文件\n\n\t```\n\t    <bean id=\"userAction\" class=\"com.xxx.action.UserAction\" scope=\"prototype\">\n    \t\t<constructor-arg ref=\"userServie1\"/>\n    \t\t<constructor-arg ref=\"userServie2\"/>\n    \t</bean>\n\t```\n#### (3). 自动注入\n\n1. beans.xml配置   \n\t\t\n\t```\n \t    <bean id=\"userAction\" class=\"com.xxx.action.UserAction\" \n \t    \tscope=\"prototype\"    \n \t    \tautowire=\"xx???xxx\">    \t\n    \t</bean>\n    ```\n2. autowire=\"byName\",会调用get/set方法；\n\n3. 在配置文件root节点beans节点添加 default-autowire=\"\",则所有配置都将自动注入。\n\n**虽然减少手动配置代码，但无法通过beans文件了解所有文件结构，不建议使用。**\n\n#### (4). 属性注入\n1. 修改beans.xml\n    \t\n    ```\n\t\t// 相当于User user = new User();  在User类中有set/get方法    \n    \t<bean id=\"user\" class=\"com.xxx.model.User\" scope=\"singleton\">\n    \t\t<property name=\"id\" value=\"1\"/>\n    \t\t<property name=\"userName\" value=\"ccSun\"/>\n    \t\t<property name=\"listXX\">\n    \t\t\t<list>\n    \t\t\t</list>\n    \t\t</property>\n    \t</bean>\n    ```\n    \t\n### 2. 基于Annotation注入（Spring 3.0之后）\n\n1. beans.xml中beans节点添加context的schema；\n2. 修改beans.xml   \n\n\t```\n\t\t打开spring annotation\n\t\t<context:annotation-config/>\n\t\t设置从哪些包扫描注解\n\t\t<context:component-scan base-package=\"com.xxx\">\n\t```\n3. class文件\n\n\t```\n\t\t// 相当于<bean id=\"userDao\" class=\"com.xxx.dao.UserDao\"/>\n\t\t// @Component(\"userDao\") // 公共的创建bean的annotation,比较少用\n\t\t@Repository(\"userDao\") // 一般用于DAO的注入\n\t\tpublic class UserDAO implements IUserDao{\n\t\t}\n\t\t\n\t\t// service 中配置，默认通过名称注入\n\t\t// @Component(\"userService\")\n\t\t@Service(\"userService\") //使用service特有的注入\n\t\tpublic class Uservice implements IUserService{\n\t\t\t@Resource\n\t\t\tpublic void setUserDao(IUserDao userDao){}\n\t\t}\n\t\t\n\t\t// action 中修改scope\n\t\t@Controller(\"userAction\")\n\t\t@scope(\"prototype\")\n\t\tpublic class UserAction{}\n\t```\n## 三. AOP代理自实现\n\n### 1. 静态代理\n\n  假设在userDao的操作中需要加入log输出代码，我们可以写一个ProxyDao，在ProxyDao中写于原userDao相同的方法。方法内添加log输出，调用userDao。把ProxyDao注入到Service中。\n\t\n### 2. 动态代理\n\n1. 创建代理类  \n\n\t```\n\t\t/**\n\t\t* 1. 创建一个类实现InvocationHandler接口\n\t\t*/\n\t\tpublic class LogProxy implements InvocationHandler{\n\t\t\n\t\t\t// 2. 创建一个代理对象\n\t\t\tprivate Object target;\n\t\t\n\t\t\t//3. 创建一个方法生成对象，参数需要被代理的对象，返回代理对象\n\t\t\tpublic static Object getInstance(Object o){\n\t\t\t\t// 3.1 创建LogProxy对象\n\t\t\t\tLogProxy proxy = new LogProxy();\n\t\t\t\t// 3.2 设置这个被代理对象\n\t\t\t\tproxy.target = o;\n\t\t\t\t// 3.3 通过Proxy的方法创建代理对象\n\t\t\t\t// result是代理，它代理o\n\t\t\t\t// 第一个参数 被代理对象的classLoader\n\t\t\t\t// 第二个参数 被代理对象的实现的所有接口\n\t\t\t\t// 第三个参数 实现InvocationHandler的类\n\t\t\t\tObject result = Proxy.newProxyInstance(\n\t\t\t\t\to.getClass.getClassLoader(),\n\t\t\t\t\to.getClass.getInstances(),\n\t\t\t\t\tproxy);\n\t\t\t\treturn result;\n\t\t\t\n\t\t\t}\n\t\n\t\t\t// 当有了代理对象后，都会调用invoke方法\n\t\t\t@Override\n\t\t\tpublic Object invoke(Object proxy, Method method, Object[] args){\n\t\t\n\t\t\t\t// 自己的代码\t\t\t\n\t\t\t\tif(method.getName().equals(\"add\")) // 只在add方法添加代码\n\t\t\t\t\tLogger.info(\"hhhhalll\");\n\t\t\t\t// 自己的代码\n\t\t\t\n\t\t\t\tObject obj = method.invoke(target, args);\n\t\t\t\t\n\t\t\t\t// 自己的代码\t\n\t\t\t\t// 自己的代码\n\t\t\t\t\n\t\t\t\treturn obj;\n\t\t\t}\n\t\n\t\t}\n\t```\n2. beans.xml注入    \n\t\t没有get/set,注入属性要通过factory-method注入。\n\t\t\n\t```\n\t\t<bean id=\"userDynamicDao\" class=\"com.xxxx.LogProxy\"\n\t\t\tfactory-method=\"getInstance\"\">\n\t\t\t\n\t\t\t<constructor-arg ref=\"userDao\"/>  // 此处的userDao会找anotation中的Dao\n\t\t</bean>\n\t```\n3. Service中注入userDynamicDao\n\n\t```\n\t\t@Resource(name=\"userDynamicDao\")\n\t\tpublic void setUserDao(IUserDao userDao){\n\t\t\tthis.userDao = userDao;\n\t\t}\n\t```\n4. 通过Annotation来添加invoke代码\n\n\t(1) new Annotation文件 \n\t\t\n\t```\n\t\t@Retention(RetentionPolicy.RUNTIME)\n\t\tpublic @interface LogInfo {\n\t\t\tpublic String value() default\"\";\n\t\t}\n\t```\n\t(2) 在需要添加log输出的接口文件的方法上添加\n\t\n\t```\n\t\t@LogInfo(\"Add a new user\")\n\t\tpublic void addUser(User user);\n\t```\t\n\t(3) invoke修改\n\t\n\t```\n\t\t@Override\n\t\tpublic Object invoke(Object proxy, Method method, Object[] args){\n\t\n\t\t\t// 自己的代码\t\t\t\t\t\t\t\t\t\tif(method.isAnnotationPresent(LogInfo.class)){\n\t\t\t\tLogInfo li = method.getAnnotation(LogInfo.class);\n\t\t\t\tLogger.info(li.value());\n\t\t\t}\n\t\t\t// 自己的代码\n\t\t\n\t\t\tObject obj = method.invoke(target, args);\n\t\t\t\n\t\t\t// 自己的代码\t\n\t\t\t// 自己的代码\n\t\t\t\n\t\t\treturn obj;\n\t\t}\n\t```\n## 4. 基于Annotation实现AOP代理\n\n1. 修改beans的schema；\n\troot节点beans添加\n\t\t\n\t```\n\t\txmlns:xsi=\"xxxxx/XMLSchema-instance\"\n\t\txmlns:aop=\"http://www.springframework.org/schema/context\"\n\t\txsi:schemaLocation=\"xxxxxxxxxxx   aop  aop/spring-aop-3.0.xsd\"\n\t```\n2. 打开基于annotation的aop代理\n\t```\n\t\t<aop:aspectj-autoproxy/>\n\t```\n3. 创建aop切面\n\t\t\n\t```\n\t\t@Component(\"logAspect\") // 注入切面类给spring管理\n\t\t@Aspect // 声明这是一个切面类，Spring通过第三方aspectj实现aop切面\n\t\tpublic class LogAspect{\n\t\t\t\n\t\t\t// 在哪些类里执行\n\t\t\t// 第一个＊表示任意返回值；add*表示add开头的方法；..表示任意参数\n\t\t\t@Before(\"execution(* com.xxxxx.dao.*.add*(..))\"\n\t\t\t\t\t\t  + \"|| execution(* com.xxxxx.dao.*.update*(..))\")\n\t\t\tpublic void logStart(JoinPoint jp){\n\t\t\t\tsyso(\"加入日志\");\n\t\t\t\t// 得到执行对象\n\t\t\t\tsyso:\tjp.getTarget()\t\n\t\t\t\t// 得到执行的方法\n\t\t\t\tsyso:\tjp.getSignature().getname()\t// \n\t\t\t}\n\t\t\t\n\t\t\t@Before @After 开始、结束执行\n\t\t\t@After(\"execution(xxx)\")\n\t\t\tpublic void logEnd(JoinPoint jp){\n\t\t\t}\n\t\t\t\n\t\t\t@Around(\"execution(xxxxxx)\")\n\t\t\tpublic void logAround(ProceedingJoinPoint pjp){\n\t\t\t\t\n\t\t\t\t// coding 执行程序前执行\n\t\t\t\n\t\t\t\tpjp.process(); // 执行程序\n\t\t\t\t\n\t\t\t\t// coding 执行完程序后执行\n\t\t\t}\n\t\t}\n\t```\n\t**@Aspect依赖jar包：aopalliance.jar aspectjrt.jar aspectjweaver.jar,要先导入**\n\n## 5. 基于XML实现AOP代理\n\n1. LogAspect修改\n\n\t```\n\t\t\t@Component(\"logAspect\") // 注入切面类给spring管理\n\t\tpublic class LogAspect{\n\t\t\t\n\t\t\tpublic void logStart(JoinPoint jp){\n\t\t\t\tsyso(\"加入日志\");\n\t\t\t\t// 得到执行对象\n\t\t\t\tsyso:\tjp.getTarget()\t\n\t\t\t\t// 得到执行的方法\n\t\t\t\tsyso:\tjp.getSignature().getname()\t// \n\t\t\t}\n\t\t\t\n\t\t\tpublic void logEnd(JoinPoint jp){\n\t\t\t}\n\t\t\t\n\t\t\tpublic void logAround(ProceedingJoinPoint pjp){\n\t\t\t\t\n\t\t\t\t// coding 执行程序前执行\n\t\t\t\n\t\t\t\tpjp.process(); // 执行程序\n\t\t\t\t\n\t\t\t\t// coding 执行完程序后执行\n\t\t\t}\n\t\t}\n\t```\n2. 修改beans.xml\n\n\t```\n\t\t<aop:config>\n\t\t\t// 定义切面\n\t\t\t<aop:aspect id=\"myLogAspect\" ref=\"logAspect\">\n\t\t\t\t// 通过execution指定在哪些类加入切入点\n\t\t\t\t<aop:pointcut id=\"logPointCut\" expression=\"execution(* xxxx)\"/>\n\t\t\t\t<aop:before method=\"logStart\" pointcut-ref=\"logPointCut\"/>\n\t\t\t</aop:apsect>\n\t\t</aop:config>\t\n\t```","source":"_posts/spring.md","raw":"title: Spring\ncategories:\n  - Java\ntags:\n  - Java\n  - Spring\ndate: 2016-01-27 13:07:38\n\n---\nSpring整理\n\n## 一. 基础配置\n\n1. 导入jar包（dist）\n2. src目录添加beans.xml, schema的添加从doc的reference， spring-framework中可以找到；\n3. 创建User对象类；在beans中添加所有的累进行对象实例；\n\t\t\n\t```\n\t// 相当于User user = new User(); \n    <bean id=\"userDao\" class=\"com.xxx.model.User\" scope=\"四个值可选\"></bean>\n    ```\n    **scope默认singleton， prototype为多例。即fac.getBean时得到的对象是否时单例**\n        \n4. 测试类中使用user对象,通过工厂方法得到的user对象是被Spring管理的\n\t\n\t```\t\n\t// 创建Spring工厂\n\tprivate BeanFactory fac = new ClassPathXmlApplicationContext(\"beans.xml\");\n\tpublic void test(){\n\t\tUser user = fac.getBean(\"userDao\", User.class);\n\t}\n\t```\n\t**xml没有代码提示，在ide配置中修改xml的catalog，增加配置文件xsd；**\n\n## 二. IoC注入\n\n分层model,dao,service,action,各添加需要的包、类；    \n大项目使用xml配置，中小项目用annotation配置；\n\n### 1. 基于xml配置\n\n#### (1).手动注入\n\n1. 配置所有的类到beans.xml\n\n\t```\n\t\t\t// 相当于User user = new User();  在User类中有set/get方法\n    \t<bean id=\"user\" class=\"com.xxx.model.User\" scope=\"singleton\">\n    \t</bean>\n    \t\n    \t<bean id=\"userDao\" class=\"com.xxx.dao.UserDao\"/>\n    \t\n    \t<bean id=\"userService\" class=\"com.xxx.service.UserService\">\n    \t\t<property name=\"userDaoS\" ref=\"userDao\"></property>\n    \t\t\n    \t\t// 此处的userDaoS需要在userService中添加对应的setUserDaoS/getUserDaoS方法；\n    \t\t// 需要在service类中添加对应的setUserDaoS(IUserDao userDao)/get方法\n    \t\t// ref=\"userDao\"中的userDao即为bean.xml中配置文件的id：userDao\n    \t</bean>\n    \t\n    \t<bean id=\"userAction\" class=\"com.xxx.action.UserAction\" scope=\"prototype\">\n    \t\n    \t\t<property name=\"userService\" ref=\"userService\"></property>\n    \t\n    \t</bean>\n\t```\n\n  **对于Action而言，里面的对象的值会发生改变，需要用多例，比如2个thread添加不同的user，user已经发生了变化了**    \n  **如果没有属性、状态变化的，使用单里即可**\n3. 在各类中通过工厂方法方式获取注入的类实例；\n\n\n#### (2). 构造方法注入\n\n1. UserAction添加构造方法，有两个参数；\n2. 修改配置文件\n\n\t```\n\t    <bean id=\"userAction\" class=\"com.xxx.action.UserAction\" scope=\"prototype\">\n    \t\t<constructor-arg ref=\"userServie1\"/>\n    \t\t<constructor-arg ref=\"userServie2\"/>\n    \t</bean>\n\t```\n#### (3). 自动注入\n\n1. beans.xml配置   \n\t\t\n\t```\n \t    <bean id=\"userAction\" class=\"com.xxx.action.UserAction\" \n \t    \tscope=\"prototype\"    \n \t    \tautowire=\"xx???xxx\">    \t\n    \t</bean>\n    ```\n2. autowire=\"byName\",会调用get/set方法；\n\n3. 在配置文件root节点beans节点添加 default-autowire=\"\",则所有配置都将自动注入。\n\n**虽然减少手动配置代码，但无法通过beans文件了解所有文件结构，不建议使用。**\n\n#### (4). 属性注入\n1. 修改beans.xml\n    \t\n    ```\n\t\t// 相当于User user = new User();  在User类中有set/get方法    \n    \t<bean id=\"user\" class=\"com.xxx.model.User\" scope=\"singleton\">\n    \t\t<property name=\"id\" value=\"1\"/>\n    \t\t<property name=\"userName\" value=\"ccSun\"/>\n    \t\t<property name=\"listXX\">\n    \t\t\t<list>\n    \t\t\t</list>\n    \t\t</property>\n    \t</bean>\n    ```\n    \t\n### 2. 基于Annotation注入（Spring 3.0之后）\n\n1. beans.xml中beans节点添加context的schema；\n2. 修改beans.xml   \n\n\t```\n\t\t打开spring annotation\n\t\t<context:annotation-config/>\n\t\t设置从哪些包扫描注解\n\t\t<context:component-scan base-package=\"com.xxx\">\n\t```\n3. class文件\n\n\t```\n\t\t// 相当于<bean id=\"userDao\" class=\"com.xxx.dao.UserDao\"/>\n\t\t// @Component(\"userDao\") // 公共的创建bean的annotation,比较少用\n\t\t@Repository(\"userDao\") // 一般用于DAO的注入\n\t\tpublic class UserDAO implements IUserDao{\n\t\t}\n\t\t\n\t\t// service 中配置，默认通过名称注入\n\t\t// @Component(\"userService\")\n\t\t@Service(\"userService\") //使用service特有的注入\n\t\tpublic class Uservice implements IUserService{\n\t\t\t@Resource\n\t\t\tpublic void setUserDao(IUserDao userDao){}\n\t\t}\n\t\t\n\t\t// action 中修改scope\n\t\t@Controller(\"userAction\")\n\t\t@scope(\"prototype\")\n\t\tpublic class UserAction{}\n\t```\n## 三. AOP代理自实现\n\n### 1. 静态代理\n\n  假设在userDao的操作中需要加入log输出代码，我们可以写一个ProxyDao，在ProxyDao中写于原userDao相同的方法。方法内添加log输出，调用userDao。把ProxyDao注入到Service中。\n\t\n### 2. 动态代理\n\n1. 创建代理类  \n\n\t```\n\t\t/**\n\t\t* 1. 创建一个类实现InvocationHandler接口\n\t\t*/\n\t\tpublic class LogProxy implements InvocationHandler{\n\t\t\n\t\t\t// 2. 创建一个代理对象\n\t\t\tprivate Object target;\n\t\t\n\t\t\t//3. 创建一个方法生成对象，参数需要被代理的对象，返回代理对象\n\t\t\tpublic static Object getInstance(Object o){\n\t\t\t\t// 3.1 创建LogProxy对象\n\t\t\t\tLogProxy proxy = new LogProxy();\n\t\t\t\t// 3.2 设置这个被代理对象\n\t\t\t\tproxy.target = o;\n\t\t\t\t// 3.3 通过Proxy的方法创建代理对象\n\t\t\t\t// result是代理，它代理o\n\t\t\t\t// 第一个参数 被代理对象的classLoader\n\t\t\t\t// 第二个参数 被代理对象的实现的所有接口\n\t\t\t\t// 第三个参数 实现InvocationHandler的类\n\t\t\t\tObject result = Proxy.newProxyInstance(\n\t\t\t\t\to.getClass.getClassLoader(),\n\t\t\t\t\to.getClass.getInstances(),\n\t\t\t\t\tproxy);\n\t\t\t\treturn result;\n\t\t\t\n\t\t\t}\n\t\n\t\t\t// 当有了代理对象后，都会调用invoke方法\n\t\t\t@Override\n\t\t\tpublic Object invoke(Object proxy, Method method, Object[] args){\n\t\t\n\t\t\t\t// 自己的代码\t\t\t\n\t\t\t\tif(method.getName().equals(\"add\")) // 只在add方法添加代码\n\t\t\t\t\tLogger.info(\"hhhhalll\");\n\t\t\t\t// 自己的代码\n\t\t\t\n\t\t\t\tObject obj = method.invoke(target, args);\n\t\t\t\t\n\t\t\t\t// 自己的代码\t\n\t\t\t\t// 自己的代码\n\t\t\t\t\n\t\t\t\treturn obj;\n\t\t\t}\n\t\n\t\t}\n\t```\n2. beans.xml注入    \n\t\t没有get/set,注入属性要通过factory-method注入。\n\t\t\n\t```\n\t\t<bean id=\"userDynamicDao\" class=\"com.xxxx.LogProxy\"\n\t\t\tfactory-method=\"getInstance\"\">\n\t\t\t\n\t\t\t<constructor-arg ref=\"userDao\"/>  // 此处的userDao会找anotation中的Dao\n\t\t</bean>\n\t```\n3. Service中注入userDynamicDao\n\n\t```\n\t\t@Resource(name=\"userDynamicDao\")\n\t\tpublic void setUserDao(IUserDao userDao){\n\t\t\tthis.userDao = userDao;\n\t\t}\n\t```\n4. 通过Annotation来添加invoke代码\n\n\t(1) new Annotation文件 \n\t\t\n\t```\n\t\t@Retention(RetentionPolicy.RUNTIME)\n\t\tpublic @interface LogInfo {\n\t\t\tpublic String value() default\"\";\n\t\t}\n\t```\n\t(2) 在需要添加log输出的接口文件的方法上添加\n\t\n\t```\n\t\t@LogInfo(\"Add a new user\")\n\t\tpublic void addUser(User user);\n\t```\t\n\t(3) invoke修改\n\t\n\t```\n\t\t@Override\n\t\tpublic Object invoke(Object proxy, Method method, Object[] args){\n\t\n\t\t\t// 自己的代码\t\t\t\t\t\t\t\t\t\tif(method.isAnnotationPresent(LogInfo.class)){\n\t\t\t\tLogInfo li = method.getAnnotation(LogInfo.class);\n\t\t\t\tLogger.info(li.value());\n\t\t\t}\n\t\t\t// 自己的代码\n\t\t\n\t\t\tObject obj = method.invoke(target, args);\n\t\t\t\n\t\t\t// 自己的代码\t\n\t\t\t// 自己的代码\n\t\t\t\n\t\t\treturn obj;\n\t\t}\n\t```\n## 4. 基于Annotation实现AOP代理\n\n1. 修改beans的schema；\n\troot节点beans添加\n\t\t\n\t```\n\t\txmlns:xsi=\"xxxxx/XMLSchema-instance\"\n\t\txmlns:aop=\"http://www.springframework.org/schema/context\"\n\t\txsi:schemaLocation=\"xxxxxxxxxxx   aop  aop/spring-aop-3.0.xsd\"\n\t```\n2. 打开基于annotation的aop代理\n\t```\n\t\t<aop:aspectj-autoproxy/>\n\t```\n3. 创建aop切面\n\t\t\n\t```\n\t\t@Component(\"logAspect\") // 注入切面类给spring管理\n\t\t@Aspect // 声明这是一个切面类，Spring通过第三方aspectj实现aop切面\n\t\tpublic class LogAspect{\n\t\t\t\n\t\t\t// 在哪些类里执行\n\t\t\t// 第一个＊表示任意返回值；add*表示add开头的方法；..表示任意参数\n\t\t\t@Before(\"execution(* com.xxxxx.dao.*.add*(..))\"\n\t\t\t\t\t\t  + \"|| execution(* com.xxxxx.dao.*.update*(..))\")\n\t\t\tpublic void logStart(JoinPoint jp){\n\t\t\t\tsyso(\"加入日志\");\n\t\t\t\t// 得到执行对象\n\t\t\t\tsyso:\tjp.getTarget()\t\n\t\t\t\t// 得到执行的方法\n\t\t\t\tsyso:\tjp.getSignature().getname()\t// \n\t\t\t}\n\t\t\t\n\t\t\t@Before @After 开始、结束执行\n\t\t\t@After(\"execution(xxx)\")\n\t\t\tpublic void logEnd(JoinPoint jp){\n\t\t\t}\n\t\t\t\n\t\t\t@Around(\"execution(xxxxxx)\")\n\t\t\tpublic void logAround(ProceedingJoinPoint pjp){\n\t\t\t\t\n\t\t\t\t// coding 执行程序前执行\n\t\t\t\n\t\t\t\tpjp.process(); // 执行程序\n\t\t\t\t\n\t\t\t\t// coding 执行完程序后执行\n\t\t\t}\n\t\t}\n\t```\n\t**@Aspect依赖jar包：aopalliance.jar aspectjrt.jar aspectjweaver.jar,要先导入**\n\n## 5. 基于XML实现AOP代理\n\n1. LogAspect修改\n\n\t```\n\t\t\t@Component(\"logAspect\") // 注入切面类给spring管理\n\t\tpublic class LogAspect{\n\t\t\t\n\t\t\tpublic void logStart(JoinPoint jp){\n\t\t\t\tsyso(\"加入日志\");\n\t\t\t\t// 得到执行对象\n\t\t\t\tsyso:\tjp.getTarget()\t\n\t\t\t\t// 得到执行的方法\n\t\t\t\tsyso:\tjp.getSignature().getname()\t// \n\t\t\t}\n\t\t\t\n\t\t\tpublic void logEnd(JoinPoint jp){\n\t\t\t}\n\t\t\t\n\t\t\tpublic void logAround(ProceedingJoinPoint pjp){\n\t\t\t\t\n\t\t\t\t// coding 执行程序前执行\n\t\t\t\n\t\t\t\tpjp.process(); // 执行程序\n\t\t\t\t\n\t\t\t\t// coding 执行完程序后执行\n\t\t\t}\n\t\t}\n\t```\n2. 修改beans.xml\n\n\t```\n\t\t<aop:config>\n\t\t\t// 定义切面\n\t\t\t<aop:aspect id=\"myLogAspect\" ref=\"logAspect\">\n\t\t\t\t// 通过execution指定在哪些类加入切入点\n\t\t\t\t<aop:pointcut id=\"logPointCut\" expression=\"execution(* xxxx)\"/>\n\t\t\t\t<aop:before method=\"logStart\" pointcut-ref=\"logPointCut\"/>\n\t\t\t</aop:apsect>\n\t\t</aop:config>\t\n\t```","slug":"spring","published":1,"updated":"2016-03-15T05:10:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimx9usl60017j9v8ure00ud8","content":"<p>Spring整理</p>\n<h2 id=\"一-基础配置\"><a href=\"#一-基础配置\" class=\"headerlink\" title=\"一. 基础配置\"></a>一. 基础配置</h2><ol>\n<li>导入jar包（dist）</li>\n<li>src目录添加beans.xml, schema的添加从doc的reference， spring-framework中可以找到；</li>\n<li><p>创建User对象类；在beans中添加所有的累进行对象实例；</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 相当于User user = new User(); </span></span><br><span class=\"line\">   &lt;bean id=<span class=\"string\">\"userDao\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"com.xxx.model.User\"</span> scope=<span class=\"string\">\"四个值可选\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p> <strong>scope默认singleton， prototype为多例。即fac.getBean时得到的对象是否时单例</strong></p>\n</li>\n<li><p>测试类中使用user对象,通过工厂方法得到的user对象是被Spring管理的</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建Spring工厂</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> BeanFactory fac = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"beans.xml\"</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tUser user = fac.getBean(<span class=\"string\">\"userDao\"</span>, User.<span class=\"keyword\">class</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> <strong>xml没有代码提示，在ide配置中修改xml的catalog，增加配置文件xsd；</strong></p>\n</li>\n</ol>\n<h2 id=\"二-IoC注入\"><a href=\"#二-IoC注入\" class=\"headerlink\" title=\"二. IoC注入\"></a>二. IoC注入</h2><p>分层model,dao,service,action,各添加需要的包、类；<br>大项目使用xml配置，中小项目用annotation配置；</p>\n<h3 id=\"1-基于xml配置\"><a href=\"#1-基于xml配置\" class=\"headerlink\" title=\"1. 基于xml配置\"></a>1. 基于xml配置</h3><h4 id=\"1-手动注入\"><a href=\"#1-手动注入\" class=\"headerlink\" title=\"(1).手动注入\"></a>(1).手动注入</h4><ol>\n<li><p>配置所有的类到beans.xml</p>\n <figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 相当于<span class=\"type\">User</span> user = new <span class=\"type\">User</span>();  在<span class=\"type\">User</span>类中有<span class=\"built_in\">set</span>/get方法</span><br><span class=\"line\"> \t&lt;bean id=<span class=\"string\">\"user\"</span> class=<span class=\"string\">\"com.xxx.model.User\"</span> scope=<span class=\"string\">\"singleton\"</span>&gt;</span><br><span class=\"line\"> \t&lt;/bean&gt;</span><br><span class=\"line\"> \t</span><br><span class=\"line\"> \t&lt;bean id=<span class=\"string\">\"userDao\"</span> class=<span class=\"string\">\"com.xxx.dao.UserDao\"</span>/&gt;</span><br><span class=\"line\"> \t</span><br><span class=\"line\"> \t&lt;bean id=<span class=\"string\">\"userService\"</span> class=<span class=\"string\">\"com.xxx.service.UserService\"</span>&gt;</span><br><span class=\"line\"> \t\t&lt;property name=<span class=\"string\">\"userDaoS\"</span> <span class=\"keyword\">ref</span>=<span class=\"string\">\"userDao\"</span>&gt;&lt;/property&gt;</span><br><span class=\"line\"> \t\t</span><br><span class=\"line\"> \t\t// 此处的userDaoS需要在userService中添加对应的setUserDaoS/getUserDaoS方法；</span><br><span class=\"line\"> \t\t// 需要在service类中添加对应的setUserDaoS(<span class=\"type\">IUserDao</span> userDao)/get方法</span><br><span class=\"line\"> \t\t// <span class=\"keyword\">ref</span>=<span class=\"string\">\"userDao\"</span>中的userDao即为bean.xml中配置文件的id：userDao</span><br><span class=\"line\"> \t&lt;/bean&gt;</span><br><span class=\"line\"> \t</span><br><span class=\"line\"> \t&lt;bean id=<span class=\"string\">\"userAction\"</span> class=<span class=\"string\">\"com.xxx.action.UserAction\"</span> scope=<span class=\"string\">\"prototype\"</span>&gt;</span><br><span class=\"line\"> \t</span><br><span class=\"line\"> \t\t&lt;property name=<span class=\"string\">\"userService\"</span> <span class=\"keyword\">ref</span>=<span class=\"string\">\"userService\"</span>&gt;&lt;/property&gt;</span><br><span class=\"line\"> \t</span><br><span class=\"line\"> \t&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>对于Action而言，里面的对象的值会发生改变，需要用多例，比如2个thread添加不同的user，user已经发生了变化了</strong><br><strong>如果没有属性、状态变化的，使用单里即可</strong></p>\n</li>\n<li>在各类中通过工厂方法方式获取注入的类实例；</li>\n</ol>\n<h4 id=\"2-构造方法注入\"><a href=\"#2-构造方法注入\" class=\"headerlink\" title=\"(2). 构造方法注入\"></a>(2). 构造方法注入</h4><ol>\n<li>UserAction添加构造方法，有两个参数；</li>\n<li><p>修改配置文件</p>\n <figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=<span class=\"string\">\"userAction\"</span> class=<span class=\"string\">\"com.xxx.action.UserAction\"</span> scope=<span class=\"string\">\"prototype\"</span>&gt;</span><br><span class=\"line\">\t&lt;constructor-arg <span class=\"keyword\">ref</span>=<span class=\"string\">\"userServie1\"</span>/&gt;</span><br><span class=\"line\">\t&lt;constructor-arg <span class=\"keyword\">ref</span>=<span class=\"string\">\"userServie2\"</span>/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"3-自动注入\"><a href=\"#3-自动注入\" class=\"headerlink\" title=\"(3). 自动注入\"></a>(3). 自动注入</h4><ol>\n<li><p>beans.xml配置   </p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;bean id=<span class=\"string\">\"userAction\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"com.xxx.action.UserAction\"</span> </span><br><span class=\"line\"> \tscope=<span class=\"string\">\"prototype\"</span>    </span><br><span class=\"line\"> \tautowire=<span class=\"string\">\"xx???xxx\"</span>&gt;    \t</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>autowire=”byName”,会调用get/set方法；</p>\n</li>\n<li><p>在配置文件root节点beans节点添加 default-autowire=””,则所有配置都将自动注入。</p>\n</li>\n</ol>\n<p><strong>虽然减少手动配置代码，但无法通过beans文件了解所有文件结构，不建议使用。</strong></p>\n<h4 id=\"4-属性注入\"><a href=\"#4-属性注入\" class=\"headerlink\" title=\"(4). 属性注入\"></a>(4). 属性注入</h4><ol>\n<li><p>修改beans.xml</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 相当于User user = new User();  在User类中有<span class=\"keyword\">set</span>/<span class=\"keyword\">get</span>方法    </span><br><span class=\"line\">  \t&lt;bean <span class=\"keyword\">id</span>=<span class=\"string\">\"user\"</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"com.xxx.model.User\"</span> <span class=\"keyword\">scope</span>=<span class=\"string\">\"singleton\"</span>&gt;</span><br><span class=\"line\">  \t\t&lt;property <span class=\"keyword\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"keyword\">value</span>=<span class=\"string\">\"1\"</span>/&gt;</span><br><span class=\"line\">  \t\t&lt;property <span class=\"keyword\">name</span>=<span class=\"string\">\"userName\"</span> <span class=\"keyword\">value</span>=<span class=\"string\">\"ccSun\"</span>/&gt;</span><br><span class=\"line\">  \t\t&lt;property <span class=\"keyword\">name</span>=<span class=\"string\">\"listXX\"</span>&gt;</span><br><span class=\"line\">  \t\t\t&lt;<span class=\"keyword\">list</span>&gt;</span><br><span class=\"line\">  \t\t\t&lt;/<span class=\"keyword\">list</span>&gt;</span><br><span class=\"line\">  \t\t&lt;/property&gt;</span><br><span class=\"line\">  \t&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"2-基于Annotation注入（Spring-3-0之后）\"><a href=\"#2-基于Annotation注入（Spring-3-0之后）\" class=\"headerlink\" title=\"2. 基于Annotation注入（Spring 3.0之后）\"></a>2. 基于Annotation注入（Spring 3.0之后）</h3><ol>\n<li>beans.xml中beans节点添加context的schema；</li>\n<li><p>修改beans.xml   </p>\n <figure class=\"highlight vhdl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开spring annotation</span><br><span class=\"line\">&lt;<span class=\"keyword\">context</span>:annotation-config/&gt;</span><br><span class=\"line\">设置从哪些包扫描注解</span><br><span class=\"line\">&lt;<span class=\"keyword\">context</span>:<span class=\"keyword\">component</span>-scan base-<span class=\"keyword\">package</span>=<span class=\"string\">\"com.xxx\"</span>&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>class文件</p>\n <figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 相当于&lt;bean id=\"userDao\" class=\"com.xxx.dao.UserDao\"/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// @Component(\"userDao\") // 公共的创建bean的annotation,比较少用</span></span><br><span class=\"line\"><span class=\"variable\">@Repository</span>(<span class=\"string\">\"userDao\"</span>) <span class=\"comment\">// 一般用于DAO的注入</span></span><br><span class=\"line\">public class UserDAO implements IUserDao&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// service 中配置，默认通过名称注入</span></span><br><span class=\"line\"><span class=\"comment\">// @Component(\"userService\")</span></span><br><span class=\"line\"><span class=\"variable\">@Service</span>(<span class=\"string\">\"userService\"</span>) <span class=\"comment\">//使用service特有的注入</span></span><br><span class=\"line\">public class Uservice implements IUserService&#123;</span><br><span class=\"line\">\t<span class=\"variable\">@Resource</span></span><br><span class=\"line\">\tpublic void setUserDao(IUserDao userDao)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// action 中修改scope</span></span><br><span class=\"line\"><span class=\"variable\">@Controller</span>(<span class=\"string\">\"userAction\"</span>)</span><br><span class=\"line\"><span class=\"variable\">@scope</span>(<span class=\"string\">\"prototype\"</span>)</span><br><span class=\"line\">public class UserAction&#123;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"三-AOP代理自实现\"><a href=\"#三-AOP代理自实现\" class=\"headerlink\" title=\"三. AOP代理自实现\"></a>三. AOP代理自实现</h2><h3 id=\"1-静态代理\"><a href=\"#1-静态代理\" class=\"headerlink\" title=\"1. 静态代理\"></a>1. 静态代理</h3><p>  假设在userDao的操作中需要加入log输出代码，我们可以写一个ProxyDao，在ProxyDao中写于原userDao相同的方法。方法内添加log输出，调用userDao。把ProxyDao注入到Service中。</p>\n<h3 id=\"2-动态代理\"><a href=\"#2-动态代理\" class=\"headerlink\" title=\"2. 动态代理\"></a>2. 动态代理</h3><ol>\n<li><p>创建代理类  </p>\n <figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* <span class=\"number\">1</span>. 创建一个类实现<span class=\"type\">InvocationHandler</span>接口</span><br><span class=\"line\">*/</span><br><span class=\"line\">public class <span class=\"type\">LogProxy</span> implements <span class=\"type\">InvocationHandler</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// <span class=\"number\">2</span>. 创建一个代理对象</span><br><span class=\"line\">\tprivate <span class=\"type\">Object</span> target;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//<span class=\"number\">3</span>. 创建一个方法生成对象，参数需要被代理的对象，返回代理对象</span><br><span class=\"line\">\tpublic <span class=\"keyword\">static</span> <span class=\"type\">Object</span> getInstance(<span class=\"type\">Object</span> o)&#123;</span><br><span class=\"line\">\t\t// <span class=\"number\">3</span>.<span class=\"number\">1</span> 创建<span class=\"type\">LogProxy</span>对象</span><br><span class=\"line\">\t\t<span class=\"type\">LogProxy</span> proxy = new <span class=\"type\">LogProxy</span>();</span><br><span class=\"line\">\t\t// <span class=\"number\">3</span>.<span class=\"number\">2</span> 设置这个被代理对象</span><br><span class=\"line\">\t\tproxy.target = o;</span><br><span class=\"line\">\t\t// <span class=\"number\">3</span>.<span class=\"number\">3</span> 通过<span class=\"type\">Proxy</span>的方法创建代理对象</span><br><span class=\"line\">\t\t// <span class=\"literal\">result</span>是代理，它代理o</span><br><span class=\"line\">\t\t// 第一个参数 被代理对象的classLoader</span><br><span class=\"line\">\t\t// 第二个参数 被代理对象的实现的所有接口</span><br><span class=\"line\">\t\t// 第三个参数 实现<span class=\"type\">InvocationHandler</span>的类</span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"literal\">result</span> = <span class=\"type\">Proxy</span>.newProxyInstance(</span><br><span class=\"line\">\t\t\to.getClass.getClassLoader(),</span><br><span class=\"line\">\t\t\to.getClass.getInstances(),</span><br><span class=\"line\">\t\t\tproxy);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">result</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 当有了代理对象后，都会调用invoke方法</span><br><span class=\"line\">\t@<span class=\"type\">Override</span></span><br><span class=\"line\">\tpublic <span class=\"type\">Object</span> invoke(<span class=\"type\">Object</span> proxy, <span class=\"type\">Method</span> <span class=\"keyword\">method</span>, <span class=\"type\">Object</span>[] args)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 自己的代码\t\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">method</span>.getName().equals(<span class=\"string\">\"add\"</span>)) // 只在add方法添加代码</span><br><span class=\"line\">\t\t\t<span class=\"type\">Logger</span>.info(<span class=\"string\">\"hhhhalll\"</span>);</span><br><span class=\"line\">\t\t// 自己的代码</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> obj = <span class=\"keyword\">method</span>.invoke(target, args);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 自己的代码\t</span><br><span class=\"line\">\t\t// 自己的代码</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>beans.xml注入    </p>\n<pre><code>没有get/set,注入属性要通过factory-method注入。\n</code></pre> <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userDynamicDao\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.xxxx.LogProxy\"</span></span><br><span class=\"line\">\t<span class=\"attr\">factory-method</span>=<span class=\"string\">\"getInstance\"</span><span class=\"string\">\"&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;constructor-arg ref=\"</span><span class=\"string\">userDao\"</span>/&gt;</span>  // 此处的userDao会找anotation中的Dao</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Service中注入userDynamicDao</p>\n <figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Resource</span>(name=<span class=\"string\">\"userDynamicDao\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setUserDao</span><span class=\"params\">(IUserDao userDao)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.userDao = userDao;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过Annotation来添加invoke代码</p>\n<p> (1) new Annotation文件 </p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"keyword\">public</span> @<span class=\"keyword\">interface</span> LogInfo &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">String</span> value() <span class=\"keyword\">default</span><span class=\"string\">\"\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> (2) 在需要添加log输出的接口文件的方法上添加</p>\n <figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"meta\">@LogInfo</span>(<span class=\"string\">\"Add a new user\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addUser</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\">```\t</span><br><span class=\"line\">(<span class=\"number\">3</span>) invoke修改</span><br></pre></td></tr></table></figure>\n<pre><code>@Override\npublic Object invoke(Object proxy, Method method, Object[] args){\n\n    // 自己的代码                                        if(method.isAnnotationPresent(LogInfo.class)){\n        LogInfo li = method.getAnnotation(LogInfo.class);\n        Logger.info(li.value());\n    }\n    // 自己的代码\n\n    Object obj = method.invoke(target, args);\n\n    // 自己的代码    \n    // 自己的代码\n\n    return obj;\n}\n</code></pre> <figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">## 4. 基于Annotation实现AOP代理</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">1. </span>修改beans的schema；</span><br><span class=\"line\"><span class=\"code\">\troot节点beans添加</span></span><br></pre></td></tr></table></figure>\n<pre><code>xmlns:xsi=&quot;xxxxx/XMLSchema-instance&quot;\nxmlns:aop=&quot;http://www.springframework.org/schema/context&quot;\nxsi:schemaLocation=&quot;xxxxxxxxxxx   aop  aop/spring-aop-3.0.xsd&quot;\n</code></pre> <figure class=\"highlight capnproto\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span>. 打开基于<span class=\"keyword\">annotation</span>的aop代理</span><br></pre></td></tr></table></figure>\n<pre><code>&lt;aop:aspectj-autoproxy/&gt;\n</code></pre> <figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">3. </span>创建aop切面</span><br></pre></td></tr></table></figure>\n<pre><code>@Component(&quot;logAspect&quot;) // 注入切面类给spring管理\n@Aspect // 声明这是一个切面类，Spring通过第三方aspectj实现aop切面\npublic class LogAspect{\n\n    // 在哪些类里执行\n    // 第一个＊表示任意返回值；add*表示add开头的方法；..表示任意参数\n    @Before(&quot;execution(* com.xxxxx.dao.*.add*(..))&quot;\n                  + &quot;|| execution(* com.xxxxx.dao.*.update*(..))&quot;)\n    public void logStart(JoinPoint jp){\n        syso(&quot;加入日志&quot;);\n        // 得到执行对象\n        syso:    jp.getTarget()    \n        // 得到执行的方法\n        syso:    jp.getSignature().getname()    // \n    }\n\n    @Before @After 开始、结束执行\n    @After(&quot;execution(xxx)&quot;)\n    public void logEnd(JoinPoint jp){\n    }\n\n    @Around(&quot;execution(xxxxxx)&quot;)\n    public void logAround(ProceedingJoinPoint pjp){\n\n        // coding 执行程序前执行\n\n        pjp.process(); // 执行程序\n\n        // coding 执行完程序后执行\n    }\n}\n</code></pre> <figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">*</span><span class=\"keyword\">*</span><span class=\"meta\">@Aspect依赖jar包：aopalliance.jar</span> aspectjrt.jar aspectjweaver.jar,要先导入<span class=\"keyword\">*</span><span class=\"keyword\">*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 5. 基于XML实现AOP代理</span></span><br><span class=\"line\"></span><br><span class=\"line\">1. LogAspect修改</span><br></pre></td></tr></table></figure>\n<pre><code>    @Component(&quot;logAspect&quot;) // 注入切面类给spring管理\npublic class LogAspect{\n\n    public void logStart(JoinPoint jp){\n        syso(&quot;加入日志&quot;);\n        // 得到执行对象\n        syso:    jp.getTarget()    \n        // 得到执行的方法\n        syso:    jp.getSignature().getname()    // \n    }\n\n    public void logEnd(JoinPoint jp){\n    }\n\n    public void logAround(ProceedingJoinPoint pjp){\n\n        // coding 执行程序前执行\n\n        pjp.process(); // 执行程序\n\n        // coding 执行完程序后执行\n    }\n}\n</code></pre> <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2. 修改<span class=\"selector-tag\">beans</span><span class=\"selector-class\">.xml</span></span><br></pre></td></tr></table></figure>\n<pre><code>&lt;aop:config&gt;\n    // 定义切面\n    &lt;aop:aspect id=&quot;myLogAspect&quot; ref=&quot;logAspect&quot;&gt;\n        // 通过execution指定在哪些类加入切入点\n        &lt;aop:pointcut id=&quot;logPointCut&quot; expression=&quot;execution(* xxxx)&quot;/&gt;\n        &lt;aop:before method=&quot;logStart&quot; pointcut-ref=&quot;logPointCut&quot;/&gt;\n    &lt;/aop:apsect&gt;\n&lt;/aop:config&gt;    \n</code></pre><p> ```</p>\n</li>\n</ol>\n","excerpt":"","more":"<p>Spring整理</p>\n<h2 id=\"一-基础配置\"><a href=\"#一-基础配置\" class=\"headerlink\" title=\"一. 基础配置\"></a>一. 基础配置</h2><ol>\n<li>导入jar包（dist）</li>\n<li>src目录添加beans.xml, schema的添加从doc的reference， spring-framework中可以找到；</li>\n<li><p>创建User对象类；在beans中添加所有的累进行对象实例；</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 相当于User user = new User(); </span></span><br><span class=\"line\">   &lt;bean id=<span class=\"string\">\"userDao\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"com.xxx.model.User\"</span> scope=<span class=\"string\">\"四个值可选\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p> <strong>scope默认singleton， prototype为多例。即fac.getBean时得到的对象是否时单例</strong></p>\n</li>\n<li><p>测试类中使用user对象,通过工厂方法得到的user对象是被Spring管理的</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建Spring工厂</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> BeanFactory fac = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"beans.xml\"</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tUser user = fac.getBean(<span class=\"string\">\"userDao\"</span>, User.<span class=\"keyword\">class</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> <strong>xml没有代码提示，在ide配置中修改xml的catalog，增加配置文件xsd；</strong></p>\n</li>\n</ol>\n<h2 id=\"二-IoC注入\"><a href=\"#二-IoC注入\" class=\"headerlink\" title=\"二. IoC注入\"></a>二. IoC注入</h2><p>分层model,dao,service,action,各添加需要的包、类；<br>大项目使用xml配置，中小项目用annotation配置；</p>\n<h3 id=\"1-基于xml配置\"><a href=\"#1-基于xml配置\" class=\"headerlink\" title=\"1. 基于xml配置\"></a>1. 基于xml配置</h3><h4 id=\"1-手动注入\"><a href=\"#1-手动注入\" class=\"headerlink\" title=\"(1).手动注入\"></a>(1).手动注入</h4><ol>\n<li><p>配置所有的类到beans.xml</p>\n <figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 相当于<span class=\"type\">User</span> user = new <span class=\"type\">User</span>();  在<span class=\"type\">User</span>类中有<span class=\"built_in\">set</span>/get方法</span><br><span class=\"line\"> \t&lt;bean id=<span class=\"string\">\"user\"</span> class=<span class=\"string\">\"com.xxx.model.User\"</span> scope=<span class=\"string\">\"singleton\"</span>&gt;</span><br><span class=\"line\"> \t&lt;/bean&gt;</span><br><span class=\"line\"> \t</span><br><span class=\"line\"> \t&lt;bean id=<span class=\"string\">\"userDao\"</span> class=<span class=\"string\">\"com.xxx.dao.UserDao\"</span>/&gt;</span><br><span class=\"line\"> \t</span><br><span class=\"line\"> \t&lt;bean id=<span class=\"string\">\"userService\"</span> class=<span class=\"string\">\"com.xxx.service.UserService\"</span>&gt;</span><br><span class=\"line\"> \t\t&lt;property name=<span class=\"string\">\"userDaoS\"</span> <span class=\"keyword\">ref</span>=<span class=\"string\">\"userDao\"</span>&gt;&lt;/property&gt;</span><br><span class=\"line\"> \t\t</span><br><span class=\"line\"> \t\t// 此处的userDaoS需要在userService中添加对应的setUserDaoS/getUserDaoS方法；</span><br><span class=\"line\"> \t\t// 需要在service类中添加对应的setUserDaoS(<span class=\"type\">IUserDao</span> userDao)/get方法</span><br><span class=\"line\"> \t\t// <span class=\"keyword\">ref</span>=<span class=\"string\">\"userDao\"</span>中的userDao即为bean.xml中配置文件的id：userDao</span><br><span class=\"line\"> \t&lt;/bean&gt;</span><br><span class=\"line\"> \t</span><br><span class=\"line\"> \t&lt;bean id=<span class=\"string\">\"userAction\"</span> class=<span class=\"string\">\"com.xxx.action.UserAction\"</span> scope=<span class=\"string\">\"prototype\"</span>&gt;</span><br><span class=\"line\"> \t</span><br><span class=\"line\"> \t\t&lt;property name=<span class=\"string\">\"userService\"</span> <span class=\"keyword\">ref</span>=<span class=\"string\">\"userService\"</span>&gt;&lt;/property&gt;</span><br><span class=\"line\"> \t</span><br><span class=\"line\"> \t&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>对于Action而言，里面的对象的值会发生改变，需要用多例，比如2个thread添加不同的user，user已经发生了变化了</strong><br><strong>如果没有属性、状态变化的，使用单里即可</strong></p>\n</li>\n<li>在各类中通过工厂方法方式获取注入的类实例；</li>\n</ol>\n<h4 id=\"2-构造方法注入\"><a href=\"#2-构造方法注入\" class=\"headerlink\" title=\"(2). 构造方法注入\"></a>(2). 构造方法注入</h4><ol>\n<li>UserAction添加构造方法，有两个参数；</li>\n<li><p>修改配置文件</p>\n <figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=<span class=\"string\">\"userAction\"</span> class=<span class=\"string\">\"com.xxx.action.UserAction\"</span> scope=<span class=\"string\">\"prototype\"</span>&gt;</span><br><span class=\"line\">\t&lt;constructor-arg <span class=\"keyword\">ref</span>=<span class=\"string\">\"userServie1\"</span>/&gt;</span><br><span class=\"line\">\t&lt;constructor-arg <span class=\"keyword\">ref</span>=<span class=\"string\">\"userServie2\"</span>/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"3-自动注入\"><a href=\"#3-自动注入\" class=\"headerlink\" title=\"(3). 自动注入\"></a>(3). 自动注入</h4><ol>\n<li><p>beans.xml配置   </p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;bean id=<span class=\"string\">\"userAction\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"com.xxx.action.UserAction\"</span> </span><br><span class=\"line\"> \tscope=<span class=\"string\">\"prototype\"</span>    </span><br><span class=\"line\"> \tautowire=<span class=\"string\">\"xx???xxx\"</span>&gt;    \t</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>autowire=”byName”,会调用get/set方法；</p>\n</li>\n<li><p>在配置文件root节点beans节点添加 default-autowire=””,则所有配置都将自动注入。</p>\n</li>\n</ol>\n<p><strong>虽然减少手动配置代码，但无法通过beans文件了解所有文件结构，不建议使用。</strong></p>\n<h4 id=\"4-属性注入\"><a href=\"#4-属性注入\" class=\"headerlink\" title=\"(4). 属性注入\"></a>(4). 属性注入</h4><ol>\n<li><p>修改beans.xml</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 相当于User user = new User();  在User类中有<span class=\"keyword\">set</span>/<span class=\"keyword\">get</span>方法    </span><br><span class=\"line\">  \t&lt;bean <span class=\"keyword\">id</span>=<span class=\"string\">\"user\"</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"com.xxx.model.User\"</span> <span class=\"keyword\">scope</span>=<span class=\"string\">\"singleton\"</span>&gt;</span><br><span class=\"line\">  \t\t&lt;property <span class=\"keyword\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"keyword\">value</span>=<span class=\"string\">\"1\"</span>/&gt;</span><br><span class=\"line\">  \t\t&lt;property <span class=\"keyword\">name</span>=<span class=\"string\">\"userName\"</span> <span class=\"keyword\">value</span>=<span class=\"string\">\"ccSun\"</span>/&gt;</span><br><span class=\"line\">  \t\t&lt;property <span class=\"keyword\">name</span>=<span class=\"string\">\"listXX\"</span>&gt;</span><br><span class=\"line\">  \t\t\t&lt;<span class=\"keyword\">list</span>&gt;</span><br><span class=\"line\">  \t\t\t&lt;/<span class=\"keyword\">list</span>&gt;</span><br><span class=\"line\">  \t\t&lt;/property&gt;</span><br><span class=\"line\">  \t&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"2-基于Annotation注入（Spring-3-0之后）\"><a href=\"#2-基于Annotation注入（Spring-3-0之后）\" class=\"headerlink\" title=\"2. 基于Annotation注入（Spring 3.0之后）\"></a>2. 基于Annotation注入（Spring 3.0之后）</h3><ol>\n<li>beans.xml中beans节点添加context的schema；</li>\n<li><p>修改beans.xml   </p>\n <figure class=\"highlight vhdl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开spring annotation</span><br><span class=\"line\">&lt;<span class=\"keyword\">context</span>:annotation-config/&gt;</span><br><span class=\"line\">设置从哪些包扫描注解</span><br><span class=\"line\">&lt;<span class=\"keyword\">context</span>:<span class=\"keyword\">component</span>-scan base-<span class=\"keyword\">package</span>=<span class=\"string\">\"com.xxx\"</span>&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>class文件</p>\n <figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 相当于&lt;bean id=\"userDao\" class=\"com.xxx.dao.UserDao\"/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// @Component(\"userDao\") // 公共的创建bean的annotation,比较少用</span></span><br><span class=\"line\"><span class=\"variable\">@Repository</span>(<span class=\"string\">\"userDao\"</span>) <span class=\"comment\">// 一般用于DAO的注入</span></span><br><span class=\"line\">public class UserDAO implements IUserDao&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// service 中配置，默认通过名称注入</span></span><br><span class=\"line\"><span class=\"comment\">// @Component(\"userService\")</span></span><br><span class=\"line\"><span class=\"variable\">@Service</span>(<span class=\"string\">\"userService\"</span>) <span class=\"comment\">//使用service特有的注入</span></span><br><span class=\"line\">public class Uservice implements IUserService&#123;</span><br><span class=\"line\">\t<span class=\"variable\">@Resource</span></span><br><span class=\"line\">\tpublic void setUserDao(IUserDao userDao)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// action 中修改scope</span></span><br><span class=\"line\"><span class=\"variable\">@Controller</span>(<span class=\"string\">\"userAction\"</span>)</span><br><span class=\"line\"><span class=\"variable\">@scope</span>(<span class=\"string\">\"prototype\"</span>)</span><br><span class=\"line\">public class UserAction&#123;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"三-AOP代理自实现\"><a href=\"#三-AOP代理自实现\" class=\"headerlink\" title=\"三. AOP代理自实现\"></a>三. AOP代理自实现</h2><h3 id=\"1-静态代理\"><a href=\"#1-静态代理\" class=\"headerlink\" title=\"1. 静态代理\"></a>1. 静态代理</h3><p>  假设在userDao的操作中需要加入log输出代码，我们可以写一个ProxyDao，在ProxyDao中写于原userDao相同的方法。方法内添加log输出，调用userDao。把ProxyDao注入到Service中。</p>\n<h3 id=\"2-动态代理\"><a href=\"#2-动态代理\" class=\"headerlink\" title=\"2. 动态代理\"></a>2. 动态代理</h3><ol>\n<li><p>创建代理类  </p>\n <figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* <span class=\"number\">1</span>. 创建一个类实现<span class=\"type\">InvocationHandler</span>接口</span><br><span class=\"line\">*/</span><br><span class=\"line\">public class <span class=\"type\">LogProxy</span> implements <span class=\"type\">InvocationHandler</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// <span class=\"number\">2</span>. 创建一个代理对象</span><br><span class=\"line\">\tprivate <span class=\"type\">Object</span> target;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//<span class=\"number\">3</span>. 创建一个方法生成对象，参数需要被代理的对象，返回代理对象</span><br><span class=\"line\">\tpublic <span class=\"keyword\">static</span> <span class=\"type\">Object</span> getInstance(<span class=\"type\">Object</span> o)&#123;</span><br><span class=\"line\">\t\t// <span class=\"number\">3</span>.<span class=\"number\">1</span> 创建<span class=\"type\">LogProxy</span>对象</span><br><span class=\"line\">\t\t<span class=\"type\">LogProxy</span> proxy = new <span class=\"type\">LogProxy</span>();</span><br><span class=\"line\">\t\t// <span class=\"number\">3</span>.<span class=\"number\">2</span> 设置这个被代理对象</span><br><span class=\"line\">\t\tproxy.target = o;</span><br><span class=\"line\">\t\t// <span class=\"number\">3</span>.<span class=\"number\">3</span> 通过<span class=\"type\">Proxy</span>的方法创建代理对象</span><br><span class=\"line\">\t\t// <span class=\"literal\">result</span>是代理，它代理o</span><br><span class=\"line\">\t\t// 第一个参数 被代理对象的classLoader</span><br><span class=\"line\">\t\t// 第二个参数 被代理对象的实现的所有接口</span><br><span class=\"line\">\t\t// 第三个参数 实现<span class=\"type\">InvocationHandler</span>的类</span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"literal\">result</span> = <span class=\"type\">Proxy</span>.newProxyInstance(</span><br><span class=\"line\">\t\t\to.getClass.getClassLoader(),</span><br><span class=\"line\">\t\t\to.getClass.getInstances(),</span><br><span class=\"line\">\t\t\tproxy);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">result</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 当有了代理对象后，都会调用invoke方法</span><br><span class=\"line\">\t@<span class=\"type\">Override</span></span><br><span class=\"line\">\tpublic <span class=\"type\">Object</span> invoke(<span class=\"type\">Object</span> proxy, <span class=\"type\">Method</span> <span class=\"keyword\">method</span>, <span class=\"type\">Object</span>[] args)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 自己的代码\t\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">method</span>.getName().equals(<span class=\"string\">\"add\"</span>)) // 只在add方法添加代码</span><br><span class=\"line\">\t\t\t<span class=\"type\">Logger</span>.info(<span class=\"string\">\"hhhhalll\"</span>);</span><br><span class=\"line\">\t\t// 自己的代码</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> obj = <span class=\"keyword\">method</span>.invoke(target, args);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 自己的代码\t</span><br><span class=\"line\">\t\t// 自己的代码</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>beans.xml注入    </p>\n<pre><code>没有get/set,注入属性要通过factory-method注入。\n</code></pre> <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userDynamicDao\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.xxxx.LogProxy\"</span></span><br><span class=\"line\">\t<span class=\"attr\">factory-method</span>=<span class=\"string\">\"getInstance\"</span><span class=\"string\">\"&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;constructor-arg ref=\"</span><span class=\"string\">userDao\"</span>/&gt;</span>  // 此处的userDao会找anotation中的Dao</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Service中注入userDynamicDao</p>\n <figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Resource</span>(name=<span class=\"string\">\"userDynamicDao\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setUserDao</span><span class=\"params\">(IUserDao userDao)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.userDao = userDao;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过Annotation来添加invoke代码</p>\n<p> (1) new Annotation文件 </p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"keyword\">public</span> @<span class=\"keyword\">interface</span> LogInfo &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">String</span> value() <span class=\"keyword\">default</span><span class=\"string\">\"\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> (2) 在需要添加log输出的接口文件的方法上添加</p>\n <figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"meta\">@LogInfo</span>(<span class=\"string\">\"Add a new user\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addUser</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\">```\t</span><br><span class=\"line\">(<span class=\"number\">3</span>) invoke修改</span><br></pre></td></tr></table></figure>\n<pre><code>@Override\npublic Object invoke(Object proxy, Method method, Object[] args){\n\n    // 自己的代码                                        if(method.isAnnotationPresent(LogInfo.class)){\n        LogInfo li = method.getAnnotation(LogInfo.class);\n        Logger.info(li.value());\n    }\n    // 自己的代码\n\n    Object obj = method.invoke(target, args);\n\n    // 自己的代码    \n    // 自己的代码\n\n    return obj;\n}\n</code></pre> <figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">## 4. 基于Annotation实现AOP代理</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">1. </span>修改beans的schema；</span><br><span class=\"line\"><span class=\"code\">\troot节点beans添加</span></span><br></pre></td></tr></table></figure>\n<pre><code>xmlns:xsi=&quot;xxxxx/XMLSchema-instance&quot;\nxmlns:aop=&quot;http://www.springframework.org/schema/context&quot;\nxsi:schemaLocation=&quot;xxxxxxxxxxx   aop  aop/spring-aop-3.0.xsd&quot;\n</code></pre> <figure class=\"highlight capnproto\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span>. 打开基于<span class=\"keyword\">annotation</span>的aop代理</span><br></pre></td></tr></table></figure>\n<pre><code>&lt;aop:aspectj-autoproxy/&gt;\n</code></pre> <figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">3. </span>创建aop切面</span><br></pre></td></tr></table></figure>\n<pre><code>@Component(&quot;logAspect&quot;) // 注入切面类给spring管理\n@Aspect // 声明这是一个切面类，Spring通过第三方aspectj实现aop切面\npublic class LogAspect{\n\n    // 在哪些类里执行\n    // 第一个＊表示任意返回值；add*表示add开头的方法；..表示任意参数\n    @Before(&quot;execution(* com.xxxxx.dao.*.add*(..))&quot;\n                  + &quot;|| execution(* com.xxxxx.dao.*.update*(..))&quot;)\n    public void logStart(JoinPoint jp){\n        syso(&quot;加入日志&quot;);\n        // 得到执行对象\n        syso:    jp.getTarget()    \n        // 得到执行的方法\n        syso:    jp.getSignature().getname()    // \n    }\n\n    @Before @After 开始、结束执行\n    @After(&quot;execution(xxx)&quot;)\n    public void logEnd(JoinPoint jp){\n    }\n\n    @Around(&quot;execution(xxxxxx)&quot;)\n    public void logAround(ProceedingJoinPoint pjp){\n\n        // coding 执行程序前执行\n\n        pjp.process(); // 执行程序\n\n        // coding 执行完程序后执行\n    }\n}\n</code></pre> <figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">*</span><span class=\"keyword\">*</span><span class=\"meta\">@Aspect依赖jar包：aopalliance.jar</span> aspectjrt.jar aspectjweaver.jar,要先导入<span class=\"keyword\">*</span><span class=\"keyword\">*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 5. 基于XML实现AOP代理</span></span><br><span class=\"line\"></span><br><span class=\"line\">1. LogAspect修改</span><br></pre></td></tr></table></figure>\n<pre><code>    @Component(&quot;logAspect&quot;) // 注入切面类给spring管理\npublic class LogAspect{\n\n    public void logStart(JoinPoint jp){\n        syso(&quot;加入日志&quot;);\n        // 得到执行对象\n        syso:    jp.getTarget()    \n        // 得到执行的方法\n        syso:    jp.getSignature().getname()    // \n    }\n\n    public void logEnd(JoinPoint jp){\n    }\n\n    public void logAround(ProceedingJoinPoint pjp){\n\n        // coding 执行程序前执行\n\n        pjp.process(); // 执行程序\n\n        // coding 执行完程序后执行\n    }\n}\n</code></pre> <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2. 修改<span class=\"selector-tag\">beans</span><span class=\"selector-class\">.xml</span></span><br></pre></td></tr></table></figure>\n<pre><code>&lt;aop:config&gt;\n    // 定义切面\n    &lt;aop:aspect id=&quot;myLogAspect&quot; ref=&quot;logAspect&quot;&gt;\n        // 通过execution指定在哪些类加入切入点\n        &lt;aop:pointcut id=&quot;logPointCut&quot; expression=&quot;execution(* xxxx)&quot;/&gt;\n        &lt;aop:before method=&quot;logStart&quot; pointcut-ref=&quot;logPointCut&quot;/&gt;\n    &lt;/aop:apsect&gt;\n&lt;/aop:config&gt;    \n</code></pre><p> ```</p>\n</li>\n</ol>\n"},{"title":"Object-c Diary","date":"2016-01-26T09:08:25.000Z","_content":"Object-c的基础知识点整理\n\n## 1. Object-c\n\n1. OC里NS前缀的来生\nCocoa 是从1980年代由 NeXT 开发的编程环境 NeXTSTEP 和 OPENSTEP 演变而来，这点可由其类别之名皆以 NS 前缀（代表NeXTSTEP）看出端倪。苹果电脑公司在1996年12月收购了NeXT。  \n\n2. CF前缀\nFoundation框架是以CoreFoundation为基础创建的。CoreFoundation是纯C写的。变量名以CF开头。  \n\n3. CG前缀\nCG前缀是Core Graphics框架提供，用于2D渲染。如CGPoint，CGSize。  \n\n4. 所有的Object－c对象都是动态分配的，动态分配会损耗时间。所以Foundation中有一些数据类型是用C写的。  \n\n5. 定义函数参数 ... 表示可以传入多个以逗号间隔的参数  \n\n6. 定义函数前缀 ＋ ，表示当前方法属于类，而不是实例对象。通常用于工厂方法创建对象实例，也用于全局数据。 \n\n7. OC创建一个对象，包含指向 超类，类名，类方法列表的指针，和一个long数据表示实例对象的大小（以字节为单位）。\n\n\n## 2. Foundation Kit\n###(1). 简介\n\n1. Cocoa常用的是Foundation和Application Kit。包含所有的用户界面UI和高级类。\n\n###(2). 常用数据类型\n\n1. 范围    \n\tcool在\"Objective-C is a cool language\"中的区间[17,4]\n\t\n\t```\n\t\t(1)NSRange range = {17, 4};    \n\t\t(2)NSRange range = NSMakeRange(17,4);     \n\n\t\ttypedef struct _NSRANGE{\n\t\t\tunsigned int location;\n\t\t\tunsigned int length;\n\t\t} NSRange;\n    ```\n2. 几何数据\n\n\t```\n\t\tCGPoint \t点坐标\n\t\tCGSize\t\t长度宽度\n\t\tCGRect\t\t矩形\n\t```\n3. 字符串\n\n\t**长度**\n\n\t```\n\t\tNSString *height = [NSString stringWithFormat:@\"lenght:%d\", 5];\n\t\tNSUInteger len = [height length]; // length返回准确长度，适用中文，strlen只计算字节数。\t\n\t```\n\t**大小**\n\t\n\t```\n\t\tif(str1 compare: str2 options: NSCaseInsensitiveSearch)\n\t\t[@\"100\" compare: @\"99\"]   NSOrderedAscending\n\t\t[@\"100\" compare: @\"99\" options:NSNumericSearch]  NSOrderedDescending\n\t```\n\t**包含**\n\t\n\t```\n\t\t[filename hasPrefix:@\"draft\"]\n\t\t[filename hasSuffix:@\".rmvb\"]\n\t\tNSRange range = [filename rangeOfString:@chapter\"]\n\t```\n\t**可变长度**\n\t\n\t```\n\t\tNSMutableString *string = [NSMutableString stringWithCapacity:42]; // 给一个大约的范围\n\t\t[string appendString: @\"hello tom god\"];\n\t\t[string appendFormat: @\"human %d\", 39];\n\t\tRange range = [string rangeOfString:@\"tom\"];\n\t\trange.length++; // eat the space that follows\n\t\t[string deleteCharactersInRange:range]\n\t```\n\t**颜色**\n\t\n\t```\n\t\tNSColor *blue = [NSColor blueColor];\n\t\tUIColor *blue = [UIColor blueColor];\n\t```\n\t**几何**\n\n\t```\n\t\t// NSArray 只能存OC的对象，不能存C原始类型 int float enum struct\n\t\tNSArray *array = [NSArray arrayWithObjects:@\"one\",@\"two\",@\"three\",nil];\n\t\tNSArray *array = @[@\"one\", @\"two\", @\"three\"];\n\t```\n4. ","source":"_posts/object-c-diary.md","raw":"title: Object-c Diary\ncategories:\n  - iOS\ntags:\n  - iOS\n  - Object-c\ndate: 2016-01-26 17:08:25\n---\nObject-c的基础知识点整理\n\n## 1. Object-c\n\n1. OC里NS前缀的来生\nCocoa 是从1980年代由 NeXT 开发的编程环境 NeXTSTEP 和 OPENSTEP 演变而来，这点可由其类别之名皆以 NS 前缀（代表NeXTSTEP）看出端倪。苹果电脑公司在1996年12月收购了NeXT。  \n\n2. CF前缀\nFoundation框架是以CoreFoundation为基础创建的。CoreFoundation是纯C写的。变量名以CF开头。  \n\n3. CG前缀\nCG前缀是Core Graphics框架提供，用于2D渲染。如CGPoint，CGSize。  \n\n4. 所有的Object－c对象都是动态分配的，动态分配会损耗时间。所以Foundation中有一些数据类型是用C写的。  \n\n5. 定义函数参数 ... 表示可以传入多个以逗号间隔的参数  \n\n6. 定义函数前缀 ＋ ，表示当前方法属于类，而不是实例对象。通常用于工厂方法创建对象实例，也用于全局数据。 \n\n7. OC创建一个对象，包含指向 超类，类名，类方法列表的指针，和一个long数据表示实例对象的大小（以字节为单位）。\n\n\n## 2. Foundation Kit\n###(1). 简介\n\n1. Cocoa常用的是Foundation和Application Kit。包含所有的用户界面UI和高级类。\n\n###(2). 常用数据类型\n\n1. 范围    \n\tcool在\"Objective-C is a cool language\"中的区间[17,4]\n\t\n\t```\n\t\t(1)NSRange range = {17, 4};    \n\t\t(2)NSRange range = NSMakeRange(17,4);     \n\n\t\ttypedef struct _NSRANGE{\n\t\t\tunsigned int location;\n\t\t\tunsigned int length;\n\t\t} NSRange;\n    ```\n2. 几何数据\n\n\t```\n\t\tCGPoint \t点坐标\n\t\tCGSize\t\t长度宽度\n\t\tCGRect\t\t矩形\n\t```\n3. 字符串\n\n\t**长度**\n\n\t```\n\t\tNSString *height = [NSString stringWithFormat:@\"lenght:%d\", 5];\n\t\tNSUInteger len = [height length]; // length返回准确长度，适用中文，strlen只计算字节数。\t\n\t```\n\t**大小**\n\t\n\t```\n\t\tif(str1 compare: str2 options: NSCaseInsensitiveSearch)\n\t\t[@\"100\" compare: @\"99\"]   NSOrderedAscending\n\t\t[@\"100\" compare: @\"99\" options:NSNumericSearch]  NSOrderedDescending\n\t```\n\t**包含**\n\t\n\t```\n\t\t[filename hasPrefix:@\"draft\"]\n\t\t[filename hasSuffix:@\".rmvb\"]\n\t\tNSRange range = [filename rangeOfString:@chapter\"]\n\t```\n\t**可变长度**\n\t\n\t```\n\t\tNSMutableString *string = [NSMutableString stringWithCapacity:42]; // 给一个大约的范围\n\t\t[string appendString: @\"hello tom god\"];\n\t\t[string appendFormat: @\"human %d\", 39];\n\t\tRange range = [string rangeOfString:@\"tom\"];\n\t\trange.length++; // eat the space that follows\n\t\t[string deleteCharactersInRange:range]\n\t```\n\t**颜色**\n\t\n\t```\n\t\tNSColor *blue = [NSColor blueColor];\n\t\tUIColor *blue = [UIColor blueColor];\n\t```\n\t**几何**\n\n\t```\n\t\t// NSArray 只能存OC的对象，不能存C原始类型 int float enum struct\n\t\tNSArray *array = [NSArray arrayWithObjects:@\"one\",@\"two\",@\"three\",nil];\n\t\tNSArray *array = @[@\"one\", @\"two\", @\"three\"];\n\t```\n4. ","slug":"object-c-diary","published":1,"updated":"2016-03-15T05:10:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimx9usl80019j9v834idbqqp","content":"<p>Object-c的基础知识点整理</p>\n<h2 id=\"1-Object-c\"><a href=\"#1-Object-c\" class=\"headerlink\" title=\"1. Object-c\"></a>1. Object-c</h2><ol>\n<li><p>OC里NS前缀的来生<br>Cocoa 是从1980年代由 NeXT 开发的编程环境 NeXTSTEP 和 OPENSTEP 演变而来，这点可由其类别之名皆以 NS 前缀（代表NeXTSTEP）看出端倪。苹果电脑公司在1996年12月收购了NeXT。  </p>\n</li>\n<li><p>CF前缀<br>Foundation框架是以CoreFoundation为基础创建的。CoreFoundation是纯C写的。变量名以CF开头。  </p>\n</li>\n<li><p>CG前缀<br>CG前缀是Core Graphics框架提供，用于2D渲染。如CGPoint，CGSize。  </p>\n</li>\n<li><p>所有的Object－c对象都是动态分配的，动态分配会损耗时间。所以Foundation中有一些数据类型是用C写的。  </p>\n</li>\n<li><p>定义函数参数 … 表示可以传入多个以逗号间隔的参数  </p>\n</li>\n<li><p>定义函数前缀 ＋ ，表示当前方法属于类，而不是实例对象。通常用于工厂方法创建对象实例，也用于全局数据。 </p>\n</li>\n<li><p>OC创建一个对象，包含指向 超类，类名，类方法列表的指针，和一个long数据表示实例对象的大小（以字节为单位）。</p>\n</li>\n</ol>\n<h2 id=\"2-Foundation-Kit\"><a href=\"#2-Foundation-Kit\" class=\"headerlink\" title=\"2. Foundation Kit\"></a>2. Foundation Kit</h2><p>###(1). 简介</p>\n<ol>\n<li>Cocoa常用的是Foundation和Application Kit。包含所有的用户界面UI和高级类。</li>\n</ol>\n<p>###(2). 常用数据类型</p>\n<ol>\n<li><p>范围<br> cool在”Objective-C is a cool language”中的区间[17,4]</p>\n <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">1</span>)<span class=\"built_in\">NSRange</span> range = &#123;<span class=\"number\">17</span>, <span class=\"number\">4</span>&#125;;    </span><br><span class=\"line\">(<span class=\"number\">2</span>)<span class=\"built_in\">NSRange</span> range = <span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">17</span>,<span class=\"number\">4</span>);     </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _<span class=\"built_in\">NSRANGE</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> location;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> length;</span><br><span class=\"line\">&#125; <span class=\"built_in\">NSRange</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>几何数据</p>\n <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">CGPoint</span> \t点坐标</span><br><span class=\"line\"><span class=\"built_in\">CGSize</span>\t\t长度宽度</span><br><span class=\"line\"><span class=\"built_in\">CGRect</span>\t\t矩形</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串</p>\n<p> <strong>长度</strong></p>\n <figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *<span class=\"built_in\">height</span> = [NSString stringWithFormat:@<span class=\"string\">\"lenght:%d\"</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">NSUInteger len = [<span class=\"built_in\">height</span> <span class=\"built_in\">length</span>]; // <span class=\"built_in\">length</span>返回准确长度，适用中文，strlen只计算字节数。</span><br></pre></td></tr></table></figure>\n<p> <strong>大小</strong></p>\n <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(str1 <span class=\"string\">compare:</span> str2 <span class=\"string\">options:</span> NSCaseInsensitiveSearch)</span><br><span class=\"line\">[@<span class=\"string\">\"100\"</span> <span class=\"string\">compare:</span> @<span class=\"string\">\"99\"</span>]   NSOrderedAscending</span><br><span class=\"line\">[@<span class=\"string\">\"100\"</span> <span class=\"string\">compare:</span> @<span class=\"string\">\"99\"</span> <span class=\"string\">options:</span>NSNumericSearch]  NSOrderedDescending</span><br></pre></td></tr></table></figure>\n<p> <strong>包含</strong></p>\n <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[filename <span class=\"string\">hasPrefix:</span>@<span class=\"string\">\"draft\"</span>]</span><br><span class=\"line\">[filename <span class=\"string\">hasSuffix:</span>@<span class=\"string\">\".rmvb\"</span>]</span><br><span class=\"line\">NSRange range = [filename <span class=\"string\">rangeOfString:</span><span class=\"meta\">@chapter</span><span class=\"string\">\"]</span></span><br></pre></td></tr></table></figure>\n<p> <strong>可变长度</strong></p>\n <figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableString *<span class=\"built_in\">string</span> = [NSMutableString <span class=\"attribute\">stringWithCapacity</span>:<span class=\"number\">42</span>]; <span class=\"comment\">// 给一个大约的范围</span></span><br><span class=\"line\">[<span class=\"built_in\">string</span> <span class=\"attribute\">appendString</span>: @<span class=\"string\">\"hello tom god\"</span>];</span><br><span class=\"line\">[<span class=\"built_in\">string</span> <span class=\"attribute\">appendFormat</span>: @<span class=\"string\">\"human %d\"</span>, <span class=\"number\">39</span>];</span><br><span class=\"line\">Range range = [<span class=\"built_in\">string</span> <span class=\"attribute\">rangeOfString</span>:@<span class=\"string\">\"tom\"</span>];</span><br><span class=\"line\">range.length++; <span class=\"comment\">// eat the space that follows</span></span><br><span class=\"line\">[<span class=\"built_in\">string</span> <span class=\"attribute\">deleteCharactersInRange</span>:<span class=\"attribute\">range]</span></span><br></pre></td></tr></table></figure>\n<p> <strong>颜色</strong></p>\n <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSColor</span> *blue = [<span class=\"built_in\">NSColor</span> blueColor];</span><br><span class=\"line\"><span class=\"built_in\">UIColor</span> *blue = [<span class=\"built_in\">UIColor</span> blueColor];</span><br></pre></td></tr></table></figure>\n<p> <strong>几何</strong></p>\n <figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// <span class=\"type\">NSArray</span> 只能存<span class=\"type\">OC</span>的对象，不能存C原始类型 <span class=\"built_in\">int</span> <span class=\"built_in\">float</span> <span class=\"keyword\">enum</span> struct</span><br><span class=\"line\"><span class=\"type\">NSArray</span> *<span class=\"built_in\">array</span> = [<span class=\"type\">NSArray</span> arrayWithObjects:@<span class=\"string\">\"one\"</span>,@<span class=\"string\">\"two\"</span>,@<span class=\"string\">\"three\"</span>,<span class=\"keyword\">nil</span>];</span><br><span class=\"line\"><span class=\"type\">NSArray</span> *<span class=\"built_in\">array</span> = @[@<span class=\"string\">\"one\"</span>, @<span class=\"string\">\"two\"</span>, @<span class=\"string\">\"three\"</span>];</span><br></pre></td></tr></table></figure>\n</li>\n<li></li>\n</ol>\n","excerpt":"","more":"<p>Object-c的基础知识点整理</p>\n<h2 id=\"1-Object-c\"><a href=\"#1-Object-c\" class=\"headerlink\" title=\"1. Object-c\"></a>1. Object-c</h2><ol>\n<li><p>OC里NS前缀的来生<br>Cocoa 是从1980年代由 NeXT 开发的编程环境 NeXTSTEP 和 OPENSTEP 演变而来，这点可由其类别之名皆以 NS 前缀（代表NeXTSTEP）看出端倪。苹果电脑公司在1996年12月收购了NeXT。  </p>\n</li>\n<li><p>CF前缀<br>Foundation框架是以CoreFoundation为基础创建的。CoreFoundation是纯C写的。变量名以CF开头。  </p>\n</li>\n<li><p>CG前缀<br>CG前缀是Core Graphics框架提供，用于2D渲染。如CGPoint，CGSize。  </p>\n</li>\n<li><p>所有的Object－c对象都是动态分配的，动态分配会损耗时间。所以Foundation中有一些数据类型是用C写的。  </p>\n</li>\n<li><p>定义函数参数 … 表示可以传入多个以逗号间隔的参数  </p>\n</li>\n<li><p>定义函数前缀 ＋ ，表示当前方法属于类，而不是实例对象。通常用于工厂方法创建对象实例，也用于全局数据。 </p>\n</li>\n<li><p>OC创建一个对象，包含指向 超类，类名，类方法列表的指针，和一个long数据表示实例对象的大小（以字节为单位）。</p>\n</li>\n</ol>\n<h2 id=\"2-Foundation-Kit\"><a href=\"#2-Foundation-Kit\" class=\"headerlink\" title=\"2. Foundation Kit\"></a>2. Foundation Kit</h2><p>###(1). 简介</p>\n<ol>\n<li>Cocoa常用的是Foundation和Application Kit。包含所有的用户界面UI和高级类。</li>\n</ol>\n<p>###(2). 常用数据类型</p>\n<ol>\n<li><p>范围<br> cool在”Objective-C is a cool language”中的区间[17,4]</p>\n <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">1</span>)<span class=\"built_in\">NSRange</span> range = &#123;<span class=\"number\">17</span>, <span class=\"number\">4</span>&#125;;    </span><br><span class=\"line\">(<span class=\"number\">2</span>)<span class=\"built_in\">NSRange</span> range = <span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">17</span>,<span class=\"number\">4</span>);     </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _<span class=\"built_in\">NSRANGE</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> location;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> length;</span><br><span class=\"line\">&#125; <span class=\"built_in\">NSRange</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>几何数据</p>\n <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">CGPoint</span> \t点坐标</span><br><span class=\"line\"><span class=\"built_in\">CGSize</span>\t\t长度宽度</span><br><span class=\"line\"><span class=\"built_in\">CGRect</span>\t\t矩形</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串</p>\n<p> <strong>长度</strong></p>\n <figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *<span class=\"built_in\">height</span> = [NSString stringWithFormat:@<span class=\"string\">\"lenght:%d\"</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">NSUInteger len = [<span class=\"built_in\">height</span> <span class=\"built_in\">length</span>]; // <span class=\"built_in\">length</span>返回准确长度，适用中文，strlen只计算字节数。</span><br></pre></td></tr></table></figure>\n<p> <strong>大小</strong></p>\n <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(str1 <span class=\"string\">compare:</span> str2 <span class=\"string\">options:</span> NSCaseInsensitiveSearch)</span><br><span class=\"line\">[@<span class=\"string\">\"100\"</span> <span class=\"string\">compare:</span> @<span class=\"string\">\"99\"</span>]   NSOrderedAscending</span><br><span class=\"line\">[@<span class=\"string\">\"100\"</span> <span class=\"string\">compare:</span> @<span class=\"string\">\"99\"</span> <span class=\"string\">options:</span>NSNumericSearch]  NSOrderedDescending</span><br></pre></td></tr></table></figure>\n<p> <strong>包含</strong></p>\n <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[filename <span class=\"string\">hasPrefix:</span>@<span class=\"string\">\"draft\"</span>]</span><br><span class=\"line\">[filename <span class=\"string\">hasSuffix:</span>@<span class=\"string\">\".rmvb\"</span>]</span><br><span class=\"line\">NSRange range = [filename <span class=\"string\">rangeOfString:</span><span class=\"meta\">@chapter</span><span class=\"string\">\"]</span></span><br></pre></td></tr></table></figure>\n<p> <strong>可变长度</strong></p>\n <figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableString *<span class=\"built_in\">string</span> = [NSMutableString <span class=\"attribute\">stringWithCapacity</span>:<span class=\"number\">42</span>]; <span class=\"comment\">// 给一个大约的范围</span></span><br><span class=\"line\">[<span class=\"built_in\">string</span> <span class=\"attribute\">appendString</span>: @<span class=\"string\">\"hello tom god\"</span>];</span><br><span class=\"line\">[<span class=\"built_in\">string</span> <span class=\"attribute\">appendFormat</span>: @<span class=\"string\">\"human %d\"</span>, <span class=\"number\">39</span>];</span><br><span class=\"line\">Range range = [<span class=\"built_in\">string</span> <span class=\"attribute\">rangeOfString</span>:@<span class=\"string\">\"tom\"</span>];</span><br><span class=\"line\">range.length++; <span class=\"comment\">// eat the space that follows</span></span><br><span class=\"line\">[<span class=\"built_in\">string</span> <span class=\"attribute\">deleteCharactersInRange</span>:<span class=\"attribute\">range]</span></span><br></pre></td></tr></table></figure>\n<p> <strong>颜色</strong></p>\n <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSColor</span> *blue = [<span class=\"built_in\">NSColor</span> blueColor];</span><br><span class=\"line\"><span class=\"built_in\">UIColor</span> *blue = [<span class=\"built_in\">UIColor</span> blueColor];</span><br></pre></td></tr></table></figure>\n<p> <strong>几何</strong></p>\n <figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// <span class=\"type\">NSArray</span> 只能存<span class=\"type\">OC</span>的对象，不能存C原始类型 <span class=\"built_in\">int</span> <span class=\"built_in\">float</span> <span class=\"keyword\">enum</span> struct</span><br><span class=\"line\"><span class=\"type\">NSArray</span> *<span class=\"built_in\">array</span> = [<span class=\"type\">NSArray</span> arrayWithObjects:@<span class=\"string\">\"one\"</span>,@<span class=\"string\">\"two\"</span>,@<span class=\"string\">\"three\"</span>,<span class=\"keyword\">nil</span>];</span><br><span class=\"line\"><span class=\"type\">NSArray</span> *<span class=\"built_in\">array</span> = @[@<span class=\"string\">\"one\"</span>, @<span class=\"string\">\"two\"</span>, @<span class=\"string\">\"three\"</span>];</span><br></pre></td></tr></table></figure>\n</li>\n<li></li>\n</ol>\n"},{"title":"XCode Manual","date":"2016-01-26T06:11:51.000Z","_content":"XCode工具的日常操作、错误提示及修正方式。\n\n\n## XCode\n### 1. 常用操作\n\n1. command ＋ 0  关闭左侧项目浏览\n2. command ＋ [ 或 ] 添加／删除tab\n3. tab 补全代码\n4. Esc 显示代码提示菜单\n5. 头文件/.m文件中选中类名， Edit --> Rename 重命名类名\n6. 双击变量名，点击右侧Edit all in scope，重命名变量名\n7. 功能菜单    \n\t#pragma mark whatever balabalabal\n\t\n\t#progma mark - 分割线\n\n8. command + 点击功能菜单的函数名，会排序显示 \n    \n\t![](https://github.com/ccSun/ccsun.github.io/blob/master/2016/01/26/xcode-manual/function-menu.jpg?raw=true)    \n\n9. option + 点击代码，调出 Documentation and api reference（Help中也可打开）\n\n\n### 2. Debug操作\n\n* GDB 属GNU\n* LLDB 属LLVM\n\n\n\n","source":"_posts/xcode-manual.md","raw":"title: XCode Manual\ncategories:\n  - iOS\ntags:\n  - iOS\n  - XCode\ndate: 2016-01-26 14:11:51\n---\nXCode工具的日常操作、错误提示及修正方式。\n\n\n## XCode\n### 1. 常用操作\n\n1. command ＋ 0  关闭左侧项目浏览\n2. command ＋ [ 或 ] 添加／删除tab\n3. tab 补全代码\n4. Esc 显示代码提示菜单\n5. 头文件/.m文件中选中类名， Edit --> Rename 重命名类名\n6. 双击变量名，点击右侧Edit all in scope，重命名变量名\n7. 功能菜单    \n\t#pragma mark whatever balabalabal\n\t\n\t#progma mark - 分割线\n\n8. command + 点击功能菜单的函数名，会排序显示 \n    \n\t![](https://github.com/ccSun/ccsun.github.io/blob/master/2016/01/26/xcode-manual/function-menu.jpg?raw=true)    \n\n9. option + 点击代码，调出 Documentation and api reference（Help中也可打开）\n\n\n### 2. Debug操作\n\n* GDB 属GNU\n* LLDB 属LLVM\n\n\n\n","slug":"xcode-manual","published":1,"updated":"2016-03-15T06:44:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimx9uslb001cj9v860jrp70v","content":"<p>XCode工具的日常操作、错误提示及修正方式。</p>\n<h2 id=\"XCode\"><a href=\"#XCode\" class=\"headerlink\" title=\"XCode\"></a>XCode</h2><h3 id=\"1-常用操作\"><a href=\"#1-常用操作\" class=\"headerlink\" title=\"1. 常用操作\"></a>1. 常用操作</h3><ol>\n<li>command ＋ 0  关闭左侧项目浏览</li>\n<li>command ＋ [ 或 ] 添加／删除tab</li>\n<li>tab 补全代码</li>\n<li>Esc 显示代码提示菜单</li>\n<li>头文件/.m文件中选中类名， Edit –&gt; Rename 重命名类名</li>\n<li>双击变量名，点击右侧Edit all in scope，重命名变量名</li>\n<li><p>功能菜单<br> #pragma mark whatever balabalabal</p>\n<p> #progma mark - 分割线</p>\n</li>\n<li><p>command + 点击功能菜单的函数名，会排序显示 </p>\n<p> <img src=\"https://github.com/ccSun/ccsun.github.io/blob/master/2016/01/26/xcode-manual/function-menu.jpg?raw=true\" alt=\"\">    </p>\n</li>\n<li><p>option + 点击代码，调出 Documentation and api reference（Help中也可打开）</p>\n</li>\n</ol>\n<h3 id=\"2-Debug操作\"><a href=\"#2-Debug操作\" class=\"headerlink\" title=\"2. Debug操作\"></a>2. Debug操作</h3><ul>\n<li>GDB 属GNU</li>\n<li>LLDB 属LLVM</li>\n</ul>\n","excerpt":"","more":"<p>XCode工具的日常操作、错误提示及修正方式。</p>\n<h2 id=\"XCode\"><a href=\"#XCode\" class=\"headerlink\" title=\"XCode\"></a>XCode</h2><h3 id=\"1-常用操作\"><a href=\"#1-常用操作\" class=\"headerlink\" title=\"1. 常用操作\"></a>1. 常用操作</h3><ol>\n<li>command ＋ 0  关闭左侧项目浏览</li>\n<li>command ＋ [ 或 ] 添加／删除tab</li>\n<li>tab 补全代码</li>\n<li>Esc 显示代码提示菜单</li>\n<li>头文件/.m文件中选中类名， Edit –&gt; Rename 重命名类名</li>\n<li>双击变量名，点击右侧Edit all in scope，重命名变量名</li>\n<li><p>功能菜单<br> #pragma mark whatever balabalabal</p>\n<p> #progma mark - 分割线</p>\n</li>\n<li><p>command + 点击功能菜单的函数名，会排序显示 </p>\n<p> <img src=\"https://github.com/ccSun/ccsun.github.io/blob/master/2016/01/26/xcode-manual/function-menu.jpg?raw=true\" alt=\"\">    </p>\n</li>\n<li><p>option + 点击代码，调出 Documentation and api reference（Help中也可打开）</p>\n</li>\n</ol>\n<h3 id=\"2-Debug操作\"><a href=\"#2-Debug操作\" class=\"headerlink\" title=\"2. Debug操作\"></a>2. Debug操作</h3><ul>\n<li>GDB 属GNU</li>\n<li>LLDB 属LLVM</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/android-activity/activity_lifecycle.png","post":"cimx9usjj0000j9v89v5f18p1","slug":"activity_lifecycle.png","modified":1,"renderable":1},{"_id":"source/_posts/android-build-process/build_process.png","post":"cimx9usjq0002j9v8clu0ubug","slug":"build_process.png","modified":1,"renderable":1},{"_id":"source/_posts/android-fragment/fragment_lifecycle.png","post":"cimx9usk3000aj9v8jnqu6842","slug":"fragment_lifecycle.png","modified":1,"renderable":1},{"_id":"source/_posts/android-ui-tools/theme_tools.png","post":"cimx9usl30013j9v8rqb5i2d6","slug":"theme_tools.png","modified":1,"renderable":1},{"_id":"source/_posts/xcode-manual/function-menu.jpg","post":"cimx9uslb001cj9v860jrp70v","slug":"function-menu.jpg","modified":1,"renderable":1},{"_id":"source/_posts/android-ddms-and-monitor/ddms_connect.png","post":"cimx9usjw0005j9v8ohs57k7b","slug":"ddms_connect.png","modified":1,"renderable":1},{"_id":"source/_posts/android-ddms-and-monitor/system_info.png","post":"cimx9usjw0005j9v8ohs57k7b","slug":"system_info.png","modified":1,"renderable":1},{"_id":"source/_posts/android-ddms-and-monitor/view_hierarchy.png","post":"cimx9usjw0005j9v8ohs57k7b","slug":"view_hierarchy.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cimx9usjy0006j9v8vsu0snw9","category_id":"cimx9usjv0004j9v8kkqn8edl","_id":"cimx9uska000bj9v8rimspg18"},{"post_id":"cimx9usjj0000j9v89v5f18p1","category_id":"cimx9usjv0004j9v8kkqn8edl","_id":"cimx9uski000fj9v88oes1f3b"},{"post_id":"cimx9usk10008j9v80odi6wj6","category_id":"cimx9usjv0004j9v8kkqn8edl","_id":"cimx9uskk000hj9v89l50d999"},{"post_id":"cimx9usk3000aj9v8jnqu6842","category_id":"cimx9usjv0004j9v8kkqn8edl","_id":"cimx9uskn000kj9v8xpv577ju"},{"post_id":"cimx9usjq0002j9v8clu0ubug","category_id":"cimx9usjv0004j9v8kkqn8edl","_id":"cimx9usko000mj9v8746wb68v"},{"post_id":"cimx9uskd000cj9v8uundj64a","category_id":"cimx9usjv0004j9v8kkqn8edl","_id":"cimx9uskq000pj9v8jkhmvh86"},{"post_id":"cimx9uskj000gj9v8ovda5t43","category_id":"cimx9usjv0004j9v8kkqn8edl","_id":"cimx9uskt000sj9v8i9z0p9dg"},{"post_id":"cimx9usjw0005j9v8ohs57k7b","category_id":"cimx9usjv0004j9v8kkqn8edl","_id":"cimx9uskv000vj9v88jfz5055"},{"post_id":"cimx9uskm000ij9v8g365f7q1","category_id":"cimx9usjv0004j9v8kkqn8edl","_id":"cimx9uskz000zj9v8eujxu8ax"},{"post_id":"cimx9uskn000lj9v8vo05ny53","category_id":"cimx9usjv0004j9v8kkqn8edl","_id":"cimx9usl10012j9v8jjvlcrq1"},{"post_id":"cimx9usko000nj9v8wvg84idw","category_id":"cimx9usjv0004j9v8kkqn8edl","_id":"cimx9usl50016j9v87jacaemz"},{"post_id":"cimx9uskr000qj9v8e7st8pck","category_id":"cimx9usjv0004j9v8kkqn8edl","_id":"cimx9usl80018j9v8jdd0p1w6"},{"post_id":"cimx9usku000tj9v8ci8krape","category_id":"cimx9usjv0004j9v8kkqn8edl","_id":"cimx9uslb001bj9v8caoknk1t"},{"post_id":"cimx9uskw000xj9v8l4r5nlj5","category_id":"cimx9usjv0004j9v8kkqn8edl","_id":"cimx9uslc001fj9v8u9xi93b4"},{"post_id":"cimx9usl30013j9v8rqb5i2d6","category_id":"cimx9usjv0004j9v8kkqn8edl","_id":"cimx9usld001ij9v87mjfaq3j"},{"post_id":"cimx9uskz0010j9v8kjbrpsnj","category_id":"cimx9usl50015j9v86sw3whdj","_id":"cimx9usle001lj9v8v9tmmgo1"},{"post_id":"cimx9usl60017j9v8ure00ud8","category_id":"cimx9uslc001dj9v8ijb0pem4","_id":"cimx9uslf001nj9v8uj7q574o"},{"post_id":"cimx9usl80019j9v834idbqqp","category_id":"cimx9usle001kj9v8drm4zl9i","_id":"cimx9uslh001qj9v8kehr9q2v"},{"post_id":"cimx9uslb001cj9v860jrp70v","category_id":"cimx9usle001kj9v8drm4zl9i","_id":"cimx9usli001sj9v8jv6fpcdc"}],"PostTag":[{"post_id":"cimx9usjj0000j9v89v5f18p1","tag_id":"cimx9usjt0003j9v8srmxs2od","_id":"cimx9uskt000rj9v8bk7h5nop"},{"post_id":"cimx9usjj0000j9v89v5f18p1","tag_id":"cimx9usk10007j9v8sl8pwkfx","_id":"cimx9uskv000uj9v8flk8od1a"},{"post_id":"cimx9usjj0000j9v89v5f18p1","tag_id":"cimx9uskf000ej9v8fiks4922","_id":"cimx9usky000yj9v8v9bunk50"},{"post_id":"cimx9usjj0000j9v89v5f18p1","tag_id":"cimx9uskn000jj9v80cta46qt","_id":"cimx9usl10011j9v8lp5mjwlw"},{"post_id":"cimx9usjq0002j9v8clu0ubug","tag_id":"cimx9uskq000oj9v8881riqke","_id":"cimx9uslc001ej9v896mluvzd"},{"post_id":"cimx9usjq0002j9v8clu0ubug","tag_id":"cimx9uskv000wj9v83h7espgw","_id":"cimx9uslc001gj9v8obrmkvrg"},{"post_id":"cimx9usjq0002j9v8clu0ubug","tag_id":"cimx9usl40014j9v8y84tihgs","_id":"cimx9usle001jj9v8f7g947zk"},{"post_id":"cimx9usjw0005j9v8ohs57k7b","tag_id":"cimx9usjt0003j9v8srmxs2od","_id":"cimx9uslj001tj9v8wh2982o2"},{"post_id":"cimx9usjw0005j9v8ohs57k7b","tag_id":"cimx9usld001hj9v8pwboi2dr","_id":"cimx9uslj001uj9v8whugtl3a"},{"post_id":"cimx9usjw0005j9v8ohs57k7b","tag_id":"cimx9usle001mj9v8a4bjcvzk","_id":"cimx9uslk001wj9v80e0j1z91"},{"post_id":"cimx9usjw0005j9v8ohs57k7b","tag_id":"cimx9uslh001pj9v86bz1ollz","_id":"cimx9uslk001xj9v88ukmuwa2"},{"post_id":"cimx9usjy0006j9v8vsu0snw9","tag_id":"cimx9usjt0003j9v8srmxs2od","_id":"cimx9uslo0023j9v8ls1mnwa7"},{"post_id":"cimx9usjy0006j9v8vsu0snw9","tag_id":"cimx9usli001rj9v89bdaho6b","_id":"cimx9uslo0024j9v89ejlw555"},{"post_id":"cimx9usjy0006j9v8vsu0snw9","tag_id":"cimx9uslj001vj9v8pw2jzpfg","_id":"cimx9uslo0026j9v878oklsvl"},{"post_id":"cimx9usjy0006j9v8vsu0snw9","tag_id":"cimx9uslk001yj9v8yqur59of","_id":"cimx9uslp0027j9v84sakz63f"},{"post_id":"cimx9usjy0006j9v8vsu0snw9","tag_id":"cimx9uslm001zj9v8wi0701pa","_id":"cimx9uslp0029j9v8cxciy03e"},{"post_id":"cimx9usjy0006j9v8vsu0snw9","tag_id":"cimx9usld001hj9v8pwboi2dr","_id":"cimx9uslp002aj9v8i2leasuk"},{"post_id":"cimx9usjy0006j9v8vsu0snw9","tag_id":"cimx9uslm0021j9v8wipboztj","_id":"cimx9uslp002cj9v80ub7q6hm"},{"post_id":"cimx9usk10008j9v80odi6wj6","tag_id":"cimx9usjt0003j9v8srmxs2od","_id":"cimx9uslp002dj9v8rar2363h"},{"post_id":"cimx9usk10008j9v80odi6wj6","tag_id":"cimx9usld001hj9v8pwboi2dr","_id":"cimx9uslq002fj9v8h2as6tzc"},{"post_id":"cimx9usk3000aj9v8jnqu6842","tag_id":"cimx9usjt0003j9v8srmxs2od","_id":"cimx9uslq002gj9v80tjp2pti"},{"post_id":"cimx9usk3000aj9v8jnqu6842","tag_id":"cimx9uslo0025j9v87gyw3ivv","_id":"cimx9uslq002ij9v81yb029ap"},{"post_id":"cimx9uskd000cj9v8uundj64a","tag_id":"cimx9usjt0003j9v8srmxs2od","_id":"cimx9uslq002jj9v80llufzal"},{"post_id":"cimx9uskd000cj9v8uundj64a","tag_id":"cimx9uslp0028j9v8sat3oybd","_id":"cimx9uslq002kj9v8eiiu8i3u"},{"post_id":"cimx9uskj000gj9v8ovda5t43","tag_id":"cimx9uslp002bj9v8qrekwnll","_id":"cimx9uslr002mj9v8egytreau"},{"post_id":"cimx9uskm000ij9v8g365f7q1","tag_id":"cimx9usjt0003j9v8srmxs2od","_id":"cimx9uslr002nj9v8ip6yfjvo"},{"post_id":"cimx9uskm000ij9v8g365f7q1","tag_id":"cimx9usld001hj9v8pwboi2dr","_id":"cimx9uslr002pj9v8z5ls7z2k"},{"post_id":"cimx9uskn000lj9v8vo05ny53","tag_id":"cimx9usjt0003j9v8srmxs2od","_id":"cimx9uslr002rj9v88uvi1i4r"},{"post_id":"cimx9uskn000lj9v8vo05ny53","tag_id":"cimx9uslq002hj9v8q9vv3byh","_id":"cimx9uslr002sj9v825w6f1ym"},{"post_id":"cimx9uskn000lj9v8vo05ny53","tag_id":"cimx9uslq002lj9v8mpqmdvdr","_id":"cimx9usls002uj9v80khczx7s"},{"post_id":"cimx9uskn000lj9v8vo05ny53","tag_id":"cimx9uslr002oj9v8y8jj9s4t","_id":"cimx9usls002vj9v87o19ccs1"},{"post_id":"cimx9usko000nj9v8wvg84idw","tag_id":"cimx9usjt0003j9v8srmxs2od","_id":"cimx9usls002xj9v87lx1pptw"},{"post_id":"cimx9usko000nj9v8wvg84idw","tag_id":"cimx9usld001hj9v8pwboi2dr","_id":"cimx9usls002yj9v85uf3fhu6"},{"post_id":"cimx9uskr000qj9v8e7st8pck","tag_id":"cimx9uslr002tj9v8ki72x2zj","_id":"cimx9uslt0030j9v87txdbgnp"},{"post_id":"cimx9usku000tj9v8ci8krape","tag_id":"cimx9uslq002hj9v8q9vv3byh","_id":"cimx9uslt0032j9v8y91m3psx"},{"post_id":"cimx9usku000tj9v8ci8krape","tag_id":"cimx9uslq002lj9v8mpqmdvdr","_id":"cimx9uslu0033j9v8p2iqrr2t"},{"post_id":"cimx9uskw000xj9v8l4r5nlj5","tag_id":"cimx9usjt0003j9v8srmxs2od","_id":"cimx9uslw0036j9v87hqfg1y6"},{"post_id":"cimx9uskw000xj9v8l4r5nlj5","tag_id":"cimx9uslm0021j9v8wipboztj","_id":"cimx9uslw0037j9v8bkifm59z"},{"post_id":"cimx9uskw000xj9v8l4r5nlj5","tag_id":"cimx9usld001hj9v8pwboi2dr","_id":"cimx9uslw0039j9v85f989jdh"},{"post_id":"cimx9uskz0010j9v8kjbrpsnj","tag_id":"cimx9uslw0035j9v8uvcvi821","_id":"cimx9uslx003bj9v8tmytlybc"},{"post_id":"cimx9uskz0010j9v8kjbrpsnj","tag_id":"cimx9uslw0038j9v8nw7e5vz2","_id":"cimx9uslx003cj9v8ylg1p2bj"},{"post_id":"cimx9usl30013j9v8rqb5i2d6","tag_id":"cimx9usjt0003j9v8srmxs2od","_id":"cimx9uslx003ej9v839k9g7hu"},{"post_id":"cimx9usl30013j9v8rqb5i2d6","tag_id":"cimx9uslm0021j9v8wipboztj","_id":"cimx9uslx003fj9v8lhagzemv"},{"post_id":"cimx9usl60017j9v8ure00ud8","tag_id":"cimx9uslx003dj9v897ewl21u","_id":"cimx9usly003ij9v8bx43rjct"},{"post_id":"cimx9usl60017j9v8ure00ud8","tag_id":"cimx9usly003gj9v8rhvc77l2","_id":"cimx9usly003jj9v8nk88rcfw"},{"post_id":"cimx9usl80019j9v834idbqqp","tag_id":"cimx9usly003hj9v8drh4330i","_id":"cimx9usly003mj9v8g4yykb0v"},{"post_id":"cimx9usl80019j9v834idbqqp","tag_id":"cimx9usly003kj9v8q7hnzpbg","_id":"cimx9uslz003nj9v825ywnudc"},{"post_id":"cimx9uslb001cj9v860jrp70v","tag_id":"cimx9usly003hj9v8drh4330i","_id":"cimx9usm0003pj9v8pricokqj"},{"post_id":"cimx9uslb001cj9v860jrp70v","tag_id":"cimx9uslz003oj9v8p7ggpbzi","_id":"cimx9usm0003qj9v8lyq3p6v8"}],"Tag":[{"name":"Android","_id":"cimx9usjt0003j9v8srmxs2od"},{"name":"Acivity","_id":"cimx9usk10007j9v8sl8pwkfx"},{"name":"内存优化","_id":"cimx9uskf000ej9v8fiks4922"},{"name":"内存溢出","_id":"cimx9uskn000jj9v80cta46qt"},{"name":"Building","_id":"cimx9uskq000oj9v8881riqke"},{"name":"Signing","_id":"cimx9uskv000wj9v83h7espgw"},{"name":"Gradle","_id":"cimx9usl40014j9v8y84tihgs"},{"name":"Optimization","_id":"cimx9usld001hj9v8pwboi2dr"},{"name":"DDMS","_id":"cimx9usle001mj9v8a4bjcvzk"},{"name":"Monitor","_id":"cimx9uslh001pj9v86bz1ollz"},{"name":"Lint","_id":"cimx9usli001rj9v89bdaho6b"},{"name":"Annotations","_id":"cimx9uslj001vj9v8pw2jzpfg"},{"name":"DeepLink","_id":"cimx9uslk001yj9v8yqur59of"},{"name":"AppIndex","_id":"cimx9uslm001zj9v8wi0701pa"},{"name":"Tools","_id":"cimx9uslm0021j9v8wipboztj"},{"name":"Fragment","_id":"cimx9uslo0025j9v87gyw3ivv"},{"name":"Loaders","_id":"cimx9uslp0028j9v8sat3oybd"},{"name":"IconSize","_id":"cimx9uslp002bj9v8qrekwnll"},{"name":"Tasks","_id":"cimx9uslq002hj9v8q9vv3byh"},{"name":"Stack","_id":"cimx9uslq002lj9v8mpqmdvdr"},{"name":"OverviewScreen","_id":"cimx9uslr002oj9v8y8jj9s4t"},{"name":"项目目录","_id":"cimx9uslr002tj9v8ki72x2zj"},{"name":"Hexo","_id":"cimx9uslw0035j9v8uvcvi821"},{"name":"Setting","_id":"cimx9uslw0038j9v8nw7e5vz2"},{"name":"Java","_id":"cimx9uslx003dj9v897ewl21u"},{"name":"Spring","_id":"cimx9usly003gj9v8rhvc77l2"},{"name":"iOS","_id":"cimx9usly003hj9v8drh4330i"},{"name":"Object-c","_id":"cimx9usly003kj9v8q7hnzpbg"},{"name":"XCode","_id":"cimx9uslz003oj9v8p7ggpbzi"}]}}